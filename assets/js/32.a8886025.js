(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{440:function(e,r,t){"use strict";t.r(r);var n=t(2),a=Object(n.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_06-错误处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_06-错误处理"}},[e._v("#")]),e._v(" 06.错误处理")]),e._v(" "),r("p",[e._v("Solidity 如果遇到异常错误，是通过回退状态的方式来进行处理。发生异常时，会撤消当前调用和所有子调用改变的状态变量，同时给调用者返回一个错误标识。")]),e._v(" "),r("p",[e._v("调用者调用某个函数方法，要么成功修改了所有状态变量，要么遇到异常不修改任何状态变量，不存在成功修改部分变量的情况，")]),e._v(" "),r("p",[e._v("Solidity 提供了 "),r("strong",[e._v("require")]),e._v(" 、"),r("strong",[e._v("assert")]),e._v(" 和 "),r("strong",[e._v("revert")]),e._v(" 来处理异常。同时可以使用 "),r("code",[e._v("error")]),e._v(" 关键字来实现错误。")]),e._v(" "),r("p",[e._v("跟用错误字符串相比， error 更便宜并且允许你编码额外的数据，还可以用 "),r("code",[e._v("NatSpec")]),e._v(" 为用户去描述错误。")]),e._v(" "),r("p",[e._v("Solidity 使用状态恢复异常来处理错误。这种异常将撤消对当前调用（及其所有子调用）中的状态所做的所有更改，并且还向调用者标记错误。")]),e._v(" "),r("p",[e._v("如果异常在子调用发生，那么异常会自动冒泡到顶层（例如：异常会重新抛出），除非他们在 "),r("code",[e._v("try/catch")]),e._v(" 语句中捕获了错误。 但是如果是在 "),r("code",[e._v("send")]),e._v(" 和 低级 "),r("code",[e._v("call")]),e._v(", "),r("code",[e._v("delegatecall")]),e._v(" 和 "),r("code",[e._v("staticcall")]),e._v(" 的调用里发生异常时， 他们会返回 "),r("code",[e._v("false")]),e._v(" （第一个返回值） 而不是冒泡异常。")]),e._v(" "),r("p",[e._v("警告注意：根据 EVM 的设计，如果被调用的地址不存在，低级别函数 "),r("code",[e._v("call")]),e._v(", "),r("code",[e._v("delegatecall")]),e._v(" 和 "),r("code",[e._v("staticcall")]),e._v(" 第一个返回值同样是 "),r("code",[e._v("true")]),e._v("。 如果需要，请在调用之前检查账号的存在性。")]),e._v(" "),r("p",[e._v("异常可以包含错误数据，以 error 示例 的形式传回给调用者。 内置的错误 "),r("code",[e._v("Error(string)")]),e._v(" 和 "),r("code",[e._v("Panic(uint256)")]),e._v(" 被作为特殊函数使用，下面将解释。 "),r("code",[e._v("Error")]),e._v(" 用于 “常规” 错误条件，而 "),r("code",[e._v("Panic")]),e._v(" 用于在（无 bug）代码中不应该出现的错误。")]),e._v(" "),r("p",[e._v("函数 assert 和 require 可用于检查条件并在条件不满足时抛出异常。")]),e._v(" "),r("p",[e._v("⚠️ 注意：永远不要相信错误数据。默认情况下，错误数据会通过外部调用链向上冒泡，这意味着一个合约可能会收到一个它直接调用的任何合约中没有定义的错误。此外，任何合约都可以通过返回与错误签名相匹配的数据来伪造任何错误，即使该错误没有在任何地方定义。")]),e._v(" "),r("h2",{attrs:{id:"_1️⃣-require"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-require"}},[e._v("#")]),e._v(" 1️⃣ require")]),e._v(" "),r("p",[e._v("require 用来严查某些条件，如果不满足这些雕件，就会回退所有状态的变化。")]),e._v(" "),r("h3",{attrs:{id:"_1-语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-语法"}},[e._v("#")]),e._v(" 1.语法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("require(condition[, 'Something bad happened'])\n")])])]),r("p",[e._v("如果条件不满足则撤销状态更改 ，用于检查由输入或者外部组件引起的错误。可以同时提供一个错误消息。")]),e._v(" "),r("ul",[r("li",[e._v("require 函数常常用来检查输入变量或状态变量是否满足条件，以及验证调用外部合约的返回值。")]),e._v(" "),r("li",[e._v("require 可以有返回值，例如："),r("code",[e._v("require(condition, 'Something bad happened');")]),e._v("。")]),e._v(" "),r("li",[e._v("require 的返回值不宜过长，因为返回信息需要消耗 gas。\n"),r("ul",[r("li",[e._v("备注：在例子 2 测试中，并没有证明长度越长，消耗的 gas 越多。")])])])]),e._v(" "),r("p",[e._v("例子")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256 public amount = 0;\n\n    function test(uint256 _x) external {\n        require(_x < 10, "My error info 1"); // _x >= 10 时候会报错\n        amount = _x;\n        require(_x > 20); // _x <= 10 时候会报错\n    }\n}\n')])])]),r("p",[r("strong",[e._v("注解")]),e._v(" "),r("code",[e._v("require")]),e._v(" 是一个像其他函数一样可被执行的函数。意味着，所有的参数在函数被执行之前就都会被执行。 尤其，在\n"),r("code",[e._v("require(condition, f())")]),e._v(" 里，函数 "),r("code",[e._v("f")]),e._v(" 会被执行，即便 "),r("code",[e._v("condition")]),e._v(" 为 True .")]),e._v(" "),r("h3",{attrs:{id:"_2-gas-测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-gas-测试"}},[e._v("#")]),e._v(" 2.gas 测试")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo1 {\n    // 21611 gas\n    function test1(uint256 _x) external pure {\n        require(\n            _x < 10,\n            "My error info 1 balalaba balalaba balalaba balalaba balalaba "\n        );\n    }\n}\ncontract Demo2 {\n    // 21611 gas\n    function test2(uint256 _x) external pure {\n        require(_x < 10, "Error");\n    }\n}\ncontract Demo3 {\n    // 21611 gas\n    function test3(uint256 _x) external pure {\n        require(_x < 10, "error");\n    }\n}\n')])])]),r("h3",{attrs:{id:"_3-使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用场景"}},[e._v("#")]),e._v(" 3.使用场景")]),e._v(" "),r("ul",[r("li",[e._v("验证用户输入，例如："),r("code",[e._v("require(input_var>100)")])]),e._v(" "),r("li",[e._v("验证外部合约的调用结果，例如："),r("code",[e._v("require(external.send(amount))")])]),e._v(" "),r("li",[e._v("在执行状态更改操作之前验证状态条件，例如："),r("code",[e._v("require(block.number > 49999)")]),e._v(" 或 "),r("code",[e._v("require(balance[msg.sender]>=amount)")])]),e._v(" "),r("li",[e._v("require() 语句的失败报错，应该被看作一个正常的判断语句流程不能通过的事件。")])]),e._v(" "),r("p",[e._v("一般来说，使用 "),r("code",[e._v("require()")]),e._v(" 的频率更多，通常应用于函数的开头和函数修改器内。")]),e._v(" "),r("p",[e._v("一句话: "),r("strong",[e._v("require() 函数用于检测输入变量或状态变量是否满足条件，以及验证调用外部合约的返回值。")])]),e._v(" "),r("h2",{attrs:{id:"_2️⃣-assert"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-assert"}},[e._v("#")]),e._v(" 2️⃣ assert")]),e._v(" "),r("h3",{attrs:{id:"_1-语法-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-语法-2"}},[e._v("#")]),e._v(" 1.语法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("assert(bool condition)\n")])])]),r("p",[e._v("如果不满足条件，则会导致 Panic 错误，则撤销状态更改 - 用于检查内部错误。")]),e._v(" "),r("p",[r("code",[e._v("assert()")]),e._v("与 "),r("code",[e._v("require()")]),e._v(" 语句都需要满足括号中的条件，才能进行后续操作，若不满足则抛出错误。")]),e._v(" "),r("ul",[r("li",[e._v("assert：断言，不能包括报错信息的。")])]),e._v(" "),r("p",[r("strong",[e._v("例子")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256 public amount = 0;\n\n    function test1(uint256 _x) external {\n        require(_x < 10, "My error info 1"); // _x >= 10 时候会报错\n        amount = _x;\n        assert(amount == _x); // 必须等于_x，否则抛出错误\n    }\n\n    function test2(uint256 _x) external {\n        require(_x < 10, "My error info 1"); // _x >= 10 时候会报错\n        amount = _x;\n        assert(amount == 8); // 必须等于8，否则抛出错误\n    }\n}\n')])])]),r("h3",{attrs:{id:"_2-使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用场景"}},[e._v("#")]),e._v(" 2.使用场景")]),e._v(" "),r("ul",[r("li",[e._v("检查溢出")]),e._v(" "),r("li",[e._v("检查不变量")]),e._v(" "),r("li",[e._v("更改后验证状态")]),e._v(" "),r("li",[e._v("预防永远不会发生的情况")]),e._v(" "),r("li",[e._v("assert()语句的失败报错，意味着发生了代码层面的错误事件，很大可能是合约中有一个 bug 需要修复。")]),e._v(" "),r("li",[e._v("也可以智能合约写测试。")])]),e._v(" "),r("p",[e._v("一般来说，使用 "),r("code",[e._v("assert()")]),e._v("的频率较少，通常用于函数的结尾。基本上，"),r("code",[e._v("require()")]),e._v(" 应该用于检查条件，而 "),r("code",[e._v("assert()")]),e._v(" 只是为了防止发生任何非常糟糕的事情。")]),e._v(" "),r("h3",{attrs:{id:"_3-扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-扩展"}},[e._v("#")]),e._v(" 3.扩展")]),e._v(" "),r("p",[e._v("assert 函数会创建一个 "),r("code",[e._v("Panic(uint256)")]),e._v(" 类型的错误。同样的错误在以下列出的特定情形会被编译器创建。")]),e._v(" "),r("p",[e._v("assert 函数应该只用于测试内部错误，检查不变量，正常的函数代码永远不会产生 Panic, 甚至是基于一个无效的外部输入时。 如果发生了，那就说明出现了一个需要你修复的 bug。如果使用得当，语言分析工具可以识别出那些会导致 Panic 的 assert 条件和函数调用。")]),e._v(" "),r("p",[e._v("下列情况将会产生一个 Panic 异常： 错误数据会提供的错误码编号，用来指示 Panic 的类型：")]),e._v(" "),r("ol",[r("li",[e._v("0x00: 用于常规编译器插入的 Panic。")]),e._v(" "),r("li",[e._v("0x01: 如果你调用 "),r("code",[e._v("assert")]),e._v(" 的参数（表达式）结果为 false 。")]),e._v(" "),r("li",[e._v("0x11: 在 "),r("code",[e._v("unchecked { ... }")]),e._v(" 外，如果算术运算结果向上或向下溢出。")]),e._v(" "),r("li",[e._v("0x12; 如果你用零当除数做除法或模运算（例如 "),r("code",[e._v("5 / 0")]),e._v(" 或 "),r("code",[e._v("23 % 0")]),e._v(" ）。")]),e._v(" "),r("li",[e._v("0x21: 如果你将一个太大的数或负数值转换为一个枚举类型。")]),e._v(" "),r("li",[e._v("0x22: 如果你访问一个没有正确编码的存储 byte 数组.")]),e._v(" "),r("li",[e._v("0x31: 如果在空数组上 "),r("code",[e._v(".pop()")]),e._v(" 。")]),e._v(" "),r("li",[e._v("0x32: 如果你访问 "),r("code",[e._v("bytesN")]),e._v(" 数组（或切片）的索引太大或为负数。(例如：\n"),r("code",[e._v("x[i]")]),e._v(" 而 "),r("code",[e._v("i >= x.length")]),e._v(" 或 "),r("code",[e._v("i < 0")]),e._v(").")]),e._v(" "),r("li",[e._v("0x41: 如果你分配了太多的内内存或创建了太大的数组。")]),e._v(" "),r("li",[e._v("0x51: 如果你调用了零初始化内部函数类型变量。")])]),e._v(" "),r("h2",{attrs:{id:"_3️⃣-revert"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-revert"}},[e._v("#")]),e._v(" 3️⃣ revert")]),e._v(" "),r("p",[e._v("语法: "),r("code",[e._v("revert([string memory reason])")])]),e._v(" "),r("ul",[r("li",[e._v("使用 revert：抛出错误,它使用圆括号接受一个字符串：语句将一个自定义的错误作为直接参数，没有括号："),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('revert();\nrevert("description");\n')])])])]),e._v(" "),r("li",[e._v("使用 "),r("code",[e._v("revert()")]),e._v(" 会触发一个没有任何错误数据的回退，而 "),r("code",[e._v('revert("description")')]),e._v(" 会产生一个 "),r("code",[e._v("Error(string)")]),e._v(" 错误。")]),e._v(" "),r("li",[e._v("使用 revert：触发自定义错误 ·"),r("code",[e._v("revert CustomError(arg1, arg2);")]),e._v(" "),r("ul",[r("li",[e._v("可以接收参数，方便判断。比如可以传入 "),r("code",[e._v("msg.sender")]),e._v(" / 函数参数 等")])])])]),e._v(" "),r("p",[e._v("终止运行并撤销状态更改。可以同时提供一个解释性的字符串。")]),e._v(" "),r("p",[r("strong",[e._v("例子")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorDemo {\n    function testRevert(uint256 _x) external pure {\n        if (_x > 10) {\n            revert("_x > 10");\n        }\n    }\n\n    // 自定义错误\n    error MyError(address call, uint256 _i);\n\n    function testCustomError(uint256 _x) external view {\n        if (_x > 10) {\n            revert MyError(msg.sender, _x);\n        }\n    }\n}\n')])])]),r("p",[e._v("只要参数没有额外的附加效果，使用 "),r("code",[e._v("if (!condition) revert(...);")]),e._v(" 和 "),r("code",[e._v("require(condition, ...);")]),e._v(" 是等价的，例如当参数是字符串的情况。")]),e._v(" "),r("h2",{attrs:{id:"_4️⃣-三种方式的总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-三种方式的总结"}},[e._v("#")]),e._v(" 4️⃣ 三种方式的总结")]),e._v(" "),r("h3",{attrs:{id:"_1-require、assert-不同点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-require、assert-不同点"}},[e._v("#")]),e._v(" 1.require、assert 不同点")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("require(false)")]),e._v(" 编译为 "),r("code",[e._v("0xfd")]),e._v("，这是 "),r("code",[e._v("revert()")]),e._v(" 的操作码，"),r("strong",[e._v("所以会退还所有剩余的 gas，同时可以返回一个自定义的报错信息")]),e._v("。")]),e._v(" "),r("li",[r("code",[e._v("assert(false)")]),e._v(" 编译为 "),r("code",[e._v("0xfe")]),e._v("，这是一个无效的操作码，"),r("strong",[e._v("所以会消耗掉所有剩余的 gas，并恢复所有的操作")]),e._v("。")]),e._v(" "),r("li",[r("code",[e._v("require")]),e._v(" 的 gas 消耗要小于 "),r("code",[e._v("assert")]),e._v("，而且可以有返回值，使用更为灵活。")])]),e._v(" "),r("p",[e._v("错误信息：")]),e._v(" "),r("p",[r("code",[e._v("require")]),e._v(" 函数可以创建无错误提示的错误，也可以创建一个 "),r("code",[e._v("Error(string)")]),e._v("类型的错误。 "),r("code",[e._v("require")]),e._v("函数应该用于确认条件有效性，例如输入变量，或合约状态变量是否满足条件，或验证外部合约调用返回的值。")]),e._v(" "),r("p",[e._v("当前不可以使用混合使用 require 和自定义错误，而是需要使用 "),r("code",[e._v("if (!condition) revert CustomError();")]),e._v(" 。")]),e._v(" "),r("p",[e._v("下列情况将会产生一个 "),r("code",[e._v("Error(string)")]),e._v("（或无错误提示）的错误：")]),e._v(" "),r("ol",[r("li",[e._v("如果你调用 "),r("code",[e._v("require(x)")]),e._v(" ，而 "),r("code",[e._v("x")]),e._v(" 结果为 "),r("code",[e._v("false")]),e._v(" 。")]),e._v(" "),r("li",[e._v("如果你使用 "),r("code",[e._v("revert()")]),e._v(" 或者 "),r("code",[e._v('revert("description")')]),e._v(" 。")]),e._v(" "),r("li",[e._v("如果你在不包含代码的合约上执行外部函数调用。")]),e._v(" "),r("li",[e._v("如果你通过合约接收以太币，而又没有 "),r("code",[e._v("payable")]),e._v("\n修饰符的公有函数（包括构造函数和 fallback 函数）。")]),e._v(" "),r("li",[e._v("如果你的合约通过公有 getter 函数接收 Ether 。")])]),e._v(" "),r("p",[e._v("在下面的情况下，来自外部调用的错误数据（如果提供的话）被转发，这意味可能"),r("code",[e._v("Error")]),e._v(" 或 "),r("code",[e._v("Panic")]),e._v(" 都有可能触发。")]),e._v(" "),r("ol",[r("li",[e._v("如果 "),r("code",[e._v(".transfer()")]),e._v(" 失败。")]),e._v(" "),r("li",[e._v("如果你通过消息调用调用某个函数，但该函数没有正确结束（例如, 它耗尽了\ngas，没有匹配函数，或者本身抛出一个异常），不包括使用低级别 "),r("code",[e._v("call")]),e._v("\n， "),r("code",[e._v("send")]),e._v(" ， "),r("code",[e._v("delegatecall")]),e._v(" ， "),r("code",[e._v("callcode")]),e._v(" 或 "),r("code",[e._v("staticcall")]),e._v("\n的函数调用。低级操作不会抛出异常，而通过返回 "),r("code",[e._v("false")]),e._v(" 来指示失败。")]),e._v(" "),r("li",[e._v("如果你使用 "),r("code",[e._v("new")]),e._v(" 关键字创建合约，但合约创建没有正确结束。")])]),e._v(" "),r("p",[e._v("你可以选择给 "),r("code",[e._v("require")]),e._v(" 提供一个消息字符串，但 "),r("code",[e._v("assert")]),e._v(" 不行。")]),e._v(" "),r("p",[e._v("如果你没有为 "),r("code",[e._v("require")]),e._v(" 提供一个字符串参数，它会用空错误数据进行 revert， 甚至不包括错误选择器。")]),e._v(" "),r("p",[e._v("在下例中，你可以看到如何轻松使用 "),r("code",[e._v("require")]),e._v(" 检查输入条件以及如何使用\n"),r("code",[e._v("assert")]),e._v(" 检查内部错误.")]),e._v(" "),r("div",{staticClass:"language-solidity extra-class"},[r("pre",{pre:!0,attrs:{class:"language-solidity"}},[r("code",[e._v("\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// SPDX-License-Identifier: GPL-3.0")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pragma")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("solidity")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">=")]),r("span",{pre:!0,attrs:{class:"token version number"}},[e._v("0.5.0")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),r("span",{pre:!0,attrs:{class:"token version number"}},[e._v("0.9.0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("contract")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Sharer")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("sendHalf")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("address")]),e._v(" addr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("payable")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("returns")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint")]),e._v(" balance"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("require")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("msg"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("value "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Even value required."')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),r("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint")]),e._v(" balanceBeforeTransfer "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("balance"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            addr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("transfer")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("msg"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("value "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n            "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 由于转账函数在失败时抛出异常并且不会调用到以下代码，因此我们应该没有办法检查仍然有一半的钱。")]),e._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("assert")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("balance "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" balanceBeforeTransfer "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" msg"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("value "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("balance"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),r("p",[e._v("在内部， Solidity 对异常执行回退操作（指令 "),r("code",[e._v("0xfd")]),e._v(" ），从而让 EVM 回退对状态所做的所有更改。回退的原因是无法安全地继续执行，因为无法达到预期的结果。 因为我们想要保持交易的原子性，最安全的动作是回退所有的更改，并让整个交易（或至少调用）没有任何新影响。")]),e._v(" "),r("p",[e._v("在这两种情况下，调用者都可以使用 "),r("code",[e._v("try")]),e._v("/ "),r("code",[e._v("catch")]),e._v("来应对此类失败，但是被调用函数的更改将始终被还原。")]),e._v(" "),r("p",[r("strong",[e._v("请注意")]),e._v("， 在 0.8.0 之前，Panic 异常使用 "),r("code",[e._v("invalid")]),e._v(" 指令，其会消耗了所有可用的 gas。 使用 "),r("code",[e._v("require")]),e._v(" 的异常，在 Metropolis 版本之前会消耗所有的 gas。")]),e._v(" "),r("h3",{attrs:{id:"_2-require、assert、revert-共同点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-require、assert、revert-共同点"}},[e._v("#")]),e._v(" 2.require、assert、revert 共同点")]),e._v(" "),r("p",[e._v("以下三个语句的功能完全相同：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// revert\nif(msg.sender != owner) {\n   revert();\n }\n// require\nrequire(msg.sender == owner);\n\n// assert\nassert(msg.sender == owner);\n")])])]),r("p",[r("strong",[e._v("例子")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorDemo {\n    function testRequire(uint256 _x) external pure {\n        require(_x > 10, "_x > 10");\n    }\n\n    function testRevert(uint256 _x) external pure {\n        if (_x > 10) {\n            revert("_x > 10");\n        }\n    }\n\n    function testAssert(uint256 _x) external pure {\n        assert(_x == 10);\n    }\n\n    error MyError(address call, uint256 _i);\n\n    function testCustomError(uint256 _x) external view {\n        if (_x > 10) {\n            revert MyError(msg.sender, _x);\n        }\n    }\n}\n')])])]),r("h2",{attrs:{id:"_5️⃣-自定义-error"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-自定义-error"}},[e._v("#")]),e._v(" 5️⃣ 自定义 Error")]),e._v(" "),r("p",[e._v("Solidity 中的错误（关键字 error）提供了一种方便且省 gas 的方式来向用户解释为什么一个操作会失败。它们可以被定义在合约（包括接口和库）内部和外部。")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("error")]),e._v(" 只能通过 "),r("code",[e._v("revert")]),e._v(" 触发")]),e._v(" "),r("li",[e._v("使用自定义 error 抛出错误，向调用者描述错误信息。")]),e._v(" "),r("li",[e._v("开发者可以在任何时候，任何条件下触发 自定义 Error")]),e._v(" "),r("li",[e._v("error 花费更少的 gas。")]),e._v(" "),r("li",[r("code",[e._v("error")]),e._v(" 可以定义在 contract 之外。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 自定义错误\nerror MyError1(address call, uint256 _i);\n\ncontract ErrorDemo {\n    // 自定义错误\n    error MyError2(address call, uint256 _i);\n\n    function testCustom1(uint256 _x) external view {\n        if (_x > 10) {\n            revert MyError1(msg.sender, _x);\n        }\n    }\n\n    function testCustom2(uint256 _x) external view {\n        if (_x > 10) {\n            revert MyError2(msg.sender, _x);\n        }\n    }\n}\n")])])]),r("p",[e._v("错误必须与 revert 语句 一起使用。它会还原当前调用中的发生的所有变化，并将错误数据传回给调用者。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.4;\n\n/// 转账时，没有足够的余额。\n/// @param available balance available.\n/// @param required requested amount to transfer.\nerror InsufficientBalance(uint256 available, uint256 required);\n\ncontract TestToken {\n    mapping(address => uint) balance;\n    function transfer(address to, uint256 amount) public {\n        if (amount > balance[msg.sender])\n            revert InsufficientBalance({\n                available: balance[msg.sender],\n                required: amount\n            });\n        balance[msg.sender] -= amount;\n        balance[to] += amount;\n    }\n    // ...\n}\n")])])]),r("p",[e._v("错误不能被重写或覆盖，但是可以继承。只要作用域不同，同一个错误可以在多个地方定义。只能使用 "),r("code",[e._v("revert")]),e._v(" 语句创建错误实例。")]),e._v(" "),r("p",[e._v("错误产生的数据，会通过 revert 操作传递给调用者，可以交由链外组件处理或在 try/catch 语句 中捕获它。注意，只有外部调用的错误才能被捕获。发生在内部调用或同一函数内的 revert 不能被捕获。")]),e._v(" "),r("p",[e._v("如果是调用 "),r("code",[e._v("Error(string)")]),e._v(" 函数，这里提供的字符串将经过 ABI 编码。"),r("code",[e._v('revert("Not enough Ether provided.");')]),e._v(" 会产生如下的十六进制错误返回值：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// Error(string) 的函数选择器\n0x08c379a0\n\n// 数据的偏移量（32）\n0x0000000000000000000000000000000000000000000000000000000000000020\n\n// 字符串长度（26）\n0x000000000000000000000000000000000000000000000000000000000000001a\n\n// 字符串数据（"Not enough Ether provided." 的 ASCII 编码，26字节）\n0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000\n')])])]),r("p",[e._v("提示信息可以通过 "),r("code",[e._v("try/catch")]),e._v(" （下面介绍）来获取到。")]),e._v(" "),r("blockquote",[r("p",[r("code",[e._v("revert()")]),e._v("之前有一个同样用法的 "),r("code",[e._v("throw")]),e._v("，它在 0.4.13 版本弃用，在 0.5.0 移除。")])]),e._v(" "),r("h2",{attrs:{id:"_6️⃣-natspec-error"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-natspec-error"}},[e._v("#")]),e._v(" 6️⃣ Natspec Error")]),e._v(" "),r("p",[e._v("使用一个自定义的错误实例通常会比字符串描述便宜得多。因为你可以使用错误名来描述它，它只被编码为四个字节。更长的描述可以通过 NatSpec 提供，这不会产生任何费用。")]),e._v(" "),r("p",[e._v("通过三个斜杠 "),r("code",[e._v("///")]),e._v(" 定义的错误，它比"),r("code",[e._v("require")]),e._v("更省 gas。推荐代替 require 使用。")]),e._v(" "),r("p",[e._v("如果错误没有任何参数，错误只需要四个字节的数据，你可以使用 NatSpec，来进一步解释错误背后的原因，NatSpec 不会存储在链上。这个方式使得它同时也是一个非常便宜和方便的错误报告功能。")]),e._v(" "),r("p",[e._v("更具体地说，一个错误实例的 ABI 编码方式与调用相同名称和类型的函数的方式相同，它作为"),r("code",[e._v("revert")]),e._v(" 操作码的返回数据使用。 这意味着错误数据由一个 4 字节的选择器和 ABI-encoded 数据组成。选择器是错误的签名的 keccak256 哈希的前四个字节组成。")]),e._v(" "),r("p",[e._v("代码结构如下")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("/// this is netspec error info\nerror MyError1();\n")])])]),r("p",[e._v("例子如下:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorDemo {\n    // netspec error\n    /// this is netspec error info,this is netspec error info,this is netspec error info,this is netspec error info,this is netspec error info\n    error MyError1();\n\n    /// 这是一个错误！老铁，你的输入参数错啦，必须要大于10的数字才可以通过！\n    error MyError2();\n\n    // 21647 gas\n    function test1(uint256 _x) external pure {\n        if (_x < 10) {\n            revert MyError1();\n        }\n    }\n\n    // 21691 gas\n    function test2(uint256 _x) external pure {\n        if (_x < 10) {\n            revert MyError2();\n        }\n    }\n\n    // 22036 gas\n    function test3(uint256 _x) external pure {\n        require(\n            _x > 10,\n            "this is netspec error info,this is netspec error info,this is netspec error info,this is netspec error info,this is netspec error info"\n        );\n    }\n\n    // 21974 gas\n    function test4(uint256 _x) external pure {\n        require(\n            _x > 10,\n            unicode"这是一个错误！老铁，你的输入参数错啦，必须要大于10的数字才可以通过！"\n        );\n    }\n}\n')])])]),r("h2",{attrs:{id:"_7️⃣-try-catch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7️⃣-try-catch"}},[e._v("#")]),e._v(" 7️⃣ try catch")]),e._v(" "),r("p",[e._v("在当前合约发起对外部合约的调用，如果外部合约调用执行失败被 revert，外部合约状态会被回滚，当前合约状态也会被回滚。这是正常的逻辑。")]),e._v(" "),r("p",[e._v("但有时候我们并不想这样，要是能够捕获外部合约调用异常，然后根据情况做自己的处理会更好吗！所以，这种场景下适应于使用 "),r("code",[e._v("try...catch")]),e._v(" 语句。")]),e._v(" "),r("p",[r("code",[e._v("try catch")]),e._v("仅用于 外部函数调用　和合约创建调用。")]),e._v(" "),r("ul",[r("li",[e._v("外部函数调用")]),e._v(" "),r("li",[e._v("合约创建调用")])]),e._v(" "),r("h3",{attrs:{id:"_1-语法-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-语法-3"}},[e._v("#")]),e._v(" 1.语法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('try this.count() {\n    // 成功逻辑\n    return "success";\n} catch Error(string memory reason) {\n    // 失败的逻辑: require / revert\n    // 调用 count() 失败时执行，通常是不满足 require 语句条件或触发 revert 语句时所引起的调用失败\n    return reason;\n} catch (bytes memory) {\n    // 失败逻辑\n    // 调用 count() 异常时执行，通常是触发 assert 语句或除 0 等比较严重错误时会执行\n    return "assert error";\n}\n')])])]),r("p",[e._v("上面的逻辑也可以简写如下")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('try this.count() {\n    // 成功逻辑\n    return "success";\n} catch (bytes memory) {\n    // 失败逻辑: require / revert / assert\n     return "assert error";\n}\n')])])]),r("p",[r("strong",[e._v("例子")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Manager {\n    // function count() public pure returns (int256) {\n    //     require(1 == 2, "require error");\n    //     return 2;\n    // }\n\n    function count() public pure returns (int256) {\n        assert(1 == 2);\n        return 2;\n    }\n\n    function test() public view returns (string memory) {\n        // this 代表当前函数\n        try this.count() {\n            return "success";\n        } catch Error(string memory reason) {\n            // reason 是出错原因\n            // 调用 count() 失败时执行，通常是不满足 require 语句条件\n            // 或触发 revert 语句时所引起的调用失败\n            return reason;\n        } catch (bytes memory) {\n            // 调用 count() 异常时执行，通常是触发 assert 语句或除 0 等比较严重错误时会执行\n            return "assert error";\n        }\n    }\n}\n')])])]),r("p",[e._v("也可以去掉"),r("code",[e._v("catch Error(string memory reason)")]),e._v("，只使用 "),r("code",[e._v("catch (bytes memory)")]),e._v("；")]),e._v(" "),r("p",[e._v("如下的测试")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Manager {\n    function count() public pure returns (int256) {\n        require(1 == 2, "require error");\n        return 2;\n    }\n\n    function test() public view returns (string memory) {\n        // this 代表当前函数\n        try this.count() {\n            return "success";\n        } catch (bytes memory) {\n            // 调用 count() 异常时执行，通常是触发 assert 语句或除 0 等比较严重错误时会执行\n            return "assert error";\n        }\n    }\n}\n')])])]),r("p",[e._v("外部调用的失败，可以通过 try/catch 语句来捕获，例如：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" // SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.1;\n\ninterface DataFeed { function getData(address token) external returns (uint value); }\n\ncontract FeedConsumer {\n    DataFeed feed;\n    uint errorCount;\n    function rate(address token) public returns (uint value, bool success) {\n        // 如果错误超过 10 次，永久关闭这个机制\n        require(errorCount < 10);\n        try feed.getData(token) returns (uint v) {\n            return (v, true);\n        } catch Error(string memory /*reason*/) {\n            // This is executed in case\n            // revert was called inside getData\n            // and a reason string was provided.\n            errorCount++;\n            return (0, false);\n        }  catch Panic(uint /*errorCode*/) {\n            // This is executed in case of a panic,\n            // i.e. a serious error like division by zero\n            // or overflow. The error code can be used\n            // to determine the kind of error.\n            errorCount++;\n            return (0, false);\n        } catch (bytes memory /*lowLevelData*/) {\n            // This is executed in case revert() was used。\n            errorCount++;\n            return (0, false);\n        }\n    }\n}\n")])])]),r("p",[r("code",[e._v("try")]),e._v(" 关键词后面必须有一个表达式，代表外部函数调用或合约创建（"),r("code",[e._v("new ContractName()")]),e._v("）。")]),e._v(" "),r("p",[e._v("以下内容摘自文档：")]),e._v(" "),r("p",[e._v("在表达式上的错误不会被捕获（例如，如果它是一个复杂的表达式，还涉及内部函数调用），只有外部调用本身发生的 revert 可以捕获。 接下来的 "),r("code",[e._v("returns")]),e._v(" 部分（是可选的）声明了与外部调用返回的类型相匹配的返回变量。在没有错误的情况下，这些变量被赋值，合约将继续执行第一个成功块内代码。如果到达成功块的末尾，则在 "),r("code",[e._v("catch")]),e._v(" 块之后继续执行。")]),e._v(" "),r("p",[e._v("Solidity 根据错误的类型，支持不同种类的捕获代码块：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("catch Error(string memory reason) { ... }")]),e._v(": 如果错误是由 "),r("code",[e._v('revert("reasonString")')]),e._v(" 或 "),r("code",[e._v('require(false, "reasonString")')]),e._v("（或导致这种异常的内部错误）引起的，则执行这个 catch 子句。")]),e._v(" "),r("li",[r("code",[e._v("catch Panic(uint errorCode) { ... }")]),e._v(": 如果错误是由 panic 引起的（如： "),r("code",[e._v("assert")]),e._v(" 失败，除以 0，无效的数组访问，算术溢出等），将执行这个 catch 子句。")]),e._v(" "),r("li",[r("code",[e._v("catch (bytes memory lowLevelData) { ... }")]),e._v(": 如果错误签名不符合任何其他子句，如果在解码错误信息时出现了错误，或者如果异常没有一起提供错误数据。在这种情况下，子句声明的变量提供了对低级错误数据的访问。")]),e._v(" "),r("li",[r("code",[e._v("catch { ... }")]),e._v(": 如果你对错误数据不感兴趣，你可以直接使用 "),r("code",[e._v("catch { ... }")]),e._v(" (甚至是作为唯一的 catch 子句) 而不是前面几个 catch 子句。")])]),e._v(" "),r("p",[e._v("有计划在未来支持其他类型的错误数据。 "),r("code",[e._v("Error")]),e._v(" 和 "),r("code",[e._v("Panic")]),e._v(" 字符串目前是按原样解析的，不作为标识符处理。")]),e._v(" "),r("p",[e._v("为了捕捉所有的错误情况，你至少要有子句 "),r("code",[e._v("catch { ... }")]),e._v(" 或 "),r("code",[e._v("catch (bytes memory lowLevelData) { ... }")]),e._v(".")]),e._v(" "),r("p",[e._v("在 "),r("code",[e._v("returns")]),e._v(" 和 "),r("code",[e._v("catch")]),e._v(" 子句中声明的变量只在后面的块的范围内有效。")]),e._v(" "),r("p",[r("strong",[e._v("注解")]),e._v(": 如果在 try/catch 语句内部返回的数据解码过程中发生错误，这将导致当前执行的合约出现异常，如此，它不会在 catch 子句中被捕获到。如果在 "),r("code",[e._v("catch Error(string memory reason)")]),e._v(" 的解码过程中出现错误，并且有一个低级的 catch 子句，那么这个错误就会在低级 catch 子句被捕获。")]),e._v(" "),r("p",[r("strong",[e._v("注解")]),e._v(": 如果执行到一个 catch 子句，那么外部调用的状态改变已经被回退了。如果执行到了成功块，那么外部调用的状态改变是有效的。如果状态改变已经被回退，那么要么在 catch 块中继续执行，要么是 try/catch 语句的执行本身被回退（例如由于上面提到的解码失败或由于没有提供低级别的 catch 子句时）。")]),e._v(" "),r("p",[r("strong",[e._v("注解")]),e._v(":调用失败背后的原因可能是多方面的。请不要认为错误信息是直接来自被调用的合约。错误可能发生在调用链的更深处，而被调用的合约只是转发了（冒泡）错误。\n另外，这可能是由于 out-of-gas 情况，而不是一个逻辑错误状况：调用者总是在调用中保留至少 1/64 的 gas，这样即使被调合约 gas 用完，调用方仍有一些 gas 预留（处理剩余逻辑）。")])])}),[],!1,null,null,null);r.default=a.exports}}]);