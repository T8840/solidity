(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{439:function(e,t,n){"use strict";n.r(t);var a=n(2),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_02-数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_02-数据"}},[e._v("#")]),e._v(" 02.数据")]),e._v(" "),t("p",[e._v("数据是任何编程语言的生产生活资料，离开了数据，编程语言将会变得毫无意义。但是我们并不能把所有的数据都称为一个数据，就好像我们现实生活中会分为人类，动物类，植物类等。Solidity 智能合约的含义就是一些功能和数据的集合，它们是位于以太坊区块链的特定地址上。")]),e._v(" "),t("p",[e._v("Solidity 提供了几种基本类型，并且基本类型可以用来组合出复杂类型。")]),e._v(" "),t("p",[e._v("本章目录")]),e._v(" "),t("ul",[t("li",[e._v("1️⃣ 数据与变量")]),e._v(" "),t("li",[e._v("2️⃣ 两种类型的数据")]),e._v(" "),t("li",[e._v("3️⃣ 值类型")]),e._v(" "),t("li",[e._v("4️⃣ 值类型:地址类型")]),e._v(" "),t("li",[e._v("5️⃣ 值类型:合约类型")]),e._v(" "),t("li",[e._v("6️⃣ 引用类型的额外注解:数据位置")]),e._v(" "),t("li",[e._v("7️⃣ 引用类型")]),e._v(" "),t("li",[e._v("8️⃣ 类型转换")]),e._v(" "),t("li",[e._v("9️⃣ 字面常量与基本类型的转换")]),e._v(" "),t("li",[e._v("🆗 实战 1: 同志们好增加提示")]),e._v(" "),t("li",[e._v("🆗 实战 2: ETH 钱包")]),e._v(" "),t("li",[e._v("🆗 实战 3: 多签钱包")]),e._v(" "),t("li",[e._v("#️⃣ 问答题")])]),e._v(" "),t("h2",{attrs:{id:"_1️⃣-数据与变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-数据与变量"}},[e._v("#")]),e._v(" 1️⃣ 数据与变量")]),e._v(" "),t("p",[e._v("提到数据，就不可避免的需要牵扯到变量。变量名是数据的在计算中的引用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint256 u = 123;\n")])])]),t("p",[e._v("如上是将"),t("code",[e._v("123")]),e._v("这个 "),t("code",[e._v("uint8")]),e._v("类型数据，赋值给 "),t("code",[e._v("u")]),e._v(" 这个只能赋值"),t("code",[e._v("uint256")]),e._v("类型数据的变量名（"),t("code",[e._v("uint8")]),e._v(" 可以隐式转为"),t("code",[e._v("uint256")]),e._v("）。后续我们需要使用"),t("code",[e._v("123")]),e._v("这个数据时，写 "),t("code",[e._v("u")]),e._v(" 就可以代表。")]),e._v(" "),t("p",[t("code",[e._v("uint256 u")]),e._v(" 中的 "),t("code",[e._v("uint256")]),e._v("关键字，限制了 "),t("code",[e._v("u")]),e._v(" 这个变量名只能赋值"),t("code",[e._v("uint256")]),e._v("类型数据；在其他弱类型语言中可能存在变量类型取决于数据的情况。但是 "),t("code",[e._v("Solidity")]),e._v(" 中不存在这种情况，在变量声明时必须指定变量类型。"),t("strong",[e._v("Solidity 是一种静态强类型的语言，对于常见错误，开发者可以通过编译迅速捕捉到")]),e._v("，任何的 Solidity 合约都需要"),t("strong",[e._v("编译")]),e._v("和"),t("strong",[e._v("部署")]),e._v("的阶段。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=13",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 1 节: 数据与变量")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=h5x4cZdthgE&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=13",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 1 节: 数据与变量")])])]),e._v(" "),t("h3",{attrs:{id:"_1-隐式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-隐式转换"}},[e._v("#")]),e._v(" 1.隐式转换")]),e._v(" "),t("p",[e._v("如果上面 "),t("code",[e._v("uint256 u = 123;")]),e._v(" 改为 "),t("code",[e._v('uint256 u = "Hello";')]),e._v("，将会收到错误 "),t("code",[e._v('Type literal_string "Hello" is not implicitly convertible to expected type uint256.')]),e._v("，因为这两种类型不能隐式转换的；")]),e._v(" "),t("p",[e._v("如果上面 "),t("code",[e._v("uint256 u = 123;")]),e._v(" 改为 "),t("code",[e._v("uint256 u = uint8(123);")]),e._v("，就不会有问题，因为"),t("code",[e._v("uint8")]),e._v("类型可以隐式转换为"),t("code",[e._v("uint256")]),e._v("类型。后面介绍类型转换的时候会详细的介绍。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("总结:")]),e._v(" "),t("ol",[t("li",[e._v("Solidity 是一种静态强类型的语言。")]),e._v(" "),t("li",[e._v("变量类型和需要赋值的数据类型必须必配，或者所赋值的数据可以隐式转换为变量类型。")])])])]),e._v(" "),t("h2",{attrs:{id:"_2️⃣-两种类型的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-两种类型的数据"}},[e._v("#")]),e._v(" 2️⃣ 两种类型的数据")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-2"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=14",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 2 节: 两种类型的数据")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=JKiT4L0QveI&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=14",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 1 节: 两种类型的数据")])])]),e._v(" "),t("h3",{attrs:{id:"内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),t("p",[e._v("Solidity 按照数据类型可以分为"),t("strong",[e._v("值类型")]),e._v("和"),t("strong",[e._v("引用类型")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256 public u = 123; // 无变化\n    string public welcome1 = "Hello";\n    string public welcome2 = "Hello";\n\n    function test() external returns(uint256,string memory,string memory){\n        // 修改值类型\n        uint256 x = u; // 赋值\n        x = 1; // 修改\n\n        // 修改引用类型\n        string storage hi1 =  welcome1; // 赋值\n        bytes(hi1)[0] = bytes1("2");\n\n        string memory hi2 =  welcome2; // 赋值\n        bytes(hi2)[0] = bytes1("2");\n\n        // 返回值\n        return(x,hi1,hi2);\n    }\n}\n')])])]),t("ul",[t("li",[e._v("值类型: 值类型传值时会将值拷贝一份，传递的是值本身，对其修改时并不会对原来值有影响。\n"),t("ul",[t("li",[e._v("始终按值来传递，当被用作函数参数或者用在赋值语句中时，总会进行值拷贝。")]),e._v(" "),t("li",[e._v("值类型里有两个比较特殊的类型是函数和地址（包括合约），会分为单独的部分介绍。")])])]),e._v(" "),t("li",[e._v("引用类型: 引用类型进行传递时，传递的是其指针，而引用类型进行传递时"),t("strong",[e._v("可以为值传递")]),e._v("，"),t("strong",[e._v("也可以为引用传递")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"_3️⃣-值类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-值类型"}},[e._v("#")]),e._v(" 3️⃣ 值类型")]),e._v(" "),t("ol",[t("li",[e._v("Boolean")]),e._v(" "),t("li",[e._v("Integer\n"),t("ol",[t("li",[e._v("uint")]),e._v(" "),t("li",[e._v("int")])])]),e._v(" "),t("li",[e._v("定长字节数组（固定大小字节数组）\n"),t("ol",[t("li",[t("code",[e._v("bytes1")]),e._v(" - "),t("code",[e._v("bytes32")])])])]),e._v(" "),t("li",[e._v("Enum:枚举")]),e._v(" "),t("li",[e._v("地址（Address）")]),e._v(" "),t("li",[e._v("合约类型")]),e._v(" "),t("li",[e._v("函数（Function Types）\n"),t("ol",[t("li",[e._v("比较特殊，单独开了一章说明")])])])]),e._v(" "),t("h3",{attrs:{id:"_1-boolean-布尔类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-boolean-布尔类型"}},[e._v("#")]),e._v(" 1.Boolean 布尔类型")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-3"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=15",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Boolean 布尔类型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=yZzxfnmH-Yw&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=15",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Boolean 布尔类型")])])]),e._v(" "),t("p",[e._v("布尔型使用 "),t("code",[e._v("bool")]),e._v("表示，该类型只有两个值，分别是 "),t("code",[e._v("true")]),e._v("/"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo1 {\n    bool public t = true;\n    bool public f = false;\n}\n")])])]),t("p",[e._v("布尔值除了赋值得到外，还可以通过"),t("strong",[e._v("运算符")]),e._v("的计算结果得到。")]),e._v(" "),t("h4",{attrs:{id:"⓵-支持的运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-支持的运算符"}},[e._v("#")]),e._v(" ⓵ 支持的运算符")]),e._v(" "),t("ul",[t("li",[e._v("包括："),t("code",[e._v("!")]),e._v("逻辑非，")]),e._v(" "),t("li",[t("code",[e._v("==")]),e._v("等于，"),t("code",[e._v("!=")]),e._v(" 不等于;")]),e._v(" "),t("li",[t("code",[e._v("&&")]),e._v("逻辑与，"),t("code",[e._v("||")]),e._v("逻辑或，\n"),t("ul",[t("li",[t("code",[e._v("&&")]),e._v("，"),t("code",[e._v("||")]),e._v(" 为短路运算符。")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo2 {\n    bool public a = false;\n    bool public b = !a; // 仅用于布尔值\n    bool public c = a == b;\n    bool public d = a != b;\n    bool public e = a && b;\n    bool public f = a || b;\n}\n")])])]),t("p",[e._v("运算符 "),t("code",[e._v("||")]),e._v(" 和 "),t("code",[e._v("&&")]),e._v(" 都遵循同样的短路（ short-circuiting ）规则。就是说在表达式 "),t("code",[e._v("f(x) || g(y)")]),e._v(" 中， 如果 "),t("code",[e._v("f(x)")]),e._v(" 的值为 true ，那么 "),t("code",[e._v("g(y)")]),e._v(" 就不会被执行，")]),e._v(" "),t("h4",{attrs:{id:"⓶-使用短路规则节省-gas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-使用短路规则节省-gas"}},[e._v("#")]),e._v(" ⓶ 使用短路规则节省 gas")]),e._v(" "),t("p",[e._v("借助短路规则，可以让合约少执行一些逻辑。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("||")]),e._v(" 如果第一个表达式是"),t("code",[e._v("true")]),e._v("，则第二个表达式不再执行。（因为两个表达式有一个为 true，结果就为 true，不需要计算第二个表达式就知道结果了）")]),e._v(" "),t("li",[t("code",[e._v("&&")]),e._v(" 如果第一个表达式是"),t("code",[e._v("false")]),e._v("，则第二个表达式不再执行。（两个表达式必须都为 true，结果才能 true，如果第一个为 false，不需要计算第二个表达式就知道结果了）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ncontract Demo3 {\n    // 21488 gas\n    function testA1() external pure returns (bool) {\n        uint256 a = 100 - 99;\n        uint256 b = 100 - 1;\n        if (a > 50 || b < 50) {\n            return true;\n        }\n        return false;\n    }\n\n    // 21440 gas\n    function testA2() external pure returns (bool) {\n        if ((100 - 99) > 50 || (100 - 10) < 50) {\n            return true;\n        }\n        return false;\n    }\n}\n")])])]),t("p",[t("span",{staticStyle:{color:"red"}},[e._v("本章主要介绍数据类型，后续介绍数据类型的时不再介绍操作符，会专门有一章来总结操作符。")])]),e._v(" "),t("h3",{attrs:{id:"_2-integer-整数类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-integer-整数类型"}},[e._v("#")]),e._v(" 2.Integer 整数类型")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-4"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=16",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Integer 整数类型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=_VpKWN_NdnU&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=16",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Integer 整数类型")])])]),e._v(" "),t("p",[e._v("整数类型分为有符号整型，用 int 标示；和无符号整型，用 uint 标示；")]),e._v(" "),t("p",[t("strong",[e._v("int 和 uint")]),e._v(":")]),e._v(" "),t("table",{staticClass:"docutils",attrs:{border:"1"}},[t("thead",[t("tr",[t("th",[e._v("类型")]),e._v(" "),t("th",[e._v("符号名")]),e._v(" "),t("th",[e._v("取值")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{attrs:{rowspan:"4"}},[e._v("整型")]),e._v(" "),t("td",[e._v("int8 to int256")]),e._v(" "),t("td",[e._v("8 位到 256 位的带符号整型数。")])]),e._v(" "),t("tr",[t("td",[e._v("uint8 to uint256")]),e._v(" "),t("td",[e._v("8 位到 256 位的无符号整型。")])]),e._v(" "),t("tr",[t("td",[e._v("int")]),e._v(" "),t("td",[e._v("有符号整数，int 与  int256 相同。")])]),e._v(" "),t("tr",[t("td",[e._v("uint")]),e._v(" "),t("td",[e._v("无符号整数，uint 和 uint256 是一样的。")])]),e._v(" "),t("tr",[t("td",{attrs:{rowspan:"4"}},[e._v("定长浮点型")]),e._v(" "),t("td",[e._v("fixed")]),e._v(" "),t("td",[e._v("有符号的定长浮点型")])]),e._v(" "),t("tr",[t("td",[e._v("unfixed")]),e._v(" "),t("td",[e._v("无符号的定长浮点型")])]),e._v(" "),t("tr")])]),e._v(" "),t("ul",[t("li",[e._v("int 是有符号整型，支持 int8 到 int256。")]),e._v(" "),t("li",[e._v("uint 是无符号整型，支持从 uint8 到 uint256。")]),e._v(" "),t("li",[t("code",[e._v("uint")]),e._v(" 和 "),t("code",[e._v("int")]),e._v(" 分别是 "),t("code",[e._v("uint256")]),e._v(" 和 "),t("code",[e._v("int256")]),e._v(" 的别名。")])]),e._v(" "),t("h4",{attrs:{id:"⓵-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-属性"}},[e._v("#")]),e._v(" ⓵ 属性")]),e._v(" "),t("p",[e._v("对于整型 T 有下面的全局属性可访问：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("type(T).min")]),e._v(" "),t("ul",[t("li",[e._v("获取整型 T 的最小值。")])])]),e._v(" "),t("li",[t("code",[e._v("type(T).max")]),e._v(" "),t("ul",[t("li",[e._v("获取整型 T 的最大值。")])])])]),e._v(" "),t("h4",{attrs:{id:"⓶-uint-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-uint-类型"}},[e._v("#")]),e._v(" ⓶ uint 类型")]),e._v(" "),t("p",[e._v("uint 无符号整数，只能表示非负数；"),t("code",[e._v("包括数字0")]),e._v("；其中 uint256 与 uint 相同，推荐使用 uint256；支持 int8 到 int256，后面的数字是 8 的倍数。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("uint8")]),e._v(": 最小值是 0，最大值是 "),t("code",[e._v("2**8-1")])]),e._v(" "),t("li",[t("code",[e._v("uint256")]),e._v(":最小值是 0，最大值是 "),t("code",[e._v("2**256-1")])]),e._v(" "),t("li",[e._v("可以使用 "),t("code",[e._v("type(uint8).max")]),e._v(" 获取该类型的最大值")]),e._v(" "),t("li",[e._v("可以使用 "),t("code",[e._v("type(uint8).min")]),e._v(" 获取该类型的最小值")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Data {\n    // uint\n    uint256 public u1 = 123;\n    uint8 public u8Max = type(uint8).max; // 255 => (2**8-1)\n    uint8 public u8Min = type(uint8).min; // 0\n\n    // 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    uint256 public u256Max = type(uint256).max;\n    uint256 public u256Min = type(uint256).min; // 0\n}\n")])])]),t("p",[t("strong",[e._v("通过代码获取所有 "),t("code",[e._v("uint")]),e._v(" 类型和取值范围")])]),e._v(" "),t("p",[e._v("通过合约获取具体的最大值范围，最小值类似。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Data {\n    // uint\n    uint8 public u008Max = type(uint8).max;\n    uint16 public u016Max = type(uint16).max;\n    uint24 public u024Max = type(uint24).max;\n    uint32 public u032Max = type(uint32).max;\n    uint40 public u040Max = type(uint40).max;\n    uint48 public u048Max = type(uint48).max;\n    uint56 public u056Max = type(uint56).max;\n    uint64 public u064Max = type(uint64).max;\n    uint72 public u072Max = type(uint72).max;\n    uint80 public u080Max = type(uint80).max;\n    uint88 public u088Max = type(uint88).max;\n    uint96 public u096Max = type(uint96).max;\n    uint104 public u104Max = type(uint104).max;\n    uint112 public u112Max = type(uint112).max;\n    uint120 public u120Max = type(uint120).max;\n    uint128 public u128Max = type(uint128).max;\n    uint136 public u136Max = type(uint136).max;\n    uint144 public u144Max = type(uint144).max;\n    uint152 public u152Max = type(uint152).max;\n    uint160 public u160Max = type(uint160).max;\n    uint168 public u168Max = type(uint168).max;\n    uint176 public u176Max = type(uint176).max;\n    uint184 public u184Max = type(uint184).max;\n    uint192 public u192Max = type(uint192).max;\n    uint200 public u200Max = type(uint200).max;\n    uint208 public u208Max = type(uint208).max;\n    uint216 public u216Max = type(uint216).max;\n    uint224 public u224Max = type(uint224).max;\n    uint232 public u232Max = type(uint232).max;\n    uint240 public u240Max = type(uint240).max;\n    uint248 public u248Max = type(uint248).max;\n    uint256 public u256Max = type(uint256).max;\n}\n")])])]),t("p",[e._v("所有 uint 结果如下：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("uintN")]),e._v(" "),t("th",[e._v("小")]),e._v(" "),t("th",[e._v("最大值")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("uint8")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("255")])]),e._v(" "),t("tr",[t("td",[e._v("uint16")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("65535")])]),e._v(" "),t("tr",[t("td",[e._v("uint24")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("16777215")])]),e._v(" "),t("tr",[t("td",[e._v("uint32")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("4294967295")])]),e._v(" "),t("tr",[t("td",[e._v("uint40")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("1099511627775")])]),e._v(" "),t("tr",[t("td",[e._v("uint48")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("281474976710655")])]),e._v(" "),t("tr",[t("td",[e._v("uint56")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("72057594037927935")])]),e._v(" "),t("tr",[t("td",[e._v("uint64")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("18446744073709551615")])]),e._v(" "),t("tr",[t("td",[e._v("uint72")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("4722366482869645213695")])]),e._v(" "),t("tr",[t("td",[e._v("uint80")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("1208925819614629174706175")])]),e._v(" "),t("tr",[t("td",[e._v("uint88")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("309485009821345068724781055")])]),e._v(" "),t("tr",[t("td",[e._v("uint96")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("79228162514264337593543950335")])]),e._v(" "),t("tr",[t("td",[e._v("uint104")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("20282409603651670423947251286015")])]),e._v(" "),t("tr",[t("td",[e._v("uint112")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("5192296858534827628530496329220095")])]),e._v(" "),t("tr",[t("td",[e._v("uint120")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("1329227995784915872903807060280344575")])]),e._v(" "),t("tr",[t("td",[e._v("uint128")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("340282366920938463463374607431768211455")])]),e._v(" "),t("tr",[t("td",[e._v("uint136")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("87112285931760246646623899502532662132735")])]),e._v(" "),t("tr",[t("td",[e._v("uint144")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("22300745198530623141535718272648361505980415")])]),e._v(" "),t("tr",[t("td",[e._v("uint152")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("5708990770823839524233143877797980545530986495")])]),e._v(" "),t("tr",[t("td",[e._v("uint160")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("1461501637330902918203684832716283019655932542975")])]),e._v(" "),t("tr",[t("td",[e._v("uint168")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("374144419156711147060143317175368453031918731001855")])]),e._v(" "),t("tr",[t("td",[e._v("uint176")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("95780971304118053647396689196894323976171195136475135")])]),e._v(" "),t("tr",[t("td",[e._v("uint184")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("24519928653854221733733552434404946937899825954937634815")])]),e._v(" "),t("tr",[t("td",[e._v("uint192")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("6277101735386680763835789423207666416102355444464034512895")])]),e._v(" "),t("tr",[t("td",[e._v("uint200")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("1606938044258990275541962092341162602522202993782792835301375")])]),e._v(" "),t("tr",[t("td",[e._v("uint208")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("411376139330301510538742295639337626245683966408394965837152255")])]),e._v(" "),t("tr",[t("td",[e._v("uint216")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("105312291668557186697918027683670432318895095400549111254310977535")])]),e._v(" "),t("tr",[t("td",[e._v("uint224")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("26959946667150639794667015087019630673637144422540572481103610249215")])]),e._v(" "),t("tr",[t("td",[e._v("uint232")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("6901746346790563787434755862277025452451108972170386555162524223799295")])]),e._v(" "),t("tr",[t("td",[e._v("uint240")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("1766847064778384329583297500742918515827483896875618958121606201292619775")])]),e._v(" "),t("tr",[t("td",[e._v("uint248")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("452312848583266388373324160190187140051835877600158453279131187530910662655")])]),e._v(" "),t("tr",[t("td",[e._v("uint256")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("115792089237316195423570985008687907853269984665640564039457584007913129639935")])])])]),e._v(" "),t("h4",{attrs:{id:"⓷-int-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-int-类型"}},[e._v("#")]),e._v(" ⓷ int 类型")]),e._v(" "),t("p",[e._v("int 是有符号整数，其中 int256 与 int 相同，推荐使用 int256； 8 位到 256 位的带符号整型数。8 的倍数。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("int8")]),e._v(": 最小值是 "),t("code",[e._v("-(2**8/2)")]),e._v("，最大值是 "),t("code",[e._v("(2**8/2)-1")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("int8")]),e._v(": 最小值是 "),t("code",[e._v("-128")]),e._v("，最大值是 "),t("code",[e._v("127")])])])]),e._v(" "),t("li",[t("code",[e._v("int256")]),e._v(": 最小值是 "),t("code",[e._v("-(2**256/2)")]),e._v("，最大值是 "),t("code",[e._v("(2**256/2)-1")])]),e._v(" "),t("li",[e._v("可以使用 "),t("code",[e._v("type(int8).max")]),e._v(" 获取该类型的最大值")]),e._v(" "),t("li",[e._v("可以使用 "),t("code",[e._v("type(int8).min")]),e._v(" 获取该类型的最小值")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Data {\n    // int\n    int256 public i1 = 123;\n    int256 public i2 = -123;\n    int8 public i8Max = type(int8).max; // 127 => (2**8/2)-1\n    int8 public i8Min = type(int8).min; // -128  => - 2**8/2\n    //  57896044618658097711785492504343953926634992332820282019728792003956564819967\n    int256 public i256Max = type(int256).max;\n    // -57896044618658097711785492504343953926634992332820282019728792003956564819968\n    int256 public i256Min = type(int256).min;\n}\n")])])]),t("p",[t("strong",[e._v("计算 int 的最大值和最小值")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Data {\n    int8 public i008Max = type(int8).max;\n    int16 public i016Max = type(int16).max;\n    int24 public i024Max = type(int24).max;\n    int32 public i032Max = type(int32).max;\n    int40 public i040Max = type(int40).max;\n    int48 public i048Max = type(int48).max;\n    int56 public i056Max = type(int56).max;\n    int64 public i064Max = type(int64).max;\n    int72 public i072Max = type(int72).max;\n    int80 public i080Max = type(int80).max;\n    int88 public i088Max = type(int88).max;\n    int96 public i096Max = type(int96).max;\n    int104 public i104Max = type(int104).max;\n    int112 public i112Max = type(int112).max;\n    int120 public i120Max = type(int120).max;\n    int128 public i128Max = type(int128).max;\n    int136 public i136Max = type(int136).max;\n    int144 public i144Max = type(int144).max;\n    int152 public i152Max = type(int152).max;\n    int160 public i160Max = type(int160).max;\n    int168 public i168Max = type(int168).max;\n    int176 public i176Max = type(int176).max;\n    int184 public i184Max = type(int184).max;\n    int192 public i192Max = type(int192).max;\n    int200 public i200Max = type(int200).max;\n    int208 public i208Max = type(int208).max;\n    int216 public i216Max = type(int216).max;\n    int224 public i224Max = type(int224).max;\n    int232 public i232Max = type(int232).max;\n    int240 public i240Max = type(int240).max;\n    int248 public i248Max = type(int248).max;\n    int256 public i256Max = type(int256).max;\n}\n")])])]),t("p",[e._v("所有 int 结果如下：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("intN")]),e._v(" "),t("th",[e._v("最小值")]),e._v(" "),t("th",[e._v("最大值")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("int8")]),e._v(" "),t("td",[e._v("-128")]),e._v(" "),t("td",[e._v("127")])]),e._v(" "),t("tr",[t("td",[e._v("int16")]),e._v(" "),t("td",[e._v("-32768")]),e._v(" "),t("td",[e._v("32767")])]),e._v(" "),t("tr",[t("td",[e._v("int24")]),e._v(" "),t("td",[e._v("-8388608")]),e._v(" "),t("td",[e._v("8388607")])]),e._v(" "),t("tr",[t("td",[e._v("int32")]),e._v(" "),t("td",[e._v("-2147483648")]),e._v(" "),t("td",[e._v("2147483647")])]),e._v(" "),t("tr",[t("td",[e._v("int40")]),e._v(" "),t("td",[e._v("-549755813888")]),e._v(" "),t("td",[e._v("549755813887")])]),e._v(" "),t("tr",[t("td",[e._v("int48")]),e._v(" "),t("td",[e._v("-140737488355328")]),e._v(" "),t("td",[e._v("140737488355327")])]),e._v(" "),t("tr",[t("td",[e._v("int56")]),e._v(" "),t("td",[e._v("-36028797018963968")]),e._v(" "),t("td",[e._v("36028797018963967")])]),e._v(" "),t("tr",[t("td",[e._v("int64")]),e._v(" "),t("td",[e._v("-9223372036854775808")]),e._v(" "),t("td",[e._v("9223372036854775807")])]),e._v(" "),t("tr",[t("td",[e._v("int72")]),e._v(" "),t("td",[e._v("-2361183241434822606848")]),e._v(" "),t("td",[e._v("2361183241434822606847")])]),e._v(" "),t("tr",[t("td",[e._v("int80")]),e._v(" "),t("td",[e._v("-604462909807314587353088")]),e._v(" "),t("td",[e._v("604462909807314587353087")])]),e._v(" "),t("tr",[t("td",[e._v("int88")]),e._v(" "),t("td",[e._v("-154742504910672534362390528")]),e._v(" "),t("td",[e._v("154742504910672534362390527")])]),e._v(" "),t("tr",[t("td",[e._v("int96")]),e._v(" "),t("td",[e._v("-39614081257132168796771975168")]),e._v(" "),t("td",[e._v("39614081257132168796771975167")])]),e._v(" "),t("tr",[t("td",[e._v("int104")]),e._v(" "),t("td",[e._v("-10141204801825835211973625643008")]),e._v(" "),t("td",[e._v("10141204801825835211973625643007")])]),e._v(" "),t("tr",[t("td",[e._v("int112")]),e._v(" "),t("td",[e._v("-2596148429267413814265248164610048")]),e._v(" "),t("td",[e._v("2596148429267413814265248164610047")])]),e._v(" "),t("tr",[t("td",[e._v("int120")]),e._v(" "),t("td",[e._v("-664613997892457936451903530140172288")]),e._v(" "),t("td",[e._v("664613997892457936451903530140172287")])]),e._v(" "),t("tr",[t("td",[e._v("int128")]),e._v(" "),t("td",[e._v("-170141183460469231731687303715884105728")]),e._v(" "),t("td",[e._v("170141183460469231731687303715884105727")])]),e._v(" "),t("tr",[t("td",[e._v("int136")]),e._v(" "),t("td",[e._v("-43556142965880123323311949751266331066368")]),e._v(" "),t("td",[e._v("43556142965880123323311949751266331066367")])]),e._v(" "),t("tr",[t("td",[e._v("int144")]),e._v(" "),t("td",[e._v("-11150372599265311570767859136324180752990208")]),e._v(" "),t("td",[e._v("11150372599265311570767859136324180752990207")])]),e._v(" "),t("tr",[t("td",[e._v("int152")]),e._v(" "),t("td",[e._v("-2854495385411919762116571938898990272765493248")]),e._v(" "),t("td",[e._v("2854495385411919762116571938898990272765493247")])]),e._v(" "),t("tr",[t("td",[e._v("int160")]),e._v(" "),t("td",[e._v("-730750818665451459101842416358141509827966271488")]),e._v(" "),t("td",[e._v("730750818665451459101842416358141509827966271487")])]),e._v(" "),t("tr",[t("td",[e._v("int168")]),e._v(" "),t("td",[e._v("-187072209578355573530071658587684226515959365500928")]),e._v(" "),t("td",[e._v("187072209578355573530071658587684226515959365500927")])]),e._v(" "),t("tr",[t("td",[e._v("int176")]),e._v(" "),t("td",[e._v("-47890485652059026823698344598447161988085597568237568")]),e._v(" "),t("td",[e._v("47890485652059026823698344598447161988085597568237567")])]),e._v(" "),t("tr",[t("td",[e._v("int184")]),e._v(" "),t("td",[e._v("-12259964326927110866866776217202473468949912977468817408")]),e._v(" "),t("td",[e._v("12259964326927110866866776217202473468949912977468817407")])]),e._v(" "),t("tr",[t("td",[e._v("int192")]),e._v(" "),t("td",[e._v("-3138550867693340381917894711603833208051177722232017256448")]),e._v(" "),t("td",[e._v("3138550867693340381917894711603833208051177722232017256447")])]),e._v(" "),t("tr",[t("td",[e._v("int200")]),e._v(" "),t("td",[e._v("-803469022129495137770981046170581301261101496891396417650688")]),e._v(" "),t("td",[e._v("803469022129495137770981046170581301261101496891396417650687")])]),e._v(" "),t("tr",[t("td",[e._v("int208")]),e._v(" "),t("td",[e._v("-205688069665150755269371147819668813122841983204197482918576128")]),e._v(" "),t("td",[e._v("205688069665150755269371147819668813122841983204197482918576127")])]),e._v(" "),t("tr",[t("td",[e._v("int216")]),e._v(" "),t("td",[e._v("-52656145834278593348959013841835216159447547700274555627155488768")]),e._v(" "),t("td",[e._v("52656145834278593348959013841835216159447547700274555627155488767")])]),e._v(" "),t("tr",[t("td",[e._v("int224")]),e._v(" "),t("td",[e._v("-13479973333575319897333507543509815336818572211270286240551805124608")]),e._v(" "),t("td",[e._v("13479973333575319897333507543509815336818572211270286240551805124607")])]),e._v(" "),t("tr",[t("td",[e._v("int232")]),e._v(" "),t("td",[e._v("-3450873173395281893717377931138512726225554486085193277581262111899648")]),e._v(" "),t("td",[e._v("3450873173395281893717377931138512726225554486085193277581262111899647")])]),e._v(" "),t("tr",[t("td",[e._v("int240")]),e._v(" "),t("td",[e._v("-883423532389192164791648750371459257913741948437809479060803100646309888")]),e._v(" "),t("td",[e._v("883423532389192164791648750371459257913741948437809479060803100646309887")])]),e._v(" "),t("tr",[t("td",[e._v("int248")]),e._v(" "),t("td",[e._v("-226156424291633194186662080095093570025917938800079226639565593765455331328")]),e._v(" "),t("td",[e._v("226156424291633194186662080095093570025917938800079226639565593765455331327")])]),e._v(" "),t("tr",[t("td",[e._v("int256")]),e._v(" "),t("td",[e._v("-57896044618658097711785492504343953926634992332820282019728792003956564819968")]),e._v(" "),t("td",[e._v("57896044618658097711785492504343953926634992332820282019728792003956564819967")])])])]),e._v(" "),t("p",[t("strong",[e._v("问题")]),e._v(": 为什么 "),t("code",[e._v("uint8/int8")]),e._v("至 "),t("code",[e._v("uint256/uint256")]),e._v(" 都是以 8 的倍数递增，且最大值是 256。\n1 字节是 8 位，所以后面 8,16,都需要是 8 的整数倍，int8 是 8 位。EVM 为地址设置的最大长度是 256 位，所以最大值是"),t("code",[e._v("uint256/uint256")]),e._v("。")]),e._v(" "),t("p",[e._v("计算中最小一级的信息单位是 byte 和 bit: "),t("strong",[e._v("其中字节(Byte)为最小存储容量单位")]),e._v("，"),t("strong",[e._v("位(bit)是最小储存信息的单位,也被称为最小的数据传输单位")]),e._v("；一个位就代表一个 0 或 1（即二进制）；每 8 个 bit(简写为 b）组成一个字节 Byte（简写为 B）；所以 "),t("code",[e._v("uint256")]),e._v(" 和 "),t("code",[e._v("bytes32")]),e._v(" 可以转换")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytes1 对应 uint8")])]),e._v(" "),t("li",[t("code",[e._v("bytes2 对应 uint16")])]),e._v(" "),t("li",[e._v("...")]),e._v(" "),t("li",[t("code",[e._v("bytes32 对应 uint256")])])]),e._v(" "),t("p",[t("strong",[e._v("问题")]),e._v(": 为什么 int8 的取值范围是-128~127 呢？为什么 "),t("code",[e._v("uint256")]),e._v(" 的最大值是 "),t("code",[e._v("2**256 -1")]),e._v("，而不是 "),t("code",[e._v("2**256")]),e._v(" 呢？")]),e._v(" "),t("p",[e._v("1 字节是 8 位，int8 是 8 位，二进制表示为"),t("code",[e._v("0000 0000")]),e._v("至"),t("code",[e._v("1000 0000")]),e._v("，第一位是符号位;第一位为 0 是正值，第一位为 1 是负值；因为 int8 总共能够表示 2 的 8 次方，所以带符号的正值为 128 个数，负值为 128 个数；")]),e._v(" "),t("p",[e._v("计算机里是将 0 算在正值内，负值的范围还是-128；但是 "),t("strong",[e._v("0 不是正数也不是负数")]),e._v("，所以正值范围少了一个位置，就剩 127 个位置了。")]),e._v(" "),t("p",[t("strong",[e._v("问题")]),e._v(": 字节 & bit & 十六进制数字关系")]),e._v(" "),t("ul",[t("li",[e._v("bytes1 是指 1 个字节，1 个字节可以表示成 2 个连续的 16 进制数字。最大值是 "),t("code",[e._v("0xff")])]),e._v(" "),t("li",[e._v("bytes1 是指 1 个字节，1 个字节可以表示成 8 个连续的 bit 数字。最大值是 "),t("code",[e._v("11111111")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytes1")]),e._v(" 等于两位连续的十六进制数字 "),t("code",[e._v("0xXX")])])])]),e._v(" "),t("li",[e._v("8 个 bit 最大值是 "),t("code",[e._v("11111111")]),e._v(",8 个 bit 对应 2 个连续的十六进制数字，最大是 "),t("code",[e._v("0xff")]),e._v(";\n"),t("ul",[t("li",[t("code",[e._v("uint8")]),e._v(" 等于两位连续的十六进制数字 "),t("code",[e._v("0xXX")])])])])]),e._v(" "),t("h4",{attrs:{id:"⓸-checked-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-checked-模式"}},[e._v("#")]),e._v(" ⓸ checked 模式")]),e._v(" "),t("p",[e._v("⚠️: 在 Solidity 之前的版本中，当对无限制整数执行算术运算，其结果超出结果类型的范围，这是就发生了上溢出或下溢出。在 Solidity 0.8.0 之前，算术运算总是会在发生溢出的情况下进行“截断”，而不是抛出异常。这就会导致一些麻烦的事情，可能导致未知的错误，所以我们不得不靠引入额外检查库来解决这个问题（最常见的如 OpenZepplin 的 SafeMath）")]),e._v(" "),t("p",[e._v("而从 "),t("code",[e._v("Solidity 0.8.0")]),e._v(" 开始，所有的算术运算默认就会进行溢出检查，额外引入库将不再必要。0.8.0 开始，算术运算有两种计算模式：一种是"),t("code",[e._v("checked")]),e._v("（检查）模式，另一种是 "),t("code",[e._v("unchecked")]),e._v("（不检查）模式。")]),e._v(" "),t("p",[e._v("默认情况下，算术运算在 "),t("code",[e._v("checked")]),e._v(" 模式下，即都会进行溢出检查，如果结果落在取值范围之外，调用会通过 失败异常 回退。")]),e._v(" "),t("p",[e._v("你也可以通过 "),t("code",[e._v("unchecked{ ... }")]),e._v(" 切换到 “unchecked”模式，更多可参考 "),t("code",[e._v("unchecked")]),e._v(" .")]),e._v(" "),t("h4",{attrs:{id:"⓹-unchecked-非检查模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-unchecked-非检查模式"}},[e._v("#")]),e._v(" ⓹ unchecked 非检查模式")]),e._v(" "),t("p",[e._v("如果依然想要之前“截断”的效果，而不是抛出异常错误，那么可以使用 "),t("code",[e._v("unchecked{}")]),e._v(" 代码块：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public a = type(uint256).max;\n    uint8 public b = 1;\n\n    function f1() public view returns (uint256) {\n        // 减法溢出会返回“截断”的结果\n        unchecked {\n            return a + b;\n        }\n    }\n\n    function f2() public view returns (uint256) {\n        unchecked {\n            return a + 2;\n        }\n    }\n\n    function g() public view returns (uint256) {\n        // 溢出会抛出异常\n        return a + b;\n    }\n}\n")])])]),t("p",[e._v("调用 "),t("code",[e._v("g()")]),e._v(" 会触发失败异常， 调用 "),t("code",[e._v("f1()/f2()")]),e._v(" 分别是截断效果,")]),e._v(" "),t("p",[e._v("⚠️: "),t("code",[e._v("unchecked")]),e._v(" 代码块可以在代码块中的任何位置使用，但不可以替代整个函数代码块，同样不可以嵌套。切此设置仅影响语法上位于 "),t("code",[e._v("unchecked")]),e._v(" 块内的语句。 在块中调用的函数不会此影响。")]),e._v(" "),t("p",[e._v("⚠️: 为避免歧义，不能在 unchecked 块中使用 "),t("code",[e._v("_;")]),e._v(", 该表示方法仅用于函数修改器。")]),e._v(" "),t("h5",{attrs:{id:"触发溢出检查的运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发溢出检查的运算符"}},[e._v("#")]),e._v(" 触发溢出检查的运算符")]),e._v(" "),t("p",[e._v("下面的这个运算操作符会进行溢出检查，如果上溢出或下溢会触发失败异常。 如果在非检查模式代码块中使用，将不会出现错误:")]),e._v(" "),t("p",[t("code",[e._v("++")]),e._v(", "),t("code",[e._v("--")]),e._v(", "),t("code",[e._v("+")]),e._v(", "),t("code",[e._v("减 -")]),e._v(", "),t("code",[e._v("负 -")]),e._v(", "),t("code",[e._v("*")]),e._v(", "),t("code",[e._v("/")]),e._v(", "),t("code",[e._v("%")]),e._v(", "),t("code",[e._v("**")])]),e._v(" "),t("p",[t("code",[e._v("+=")]),e._v(","),t("code",[e._v("-=")]),e._v(", "),t("code",[e._v("*=")]),e._v(", "),t("code",[e._v("/=")]),e._v(", "),t("code",[e._v("%=")])]),e._v(" "),t("h5",{attrs:{id:"除-0-或除-0取模"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#除-0-或除-0取模"}},[e._v("#")]),e._v(" 除 "),t("code",[e._v("0")]),e._v("（或"),t("code",[e._v("除 0取模")]),e._v("）")]),e._v(" "),t("p",[t("strong",[e._v("⚠️ 警告")]),e._v(": 除 "),t("code",[e._v("0")]),e._v("（或"),t("code",[e._v("除 0取模")]),e._v("）的异常是不能被 "),t("code",[e._v("unchecked")]),e._v(" 忽略的。会发生 "),t("code",[e._v("Panic")]),e._v(" 错误。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public a = type(uint256).max;\n\n    function f1() public view returns (uint256) {\n        unchecked {\n            return a / 0;\n        }\n    }\n\n    function f2() public view returns (uint256) {\n        unchecked {\n            return a % 0;\n        }\n    }\n}\n")])])]),t("h5",{attrs:{id:"位运算不会执行上溢或下溢检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算不会执行上溢或下溢检查"}},[e._v("#")]),e._v(" 位运算不会执行上溢或下溢检查")]),e._v(" "),t("p",[t("strong",[e._v("⚠️ 注解")]),e._v(": 位运算不会执行上溢或下溢检查。 这在使用位移位("),t("code",[e._v("<<")]),e._v(", "),t("code",[e._v(">>")]),e._v(", "),t("code",[e._v("<<=")]),e._v(", "),t("code",[e._v(">>=")]),e._v(")来代替整数除法和 2 指数时尤其明显。 例如 "),t("code",[e._v("type(uint256).max << 3")]),e._v(" 不会回退，而 "),t("code",[e._v("type(uint256).max + 1")]),e._v(" 会失败回退。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public a = type(uint256).max;\n    uint8 public b = 1;\n\n    function g1() public view returns (uint256) {\n        return a + b;\n    }\n\n    function g2() public view returns (uint256) {\n        return a << 3;\n    }\n}\n")])])]),t("h5",{attrs:{id:"int-值需要注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int-值需要注意"}},[e._v("#")]),e._v(" -int 值需要注意")]),e._v(" "),t("p",[t("strong",[e._v("注解")]),e._v(" "),t("code",[e._v("int x = type(int).min; -x;")]),e._v(" 中的第 2 句会溢出，因为负数的范围比正整数的范围大 1。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    int256 x = type(int256).min;\n    int256 y = -1;\n\n    function fn1() public view returns (int256) {\n        unchecked {\n            return -x;\n        }\n    }\n\n    // 溢出\n    function fn2() public view returns (int256) {\n        return -x;\n    }\n\n    function fn3() public view returns (int256) {\n        return -y;\n    }\n}\n")])])]),t("p",[e._v("显式类型转换将始终截断并且不会导致失败的断言，但是从整数到枚举类型的转换例外。")]),e._v(" "),t("h5",{attrs:{id:"显式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显式类型转换"}},[e._v("#")]),e._v(" 显式类型转换")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public a = type(uint256).max;\n    uint8 public b = uint8(a);\n}\n")])])]),t("h3",{attrs:{id:"_3-integer-整数字面常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-integer-整数字面常量"}},[e._v("#")]),e._v(" 3.Integer 整数字面常量")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-5"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=17",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 整数字面常量")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=5MiIZaaBbnU&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=17",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 整数字面常量")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-整数字面常量中用-增加可读性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-整数字面常量中用-增加可读性"}},[e._v("#")]),e._v(" ⓵ 整数字面常量中用"),t("code",[e._v("_")]),e._v("增加可读性")]),e._v(" "),t("p",[e._v("为了提高可读性可以在数字之间加上下划线。 例如，十进制 "),t("code",[e._v("123_000")]),e._v("，十六进制 "),t("code",[e._v("0x2eff_abde")]),e._v("，科学十进制表示 "),t("code",[e._v("1_2e12")]),e._v(" 都是有效的。")]),e._v(" "),t("p",[e._v("需要注意以下几点：")]),e._v(" "),t("ul",[t("li",[e._v("下划线仅允许在两位数之间，并且不允许下划线连续出现。")]),e._v(" "),t("li",[e._v("添加到数字文字中下划线没有额外的语义，仅仅只是为了可读性.")]),e._v(" "),t("li",[e._v("下划线会被编译器忽略。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo{\n    uint public count1 = 123_456_789; // 23503 gas\n    uint public count2 = 123_456_789; // 23493 gas\n    uint public count3 = 123456789; // 23537 gas\n    int public count4 = -123456789; // 23559 gas\n    int public count5 = -123_456_789; // 23471 gas\n}\n")])])]),t("p",[e._v("通过测试发现，带有"),t("code",[e._v("_")]),e._v("数字的变量，读取时候花费 gas 更少")]),e._v(" "),t("h4",{attrs:{id:"⓶-字面常量支持任意精度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-字面常量支持任意精度"}},[e._v("#")]),e._v(" ⓶ 字面常量支持任意精度")]),e._v(" "),t("p",[e._v("数值字面常量表达式本身支持任意精度，直到被转换成了非常量类型（例如，在常量变量表达式之外有运算，或发生了显示转换）。 这意味着在数值常量表达式中, 计算不会溢出而除法也不会截断。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint8 public a = (2**800 + 1) - 2**800;\n    uint8 public b = 0.5 * 8;\n}\n")])])]),t("p",[t("code",[e._v("(2**800 + 1) - 2**800")]),e._v(" 的结果是字面常量 1 （属于 uint8 类型），尽管计算的中间结果已经超过了 以太坊虚拟机的机器字长度。 此外， "),t("code",[e._v(".5 * 8")]),e._v(" 的结果是整型 "),t("code",[e._v("4")]),e._v(" （尽管有非整型参与了计算）。")]),e._v(" "),t("p",[e._v("⚠️: 数 值字面常量表达式只要在非字面常量表达式中使用就会转换成非字面常量类型。 在下面的例子中，尽管我们知道 b 的值是一个整数，但 "),t("code",[e._v("2.5 + a")]),e._v(" 这部分表达式并不进行类型检查，因此编译不能通过。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint128 a = 1;\nuint128 b = 2.5 + a + 0.5;\n")])])]),t("h4",{attrs:{id:"⓷-除法截断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-除法截断"}},[e._v("#")]),e._v(" ⓷ 除法截断")]),e._v(" "),t("p",[e._v("注意除法截断: 在智能合约中，在 字面常量 会保留精度（保留小数位）。")]),e._v(" "),t("p",[e._v("整数的除法会被截断（例如："),t("code",[e._v("1/4")]),e._v(" 结果为 0）,但是使用字面量的方式不会被截断")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract IntegerTest {\n    function test1() public pure returns (uint256, uint256) {\n        uint256 a = 1;\n        uint256 b = 4;\n        uint256 c1 = (1 / 4) * 4; // 1 => 未截断\n        uint256 c2 = (a / b) * b; // 0 => 截断\n        return (c1, c2);\n    }\n\n    function test2() public pure returns (int256, int256) {\n        int256 a = -1;\n        int256 b = -4;\n        int256 c1 = (-1 / -4) * (-4); // -1 => 未截断\n        int256 c2 = (a / b) * b; // 0 => 截断\n        return (c1, c2);\n    }\n}\n")])])]),t("p",[e._v("注释: 表达式 "),t("code",[e._v("type(int).min / (-1)")]),e._v(" 是仅有的整除会发生向上溢出的情况。 在算术检查模式下，这会触发一个失败异常，在截断模式下，表达式的值将是 "),t("code",[e._v("type(int).min")]),e._v(" 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function test1() public pure returns (int256 a) {\n        a = type(int256).min / (-2);\n    }\n\n    // VM error: revert.\n    function test2() public pure returns (int256 a) {\n        a = type(int256).min / (-1);\n    }\n\n    function test3() public pure returns (int256 a) {\n        unchecked {\n            a = type(int256).min / (-1);\n        }\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓸-优先使用较小类型计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-优先使用较小类型计算"}},[e._v("#")]),e._v(" ⓸ 优先使用较小类型计算")]),e._v(" "),t("p",[e._v("虽然大多数运算符在字面常量运算时都会产生一个字面常量表达式，但有一些运算符并不遵循这种模式：")]),e._v(" "),t("ul",[t("li",[e._v("三元运算符 "),t("code",[e._v("(... ? ... : ...)")]),e._v(",")]),e._v(" "),t("li",[e._v("数组下标访问 ("),t("code",[e._v("<array>[<index>]")]),e._v(").")])]),e._v(" "),t("p",[e._v("你可能认为像"),t("code",[e._v("255 + (true ? 1 : 0)")]),e._v(" 或 "),t("code",[e._v("255 + [1, 2, 3][0]")]),e._v(" 这样的表达式等同于直接使用 256 字面常量。 但事实上，它们是在 "),t("code",[e._v("uint8")]),e._v(" 类型中计算的，会溢出。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    // VM error: revert.\n    function testA1() public pure returns (uint256 a) {\n        a = 255 + (true ? 1 : 0);\n    }\n\n    function testA2() public pure returns (uint256 a) {\n        a = (true ? 1 : 0) + 255;\n    }\n\n    // VM error: revert.\n    function testB1() public pure returns (uint256 a) {\n        a = 255 + [1, 2, 3][0];\n    }\n\n    function testB2() public pure returns (uint256 a) {\n        a = [1, 2, 3][0] + 255;\n    }\n\n    function testA3() public pure returns (uint256 a) {\n        a = 255 + uint256(true ? 1 : 0);\n    }\n\n    function testB3() public pure returns (uint256 a) {\n        a = 255 + uint256([1, 2, 3][0]);\n    }\n}\n")])])]),t("h3",{attrs:{id:"_4-fixed-定长浮点型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-fixed-定长浮点型"}},[e._v("#")]),e._v(" 4.Fixed 定长浮点型")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-6"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=18",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Fixed 定长浮点型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=7fHyXGcd72E&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=18",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Fixed 定长浮点型")])])]),e._v(" "),t("p",[e._v("Solidity 还没有完全支持定长浮点型。")]),e._v(" "),t("p",[e._v("可以声明定长浮点型的变量，但不能给它们赋值或把它们赋值给其他变量。。")]),e._v(" "),t("p",[e._v("可以通过用户定义的值类型的 wrap / unwrap 来模拟出来，后面介绍用户自定义类型时候会介绍。")]),e._v(" "),t("p",[t("code",[e._v("fixed / ufixed")]),e._v("：表示各种大小的有符号和无符号的定长浮点型。 在关键字 "),t("code",[e._v("ufixedMxN")]),e._v(" 和 "),t("code",[e._v("fixedMxN")]),e._v(" 中，"),t("code",[e._v("M")]),e._v(" 表示该类型占用的位数，"),t("code",[e._v("N")]),e._v(" 表示可用的小数位数。 "),t("code",[e._v("M")]),e._v(" 必须能整除 8，即 8 到 256 位。 "),t("code",[e._v("N")]),e._v(" 则可以是从 0 到 80 之间的任意数。")]),e._v(" "),t("h3",{attrs:{id:"_5-bytesn-定长字节数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-bytesn-定长字节数组"}},[e._v("#")]),e._v(" 5.BytesN 定长字节数组")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-7"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=19",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: BytesN 定长字节数组")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=8QqoVA-nnlY&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=19",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: BytesN 定长字节数组")])])]),e._v(" "),t("p",[e._v("定义方式 "),t("code",[e._v("bytesN")]),e._v("，其中 N 可取 "),t("code",[e._v("1~32")]),e._v(" 中的任意整数;")]),e._v(" "),t("p",[e._v("bytes1 代表只能存储一个字节。")]),e._v(" "),t("ul",[t("li",[e._v("⚠️ 注意：一旦声明，其内部的字节长度不可修改，内部字节不可修改。")]),e._v(" "),t("li",[e._v("⚠️ 注意："),t("code",[e._v("bytes32")]),e._v(" 和 "),t("code",[e._v("bytes")]),e._v(" 是不同的。\n"),t("ul",[t("li",[t("code",[e._v("bytesN")]),e._v(": 是定长的字节数组，是值类型")]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(": 是变长字节数组，是引用类型。")])])])]),e._v(" "),t("h4",{attrs:{id:"⓵-普通赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-普通赋值"}},[e._v("#")]),e._v(" ⓵ 普通赋值")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    // 固定长度的字节数组\n    bytes1 public a1 = 0x61;\n    bytes2 public a2 = 0x6100;\n    bytes4 public a3 = 0x61000000;\n    bytes6 public a4 = 0x416e62616e67;\n    bytes7 public a5 = 0x416e62616e6700;\n    bytes8 public a6 = 0x416e62616e670000;\n    bytes16 public a7 = 0x416e62616e6700000000000000000000;\n    bytes32 public a8 =\n        0x416e62616e670000000000000000000000000000000000000000000000000000;\n}\n")])])]),t("p",[e._v("注意这里 "),t("code",[e._v("bytes32")]),e._v(" 和 "),t("code",[e._v("bytes")]),e._v(" 是不同的。"),t("code",[e._v("bytes")]),e._v(" 是变长字节数组，是引用类型。")]),e._v(" "),t("h4",{attrs:{id:"⓶-使用字符串赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-使用字符串赋值"}},[e._v("#")]),e._v(" ⓶ 使用字符串赋值")]),e._v(" "),t("p",[e._v("警告:字符串字面常量在赋值给 bytesN 时被解释为原始的字节形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    bytes1 public b1 = "a";\n    bytes2 public b2 = "a";\n    bytes4 public b3 = "a";\n    bytes6 public b4 = "Anbang";\n    bytes7 public b5 = "Anbang";\n    bytes8 public b6 = "Anbang";\n    bytes16 public b7 = "Anbang";\n    bytes32 public b8 = "Anbang";\n}\n')])])]),t("h4",{attrs:{id:"⓷-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-属性"}},[e._v("#")]),e._v(" ⓷ 属性")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("length")]),e._v(" （只读）\n"),t("ul",[t("li",[e._v("返回字节个数，可以通过索引读取对应索引的字节。")])])]),e._v(" "),t("li",[e._v("索引访问: "),t("code",[e._v("bytesN[index]")]),e._v(" "),t("ul",[t("li",[e._v("index 取值范围"),t("code",[e._v("[0, N]")]),e._v("，其中 N 表示长度。")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("x")]),e._v(" 是 "),t("code",[e._v("bytesI")]),e._v(" 类型，那么 "),t("code",[e._v("x[k]")]),e._v(" （其中 0 <= k < I）返回第 k 个字节（只读）。")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    // 固定长度的字节数组\n    bytes1 public a1 = 0x61;\n    bytes2 public a2 = 0x6100;\n\n    // length\n    uint256 public n1 = a1.length;\n    uint256 public n2 = a2.length;\n\n    // 索引\n    function getIndex(uint8 index_) public view returns(bytes1){\n        return a2[index_];\n    }\n\n    // 不修可以修改\n    // function setIndex(uint8 index_,bytes1 value_) public view{\n    //     a2[index_] = value_;\n    // }\n}\n")])])]),t("h3",{attrs:{id:"_6-字符串字面常量及类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-字符串字面常量及类型"}},[e._v("#")]),e._v(" 6.字符串字面常量及类型")]),e._v(" "),t("p",[e._v("字符串字面常量只能包含可打印的 ASCII 字符，这意味着他是介于 0x20 和 0x7E 之间的字符。")]),e._v(" "),t("p",[e._v("字符串字面常量是指由双引号或单引号引起来的字符串（ "),t("code",[e._v('"foo"')]),e._v(" 或者 "),t("code",[e._v("'bar'")]),e._v("）;")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-8"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=20",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 字符串字面常量及类型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=MZIxm2NeHV8&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=20",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 字符串字面常量及类型")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-字符串字面量是值类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-字符串字面量是值类型"}},[e._v("#")]),e._v(" ⓵ 字符串字面量是值类型")]),e._v(" "),t("p",[e._v("转换: 和整数字面常量一样，字符串字面常量的类型也可以发生改变，它们可以隐式地转换成"),t("code",[e._v("bytes1")]),e._v("，……， "),t("code",[e._v("bytes32")]),e._v("，如果合适的话，还可以转换成 "),t("code",[e._v("bytes")]),e._v(" 以及 "),t("code",[e._v("string")]),e._v("。")]),e._v(" "),t("p",[e._v("比如 "),t("code",[e._v('bytes1 public a8 = "a";')]),e._v(" 和 "),t("code",[e._v('bytes2 public b2 = "a";')]),e._v("。字符串字面常量在赋值给 "),t("code",[e._v("bytesN")]),e._v(" 时被解释为"),t("strong",[e._v("原始的字节形式")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    bytes1 public b1 = "a";\n    string public b2 = "a";\n}\n')])])]),t("h4",{attrs:{id:"⓶-转义字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-转义字符"}},[e._v("#")]),e._v(" ⓶ 转义字符")]),e._v(" "),t("p",[e._v("但是我们写特殊字符串时候遇到一个问题，比如我想输出一个 "),t("code",[e._v('fo"o')]),e._v("和"),t("code",[e._v("fo'o")]),e._v(" 的字符串就很难弄，因为莫认为"),t("code",[e._v('"')]),e._v("和"),t("code",[e._v("'")]),e._v(" 是字符串的结尾。如果想要输出这种特殊的字符串，就需要转义字符了。")]),e._v(" "),t("p",[e._v("此外，字符串字面常量支持下面的转义字符：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("\\'")]),e._v(" (单引号)")]),e._v(" "),t("li",[t("code",[e._v('\\"')]),e._v(" (双引号)")]),e._v(" "),t("li",[t("code",[e._v("\\\\")]),e._v(" (反斜杠)")]),e._v(" "),t("li",[t("code",[e._v("\\<newline>")]),e._v(" (转义实际换行)")]),e._v(" "),t("li",[t("code",[e._v("\\b")]),e._v(" (退格)")]),e._v(" "),t("li",[t("code",[e._v("\\f")]),e._v(" (换页)")]),e._v(" "),t("li",[t("code",[e._v("\\n")]),e._v(" (换行符)")]),e._v(" "),t("li",[t("code",[e._v("\\r")]),e._v(" (回车)")]),e._v(" "),t("li",[t("code",[e._v("\\t")]),e._v(" (标签 tab)")]),e._v(" "),t("li",[t("code",[e._v("\\v")]),e._v(" (垂直标签)")]),e._v(" "),t("li",[t("code",[e._v("\\xNN")]),e._v(" (十六进制转义，见下文)")]),e._v(" "),t("li",[t("code",[e._v("\\uNNNN")]),e._v(" (unicode 转义，见下文)")])]),e._v(" "),t("p",[t("code",[e._v("\\xNN")]),e._v(" 表示一个 16 进制值，最终转换成合适的字节，而 "),t("code",[e._v("\\uNNNN")]),e._v(" 表示 Unicode 编码值，最终会转换为 UTF-8 的序列。")]),e._v(" "),t("p",[e._v("问答题:下面字符串长度为多少字节？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    string public a1 = "\\n\\"\'\\\\abc\\\ndef";\n    bytes32 public a2 = "\\n\\"\'\\\\abc\\\ndef";\n}\n')])])]),t("p",[e._v("字符串长度为十个字节，它以换行符开头，后跟双引号，单引号，反斜杠字符，以及（没有分隔符）字符序列 "),t("code",[e._v("\"'\\abcdef")]),e._v(" 。")]),e._v(" "),t("h4",{attrs:{id:"⓷-用空格分开的字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-用空格分开的字符串"}},[e._v("#")]),e._v(" ⓷ 用空格分开的字符串")]),e._v(" "),t("p",[e._v("用空格分开的 "),t("code",[e._v('"foo" "bar"')]),e._v(" 等效于 "),t("code",[e._v('"foobar"')]),e._v(",")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    string public a = "a" "b";\n}\n')])])]),t("h3",{attrs:{id:"_7-unicode-字面常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-unicode-字面常量"}},[e._v("#")]),e._v(" 7.Unicode 字面常量")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-9"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=21",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Unicode 字面常量")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=TXLpJPK3ZiU&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=21",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Unicode 字面常量")])])]),e._v(" "),t("p",[e._v("常规字符串文字只能包含 ASCII，而 Unicode 文字（以关键字 unicode 为前缀）可以包含任何有效的 UTF-8 序列。 它们还支持与转义序列完全相同的字符作为常规字符串文字。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    string  public a = unicode"同志们好";\n}\n')])])]),t("h3",{attrs:{id:"_8-十六进制字面常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-十六进制字面常量"}},[e._v("#")]),e._v(" 8.十六进制字面常量")]),e._v(" "),t("p",[e._v("十六进制字面常量以关键字 "),t("code",[e._v("hex")]),e._v(" 打头，后面紧跟着用单引号或双引号引起来的字符串（例如，"),t("code",[e._v('hex"001122FF"')]),e._v(" ）。 字符串的内容必须是一个十六进制的字符串，它们的值将使用二进制表示。")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-10"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=22",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 十六进制字面常量")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=kGhNA01b9AI&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=22",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 十六进制字面常量")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-基本用法"}},[e._v("#")]),e._v(" ⓵ 基本用法")]),e._v(" "),t("p",[e._v("它们的内容必须是十六进制数字，可以选择使用单个下划线作为字节边界分隔符。 "),t("strong",[e._v("字面常量的值将是十六进制序列的二进制表示形式")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    string public a1 = "a";\n    bytes1 public a2 = "a";\n    bytes1 public a3 = 0x61;\n    bytes1 public a4 = hex"61";\n}\n')])])]),t("h4",{attrs:{id:"⓶-用空格分开的十六进制字面常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-用空格分开的十六进制字面常量"}},[e._v("#")]),e._v(" ⓶ 用空格分开的十六进制字面常量")]),e._v(" "),t("p",[e._v("用空格分隔的多个十六进制字面常量被合并为一个字面常量： "),t("code",[e._v('hex"61" hex"61"')]),e._v(" 等同于 "),t("code",[e._v('hex"6161"')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    bytes2 public a = hex"61" hex"61";\n}\n')])])]),t("p",[e._v("十六进制字面常量跟 字符串字面常量 很类似，具有相同的转换规则")]),e._v(" "),t("h3",{attrs:{id:"_9-enum-枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-enum-枚举"}},[e._v("#")]),e._v(" 9.Enum:枚举")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-11"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=23",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Enum:枚举")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=mwU1Os9kjkQ&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=23",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: Enum:枚举")])])]),e._v(" "),t("p",[t("code",[e._v("enum")]),e._v(" 是一种用户自定义类型，用于表示多种状态，枚举可用来创建由一定数量的“常量值”构成的自定义类型。主要作用是用于限制某个事务的有限选择。比如将咖啡的容量大小限制为：大、中、小，这将确保任何人不能购买其他容量的咖啡，只能在这里选择。")]),e._v(" "),t("p",[e._v("枚举默认值是第一个成员，所以枚举类型至少需要一个成员，枚举不能多于 256 个成员。枚举默认的类型为 "),t("code",[e._v("uint8")]),e._v("，当枚举数足够多时，它会自动变成 "),t("code",[e._v("uint16")]),e._v("..等变大。可以通过 remix 部署后，函数的输入值内查看类型 "),t("code",[e._v("uint8")]),e._v(" / "),t("code",[e._v("uint16")])]),e._v(" "),t("ul",[t("li",[e._v("枚举类型，返回值是索引，默认值是 0;")]),e._v(" "),t("li",[e._v("枚举类型的默认值是第一个值。\n"),t("ul",[t("li",[e._v("枚举类型 enum 至少应该有一名成员。")])])]),e._v(" "),t("li",[e._v("设置的时候，可以设置为索引，也可以对应的枚举名称;")]),e._v(" "),t("li",[e._v("枚举类型 enum 可以与整数进行显式转换，但不能进行隐式转换。\n"),t("ul",[t("li",[e._v("显示转换会在运行时检查数值范围，如果不匹配，将会引起异常。")])])])]),e._v(" "),t("p",[t("strong",[e._v("例子")]),e._v(":考虑一个限制，将交易的状态限制为："),t("code",[e._v("None")]),e._v("/"),t("code",[e._v("Pending")]),e._v("/"),t("code",[e._v("Shiped")]),e._v("/"),t("code",[e._v("Completed")]),e._v("/"),t("code",[e._v("Rejected")]),e._v("/"),t("code",[e._v("Canceled")]),e._v(" 这几种。这将确保交易状态仅在列出的状态内。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Enum {\n    // 枚举类型的默认值是第一个值。\n    // 结构\n    enum Status {\n        None, // 0\n        Pending, // 1\n        Shiped,// 2\n        Completed,\n        Rejected,\n        Canceled\n    }\n    // 变量\n    Status public status;\n\n    // 设置索引值\n    function set(Status _status) external {\n        status = _status;\n    }\n\n    // 由于枚举类型不属于 |ABI| 的一部分，因此对于所有来自 Solidity 外部的调用，\n    // "getStatus" 的签名会自动被改成 "getStatus() returns (uint8)"。\n    function getStatus() public view returns (Status) {\n        return status;\n    }\n\n    function getDefaultStatus() public view returns (uint256) {\n        return uint256(status);\n    }\n\n    // 设置\n    function ship() external {\n        status = Status.Shiped;\n    }\n\n    // 恢复为0\n    function reset() external {\n        delete status;\n    }\n}\n')])])]),t("p",[e._v("很多人感觉 enum 很少用，一是因为应用场景确实比较窄，二是因为可以被其他数据类型所代替；但按照编码规范，限制选择范围场景，除了 bool 以外的，推荐使用 enum 类型来定义。")]),e._v(" "),t("p",[e._v("枚举是显示所有整型相互转换，但不允许隐式转换。从整型显式转换枚举，会在运行时检查整数时候在枚举范围内，否则会导致异常（ Panic 异常 ）。")]),e._v(" "),t("p",[e._v("枚举还可以在合约或库定义之外的文件级别上声明。")]),e._v(" "),t("h4",{attrs:{id:"⓵-属性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-属性-2"}},[e._v("#")]),e._v(" ⓵ 属性")]),e._v(" "),t("p",[e._v("数据表示与：选项从"),t("code",[e._v("0")]),e._v("开始的无符号整数值表示。")]),e._v(" "),t("h4",{attrs:{id:"⓶-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-方法"}},[e._v("#")]),e._v(" ⓶ 方法")]),e._v(" "),t("ul",[t("li",[e._v("delete")]),e._v(" "),t("li",[t("code",[e._v("type(NameOfEnum).min")])]),e._v(" "),t("li",[t("code",[e._v("type(NameOfEnum).max")])])]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("type(NameOfEnum).min")]),e._v(" 和 "),t("code",[e._v("type(NameOfEnum).max")]),e._v(" 你可以得到给定枚举的最小值和最大值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Enum {\n    // 枚举类型的默认值是第一个值。\n    enum Status {\n        None,//0\n        Pending,//1\n        Shiped,//2\n        Completed,//3\n        Rejected,//4\n        Canceled// 5\n    }\n\n    function getLargestValue() public pure returns (Status) {\n        return type(Status).max;\n    }\n\n    function getSmallestValue() public pure returns (Status) {\n        return type(Status).min;\n    }\n}\n")])])]),t("h3",{attrs:{id:"_10-用户定义的值类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-用户定义的值类型"}},[e._v("#")]),e._v(" 10.用户定义的值类型")]),e._v(" "),t("p",[e._v("Solidity 允许在一个基本的值类型上创建一个零成本的抽象。这类似于一个别名，但有更严格的类型要求。")]),e._v(" "),t("p",[e._v("用户定义值类型使用 "),t("code",[e._v("type UserType is DefaultType")]),e._v(" 来定义。")]),e._v(" "),t("p",[e._v("其中 "),t("code",[e._v("UserType")]),e._v(" 是新引入的类型的名称， "),t("code",[e._v("DefaultType")]),e._v(" 必须是内置的值类型（”底层类型”）。自定义类型的值的数据表示则继承自底层类型，并且 ABI 中也使用底层类型。")]),e._v(" "),t("p",[e._v("⚠️: 用户定义的类型 "),t("code",[e._v("UserType")]),e._v(" 没有任何运算符或绑定成员函数。即使是操作符 "),t("code",[e._v("==")]),e._v(" 也没有定义。也不允许与其他类型进行显式和隐式转换。")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-12"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=24",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 用户定义的值类型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=FTVsYfNaDqg&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=24",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 3 节值类型: 用户定义的值类型")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-方法"}},[e._v("#")]),e._v(" ⓵ 方法")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("UserType.wrap()")]),e._v(": 用来从底层类型转换到自定义类型")]),e._v(" "),t("li",[t("code",[e._v("UserType.unwrap()")]),e._v(": 从自定义类型转换到底层类型。")])]),e._v(" "),t("h4",{attrs:{id:"⓶-例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-例子"}},[e._v("#")]),e._v(" ⓶ 例子")]),e._v(" "),t("p",[e._v("案例：一个 18 位小数、256 bit 的浮点类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 使用用户定义的值类型表示 18 位小数、256 bit的浮点类型。\ntype UFixed256x18 is uint256;\n\n/// 在 UFixed256x18 上进行浮点操作的精简库。\nlibrary FixedMath {\n    uint constant multiplier = 10**18;\n\n    /// 两个 UFixed256x18 数相加，\n    /// 溢出时恢复，依赖于 uint256 上的检查算术\n     function add(UFixed256x18 a, UFixed256x18 b) internal pure returns (UFixed256x18) {\n        return UFixed256x18.wrap(UFixed256x18.unwrap(a) + UFixed256x18.unwrap(b));\n    }\n    /// 将 UFixed256x18 和 uint256 相乘.\n    /// 溢出时恢复，依赖于 uint256 上的检查算术\n     function mul(UFixed256x18 a, uint256 b) internal pure returns (UFixed256x18) {\n        return UFixed256x18.wrap(UFixed256x18.unwrap(a) * b);\n    }\n    ///  UFixed256x18 向下取整.\n    /// @return 不超过 `a` 的最大整数。\n    function floor(UFixed256x18 a) internal pure returns (uint256) {\n        return UFixed256x18.unwrap(a) / multiplier;\n    }\n    /// 将 uint256 转换为相同值的 UFixed256x18。\n    /// 如果整数太大，则还原。\n    function toUFixed256x18(uint256 a) internal pure returns (UFixed256x18) {\n        return UFixed256x18.wrap(a * multiplier);\n    }\n}\ncontract Test {\n    uint256 a = 1;\n    uint256 b = 2;\n\n    function testAdd() external view returns (UFixed256x18) {\n        return FixedMath.add(FixedMath.toUFixed256x18(a), FixedMath.toUFixed256x18(b));\n    }\n    function testMul() external view returns (UFixed256x18) {\n        return FixedMath.mul(FixedMath.toUFixed256x18(a),b);\n    }\n}\n")])])]),t("p",[e._v("注意 "),t("code",[e._v("UFixed256x18.wrap")]),e._v(" 和 "),t("code",[e._v("FixedMath.toUFixed256x18")]),e._v(" 的签名相同，但执行的是两个完全不同的操作：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("UFixed256x18.wrap")]),e._v(" 函数返回一个与输入的数据表示相同的自定义值类型（"),t("code",[e._v("UFixed256x18")]),e._v("）。")]),e._v(" "),t("li",[t("code",[e._v("FixedMath.toUFixed256x18")]),e._v("则返回一个具有相同数值的 "),t("code",[e._v("UFixed256x18")]),e._v(" 。")])]),e._v(" "),t("h2",{attrs:{id:"_4️⃣-值类型-地址类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-值类型-地址类型"}},[e._v("#")]),e._v(" 4️⃣ 值类型:地址类型")]),e._v(" "),t("p",[e._v("地址分为外部地址和合约地址，每个地址都有"),t("strong",[e._v("一块持久化内存区")]),e._v("称为存储。")]),e._v(" "),t("p",[e._v("地址类型也是值类型，因为比较特殊，所以单独拿出来讲。地址类型是 Solidity 语言独有的数据类型，表示以太坊的地址类型。用 address 表示地址，长度是 20 个字节；我们日常使用的是十六进制的地址格式，比如: "),t("code",[e._v("0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac")]),e._v("；这种类型适合存储合约地址或外部地址。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-13"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=25",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 4 节: 地址类型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=HH1Ft6AwgzE&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=25",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 4 节: 地址类型")])]),e._v(" "),t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=26",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 4 节: 地址类型 code 属性补充")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=3w1f8Gc16rk&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=26",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 4 节: 地址类型 code 属性补充")])])]),e._v(" "),t("h3",{attrs:{id:"_1-地址字面常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-地址字面常量"}},[e._v("#")]),e._v(" 1.地址字面常量")]),e._v(" "),t("p",[e._v("通常的地址类型是 "),t("code",[e._v("0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac")]),e._v(" 这样的 "),t("a",{attrs:{href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("checksum address"),t("OutboundLink")],1),e._v("，。 而没有通过校验测试, 长度在 39 到 41 个数字之间的十六进制字面常量，会产生一个错误, 比如 "),t("code",[e._v("0XFFD0D80C48F6C3C5387B7CFA7AA03970BDB926AC")]),e._v(" 就是一个错误 address 类型。会提示正确的地址，也可以将地址输入到 "),t("a",{attrs:{href:"https://cn.etherscan.com/address/0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926AC",target:"_blank",rel:"noopener noreferrer"}},[e._v("etherscan"),t("OutboundLink")],1),e._v(" 获取。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    // This looks like an address but has an invalid checksum.\n    // Correct checksummed address: \"0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac\".\n    // If this is not used as an address, please prepend '00'.\n    // For more information please see\n    // https://docs.soliditylang.org/en/develop/types.html#address-literals\n    // address public a1 = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926AC;\n\n    // 直接在提示种获取到正确的 checksummed address，\n    // 也可以在 etherscan 种得到 checksum 地址。\n    address public a2 = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac;\n}\n")])])]),t("p",[e._v("如果不怕麻烦，还可以通过 SDK 来自己转换 "),t("a",{attrs:{href:"https://web3js.readthedocs.io/en/v1.8.0/web3-utils.html#tochecksumaddress",target:"_blank",rel:"noopener noreferrer"}},[e._v("web3.utils.toChecksumAddress(address)"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"_2-address-uint-bytes32-之间的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-address-uint-bytes32-之间的转换"}},[e._v("#")]),e._v(" 2.address/uint/bytes32 之间的转换")]),e._v(" "),t("ul",[t("li",[e._v("1 字节 8 位，一个 address 是 20 个字节，是 160 位，所以 "),t("strong",[e._v("address 可以用 uint160 表示")]),e._v("。")]),e._v(" "),t("li",[e._v("1 字节可以表示为两个连续的十六进制数字，所以 "),t("strong",[e._v("address 可以用连续的 40 个十六进制数字表示")]),e._v("。")]),e._v(" "),t("li",[e._v("address 不允许任何算数操作")]),e._v(" "),t("li",[t("code",[e._v("address")]),e._v(" 允许和 "),t("code",[e._v("uint160")]),e._v("、 "),t("code",[e._v("整型字面常量")]),e._v("、"),t("code",[e._v("bytes20")]),e._v(" 及"),t("code",[e._v("合约类型")]),e._v("相互转换。\n"),t("ul",[t("li",[e._v("如果将使用较大字节数组类型转换为 "),t("code",[e._v("address")]),e._v(" ，例如 "),t("code",[e._v("bytes32")]),e._v(" ，那么 "),t("code",[e._v("address")]),e._v(" 将被截断。")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    bytes32 public a =\n        0x111122223333444455556666777788889999AAAABBBBCCCCDDDDEEEEFFFFCCCC;\n\n    // 0x111122223333444455556666777788889999aAaa\n    address public b = address(uint160(bytes20(a)));\n\n    // 0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc\n    address public c = address(uint160(uint256(a)));\n}\n")])])]),t("p",[e._v("⚠️：为了减少转换歧义，我们在转换中显式截断处理。 以 32bytes 值 "),t("code",[e._v("0x111122223333444455556666777788889999AAAABBBBCCCCDDDDEEEEFFFFCCCC")]),e._v(" 为例， 如果使用 "),t("code",[e._v("address(uint160(bytes20(b)))")]),e._v(" 结果是 "),t("code",[e._v("0x111122223333444455556666777788889999aAaa")]),e._v("， 而使用 "),t("code",[e._v("address(uint160(uint256(b)))")]),e._v(" 结果是 "),t("code",[e._v("0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc")]),e._v(" 。")]),e._v(" "),t("p",[e._v("注意，网上很多在线转换工具得到的结果并不正确，比如: "),t("a",{attrs:{href:"https://tool.oschina.net/hexconvert/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://tool.oschina.net/hexconvert/"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("如下例子进行真实转换："),t("code",[e._v("_owner")]),e._v(" 在一些在线的软件内转换的不正确，上面的网址有个小 BUG，输入十六进制数据的时候，不能带 "),t("code",[e._v("0x")]),e._v(" 前缀。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract test {\n    address _owner; // 十六进制\n    uint160 _ownerUint; // 十进制\n\n    constructor() {\n        _owner = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac;\n        _ownerUint = 1460450021995508802976443037013257463744970696364;\n    }\n\n    function toUint160() public view returns (uint160) {\n        //转换10进制\n        return uint160(_owner);\n    }\n\n    function toAddress() public view returns (address) {\n        return address(_ownerUint);\n    }\n}\n")])])]),t("p",[e._v("注意: 这里说的地址是 "),t("code",[e._v("0x123...")]),e._v(" 这种十六进制的地址公钥，而不是应用层的 "),t("code",[e._v("anbang.eth")]),e._v(" 这种 ENS 地址。虽然在很多钱包可以通过"),t("code",[e._v("anbang.eth")]),e._v("来向"),t("code",[e._v("0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac")]),e._v("转账，但仅仅是应用层的中转服务。具体可以在 "),t("a",{attrs:{href:"https://etherscan.io/enslookup-search?search=anbang.eth",target:"_blank",rel:"noopener noreferrer"}},[e._v("以太坊浏览器"),t("OutboundLink")],1),e._v(",或者钱包内输入 ENS 域名查看中转逻辑.（ENS 是一种别名，除了在以太坊网络可以使用，在 imToken 等钱包内，在 BTC 网络也可以使用，它并不是区块链的底层，而是应用层）")]),e._v(" "),t("h3",{attrs:{id:"_3-两种形式的地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-两种形式的地址"}},[e._v("#")]),e._v(" 3.两种形式的地址")]),e._v(" "),t("p",[e._v("在第一章接收 ETH 那一节的三个关键字里，也介绍了 payable，这里再次讲一下加深印象。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("address")]),e._v("：保存一个 20 字节的值（以太坊地址的大小）。")]),e._v(" "),t("li",[t("code",[e._v("address payable")]),e._v(" ：可支付地址，与 "),t("code",[e._v("address")]),e._v(" 相同，不过有成员函数 "),t("code",[e._v("transfer")]),e._v(" 和 "),t("code",[e._v("send")]),e._v(" 。")])]),e._v(" "),t("p",[e._v("如果你需要 "),t("code",[e._v("address")]),e._v(" 类型的变量，并计划发送以太币给这个地址，那么声明类型为 "),t("code",[e._v("address payable")]),e._v(" 可以明确表达出你的需求。 同样，尽量更早对他们进行区分或转换。")]),e._v(" "),t("p",[e._v("这种区别背后的思想是 "),t("code",[e._v("address payable")]),e._v(" 可以向其发送以太币，而不能向一个普通的 "),t("code",[e._v("address")]),e._v(" 发送以太币。比如，它可能是一个智能合约地址，并且不支持接收以太币。")]),e._v(" "),t("h4",{attrs:{id:"⓵-两种形式的地址转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-两种形式的地址转换"}},[e._v("#")]),e._v(" ⓵ 两种形式的地址转换")]),e._v(" "),t("p",[e._v("允许从 "),t("code",[e._v("address payable")]),e._v(" 到 "),t("code",[e._v("address")]),e._v(" 的隐式转换，而从 "),t("code",[e._v("address")]),e._v(" 到 "),t("code",[e._v("address payable")]),e._v(" 必须显示的 通过 "),t("code",[e._v("payable(<address>)")]),e._v(" 进行转换。也只能通过 "),t("code",[e._v("payable(...)")]),e._v(" 表达式把 "),t("code",[e._v("address")]),e._v(" 类型和合约类型转换为 "),t("code",[e._v("address payable")]),e._v("。")]),e._v(" "),t("p",[e._v("在介绍地址 payable 方法时候会具体介绍，转换的时候注意下面两个点：")]),e._v(" "),t("ol",[t("li",[e._v("只有能接收以太币的合约类型，才能够进行此转换。\n"),t("ol",[t("li",[e._v("例如合约要么有 receive 或可支付的回退函数。")])])]),e._v(" "),t("li",[t("code",[e._v("payable(0)")]),e._v(" 是有效的，这是此规则的例外。")])]),e._v(" "),t("h3",{attrs:{id:"_4-地址属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-地址属性"}},[e._v("#")]),e._v(" 4.地址属性")]),e._v(" "),t("p",[e._v("address 拥有如下属性；")]),e._v(" "),t("ol",[t("li",[t("p",[e._v(".balance : 以 Wei 为单位的余额。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.balance    returns(uint256)\n")])])])]),e._v(" "),t("li",[t("p",[e._v(".code : 地址上的代码(可以为空)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.code        returns(bytes memory)\n")])])])]),e._v(" "),t("li",[t("p",[e._v(".codehash : 地址的 codehash")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.codehash    returns(bytes32)\n")])])])])]),e._v(" "),t("h4",{attrs:{id:"⓵-balance-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-balance-属性"}},[e._v("#")]),e._v(" ⓵ balance 属性")]),e._v(" "),t("p",[e._v("获取地址的余额，wei 单位。如下例子是获取指定地址的 ETH 余额，和当前调用者的余额。（基于当前使用的网络）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function getBalance1(address addr) public view returns (uint256) {\n        return addr.balance;\n    }\n    function getBalance2() external view returns (uint256) {\n        return address(msg.sender).balance;\n    }\n}\n")])])]),t("p",[e._v("函数内一般不像上面那么用，更多的是获取合约本身的 ETH 余额;")]),e._v(" "),t("p",[t("strong",[e._v("如何获取合约地址?")]),e._v(":合约部署后，会有一个合约地址; "),t("strong",[e._v("所有合约都可以转换为 address 类型")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function returnContractAddress() external view returns (address) {\n        return address(this);\n    }\n}\n")])])]),t("p",[e._v("因此可以使用 "),t("code",[e._v("address(this).balance")]),e._v(" 查询当前合约的余额，获取合约本身的 ETH 余额如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n    receive() external payable {}\n}\n")])])]),t("p",[e._v("⚠️: 在版本 0.5.0 之前，Solidity 允许通过合约实例来访问地址的成员，例如 "),t("code",[e._v("this.balance")]),e._v(" ，不过现在禁止这样做，必须显式转换为地址后访问，如： "),t("code",[e._v("address(this).balance")]),e._v(" 。")]),e._v(" "),t("h4",{attrs:{id:"⓶-code-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-code-属性"}},[e._v("#")]),e._v(" ⓶ code 属性")]),e._v(" "),t("p",[e._v("可以查询任何智能合约的部署代码。使用 "),t("code",[e._v(".code")]),e._v(" 来获取 EVM 的字节码，其返回 "),t("code",[e._v("bytes memory")]),e._v(" ，值可能是空。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function getCode() public view returns (bytes memory) {\n        return address(this).code;\n    }\n\n    // 外部地址 code 内容是空，\n    // 可以通过这个来判断地址是否为合约\n    function getAdsCode(address a_) public view returns (bytes memory) {\n        return address(a_).code;\n    }\n}\n")])])]),t("p",[e._v("注意:合约没有完全创建，也就是 constructor 没有完全执行完的时候，code 也是空。")]),e._v(" "),t("p",[e._v("下面是发糖果的合约，只允许用户的地址领取，禁止合约地址。结果被合约地址薅羊毛了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 发糖果的合约\ncontract A {\n    uint256 giftValue = 666;\n    mapping(address=>uint256) public gifts;\n\n    function gift() public returns(uint256){\n        bytes memory senderCode = getCode(msg.sender);\n        require(senderCode.length==0,unicode"只能用户领取，薅羊毛的合约滚！！！");\n        gifts[msg.sender] = giftValue;\n        return giftValue;\n    }\n\n    function getCode(address ads_) public view returns(bytes memory){\n        return address(ads_).code;\n    }\n}\n\n// 薅羊毛的合约\ncontract Test {\n    A a;\n    uint256 public target; // 保存薅羊毛得到的糖果\n    constructor(address ads_){\n        target = A(ads_).gift();\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓷-codehash-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-codehash-属性"}},[e._v("#")]),e._v(" ⓷ codehash 属性")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v(".codehash")]),e._v(" 获得合约代码的 "),t("code",[e._v("Keccak-256 哈希值")]),e._v(" (为 bytes32 )。")]),e._v(" "),t("p",[e._v("注意， "),t("code",[e._v("addr.codehash")]),e._v(" 比使用 "),t("code",[e._v("keccak256(addr.code)")]),e._v(" 更便宜。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function getCode() public view returns (bytes memory) {\n        return address(this).code;\n    }\n\n    function getCodeByKeccak256() public view returns (bytes32) {\n        return keccak256(address(this).code);\n    }\n\n    function getCodehash() public view returns (bytes32) {\n        return address(this).codehash;\n    }\n}\n")])])]),t("h3",{attrs:{id:"_5-地址方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-地址方法"}},[e._v("#")]),e._v(" 5.地址方法")]),e._v(" "),t("p",[e._v("address 拥有如下方法；")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("address()")]),e._v(": 可以将地址转换到地址类型。")]),e._v(" "),t("li",[t("code",[e._v("payable()")]),e._v(": 将普通地址转为可支付地址。")]),e._v(" "),t("li",[t("code",[e._v(".transfer(uint256 amount)")]),e._v(": 将余额转到当前地址（合约地址转账）")]),e._v(" "),t("li",[t("code",[e._v(".send(uint256 amount)")]),e._v(": 将余额转到当前地址，并"),t("strong",[e._v("返回交易成功状态")]),e._v("（合约地址转账）")]),e._v(" "),t("li",[t("code",[e._v(".call(bytes memory)")]),e._v(": 用给定的有效载荷（payload）发出低级 "),t("code",[e._v("CALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）")]),e._v(" "),t("li",[t("code",[e._v(".delegatecall(bytes memory)")]),e._v(": 用给定的有效载荷（payload）发出低级 "),t("code",[e._v("DELEGATECALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）")]),e._v(" "),t("li",[t("code",[e._v("staticcall(bytes memory)")]),e._v(": 用给定的有效载荷（payload）发出低级 "),t("code",[e._v("STATICCALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）")])]),e._v(" "),t("h4",{attrs:{id:"⓵-address"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-address"}},[e._v("#")]),e._v(" ⓵ address()")]),e._v(" "),t("p",[t("strong",[e._v("1.获取当前合约地址")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Address {\n    mapping(address => uint256) public balances; // 用在 mapping 结构内\n\n    // 存款\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function getAddress() external view returns (address) {\n        return address(this);\n    }\n\n    function getBalance1() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getBalance2() external view returns (uint256) {\n        return address(msg.sender).balance;\n    }\n}\n")])])]),t("p",[t("strong",[e._v("2.uint 值转换成地址")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function getAddress()\n        external\n        pure\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address\n        )\n    {\n        return (address(0), address(1), address(3), address(6), address(9));\n    }\n}\n")])])]),t("p",[e._v("返回结果如下:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("0: address: 0x0000000000000000000000000000000000000000\n1: address: 0x0000000000000000000000000000000000000001\n2: address: 0x0000000000000000000000000000000000000003\n3: address: 0x0000000000000000000000000000000000000006\n4: address: 0x0000000000000000000000000000000000000009\n")])])]),t("p",[t("strong",[e._v("3.获取即将部署的地址")])]),e._v(" "),t("p",[e._v("这是 "),t("em",[e._v("uint 值转换成地址")]),e._v(" 的一种应用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // 获取即将部署的地址\n    function getAddress(bytes memory bytecode, uint256 _salt)\n        external\n        view\n        returns (address)\n    {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff), // 固定字符串\n                address(this), // 当前工厂合约地址\n                _salt, // salt\n                keccak256(bytecode) //部署合约的 bytecode\n            )\n        );\n        return address(uint160(uint256(hash)));\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓶-payable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-payable"}},[e._v("#")]),e._v(" ⓶ payable()")]),e._v(" "),t("p",[e._v("注意：支付的时候，地址必须 "),t("code",[e._v("payable")]),e._v(" 类型！从 "),t("code",[e._v("address")]),e._v(" 到 "),t("code",[e._v("address payable")]),e._v(" 的转换。可以通过 "),t("code",[e._v("payable(x)")]),e._v(" 进行 ，其中 "),t("code",[e._v("x")]),e._v(" 必须是 "),t("code",[e._v("address")]),e._v(" 类型。")]),e._v(" "),t("p",[e._v("让普通地址为 payable 有两种方式")]),e._v(" "),t("ul",[t("li",[e._v("方式一: 参数中 地址标注 address payable ,并且函数状态可变性标为 "),t("code",[e._v("payable")]),e._v(";\n"),t("ul",[t("li",[e._v("这种更省 gas ("),t("strong",[e._v("推荐")]),e._v(")")])])]),e._v(" "),t("li",[e._v("方式二: 仅在内部进行 "),t("code",[e._v("payable(address)")]),e._v(" 显示转换")])]),e._v(" "),t("h5",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[e._v("#")]),e._v(" 例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Payable {\n    address payable public owner;\n\n    constructor() {\n        // 直接赋值会报错,因为 msg.sender 不是 payable 类型的地址。\n        // Type address is not implicitly convertible to expected type address payable.\n        // owner = msg.sender;\n\n        // 使用 payable 函数，显示转换一下就可以了。\n        owner = payable(msg.sender);\n    }\n\n    // deposit1 没有 payable 标示；如果传入ETH币，会报错\n    // transact to Payable.deposit1 errored: VM error: revert.\n    function deposit1() external {}\n\n    // deposit2 有 payable， 所以可以发送ETH到合约\n    function deposit2() external payable {}\n\n    function getBalance() external view returns (uint256) {\n        // 使用 address(this) 就可以包装当前合约，然后就可以使用 .balance 获取余额了。\n        return address(this).balance;\n    }\n}\n")])])]),t("p",[t("strong",[e._v("注意点")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("如果状态变量是 "),t("code",[e._v("payable")]),e._v(" 类型，赋值的时候需要使用 "),t("code",[e._v("payable()")]),e._v(" 进行显示转换")]),e._v(" "),t("li",[e._v("如果函数没有 "),t("code",[e._v("payable")]),e._v(" 标示，那么调用时候不能发送网络主币。\n"),t("ul",[t("li",[e._v("如果尝试这么做会收到错误: "),t("code",[e._v("transact to Payable.functionName errored: VM error: revert.")])])])])]),e._v(" "),t("h5",{attrs:{id:"转换-0-地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换-0-地址"}},[e._v("#")]),e._v(" 转换 0 地址")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function getAddress()\n        external\n        pure\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address\n        )\n    {\n        return (address(0), address(1), address(3), address(6), address(999));\n    }\n\n    function getPayaableAddress() external pure returns (address) {\n        // Explicit type conversion not allowed from "int_const 1" to "address payable".\n        // return payable(1);\n        return payable(0);\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓷-transfer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-transfer"}},[e._v("#")]),e._v(" ⓷ transfer()")]),e._v(" "),t("p",[e._v("将余额转到当前地址（合约地址转账）,语法如下:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address payable>.transfer(uint256 amount)\n")])])]),t("ol",[t("li",[e._v("需要 payable address")]),e._v(" "),t("li",[e._v("使用固定（不可调节）的 2300 gas 的矿工费，错误会 reverts （回滚所有状态）\n"),t("ol",[t("li",[e._v("2300 gas 足够转账，但是如果接收合约内的 "),t("code",[e._v("fallback")]),e._v(" 和 "),t("code",[e._v("receive")]),e._v(" 函数有恶意代码，复杂代码。容易导致 gas 耗尽的错误。")])])]),e._v(" "),t("li",[e._v("失败时抛出异常,\n"),t("ol",[t("li",[e._v("如果当前合约的余额不够多，则 "),t("code",[e._v("transfer")]),e._v(" 函数会执行失败，或者如果以太转移被接收帐户拒绝， "),t("code",[e._v("transfer")]),e._v(" 函数同样会失败而进行回退。")])])]),e._v(" "),t("li",[e._v("如果目标地址是一个合约，那么目标合约内部的 receive/fallback 函数会随着调用 "),t("code",[e._v("transfer")]),e._v("函数一起执行，这是 EVM 的特性，没办法阻止。")])]),e._v(" "),t("p",[e._v("例子演示:")]),e._v(" "),t("p",[e._v("核心: "),t("code",[e._v("_to.transfer(200);")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract SendEth {\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    fallback() external payable {\n        emit Log("fallback", msg.sender, msg.value, msg.data);\n    }\n\n    receive() external payable {\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // transfer :  地址必须为   payable 类型\n    // 方式一: 参数中 地址标注 address payable ,并且函数标注 payable; 这种更省 gas\n    // 28767 gas\n    function transfer1(address payable _to) external payable {\n        _to.transfer(100);\n    }\n\n    // 也可以 在内部进行显示转换\n    // 方式二: 仅在内部进行 payable(address) 显示转换\n    // 28813 gas\n    function transfer2(address _to) external {\n        payable(_to).transfer(200);\n    }\n}\n\n')])])]),t("h4",{attrs:{id:"⓸-send"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-send"}},[e._v("#")]),e._v(" ⓸ send()")]),e._v(" "),t("p",[e._v("将余额转到当前地址，并"),t("strong",[e._v("返回交易成功状态")]),e._v("（合约地址转账）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address payable>.send(uint256 amount) returns (bool)\n")])])]),t("p",[t("code",[e._v("send")]),e._v(" 是 "),t("code",[e._v("transfer")]),e._v(" 的低级版本。如果执行失败，当前的合约不会因为异常而终止。"),t("code",[e._v("transfer")]),e._v(" 等价于"),t("code",[e._v("require(send())")])]),e._v(" "),t("ol",[t("li",[e._v("需要 payable address")]),e._v(" "),t("li",[e._v("使用固定（不可调节）的 2300 gas 的矿工费。\n"),t("ol",[t("li",[e._v("gas 同"),t("code",[e._v("transfer")]),e._v("一样的是 2300 gas ；足够转账，但是如果接收合约内的 "),t("code",[e._v("fallback")]),e._v(" 和 "),t("code",[e._v("receive")]),e._v(" 函数有恶意代码，复杂代码。容易导致 gas 耗尽的错误。")])])]),e._v(" "),t("li",[e._v("失败时仅会返回 "),t("code",[e._v("false")]),e._v("，不会终止执行（合约地址转账）;\n"),t("ol",[t("li",[t("code",[e._v("send()")]),e._v(" 执行有一些风险：为了保证安全，必须检查 send 的返回值，如果交易失败，会回退以太币。")])])]),e._v(" "),t("li",[e._v("补充：send 与 transfer 对应，但 "),t("strong",[e._v("send 更底层")]),e._v("。如果执行失败，transfer 不会因异常停止，而 send 会返回 false。transfer 相对 send 较安全")])]),e._v(" "),t("p",[e._v("例子演示:")]),e._v(" "),t("p",[e._v("核心: "),t("code",[e._v("bool success = _to.send(100);")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract SendEth {\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    fallback() external payable {\n        emit Log("fallback", msg.sender, msg.value, msg.data);\n    }\n\n    receive() external payable {\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // 28791 gas\n    function send1(address payable _to) external payable {\n        bool success = _to.send(100);\n        require(success, "Send Faied");\n    }\n\n    // 28793 gas\n    function send2(address _to) external {\n        bool success = payable(_to).send(100);\n        require(success, "Send Faied");\n    }\n}\n')])])]),t("p",[t("code",[e._v(".transfer(uint256 amount)")]),e._v(" 失败时抛出异常, 等价于"),t("code",[e._v("require(send())")]),e._v(" 使用固定（不可调节）的 2300 gas 的矿工费，错误会 reverts.")]),e._v(" "),t("h4",{attrs:{id:"⓹-call-delegatecall-staticcall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-call-delegatecall-staticcall"}},[e._v("#")]),e._v(" ⓹ call/delegatecall/staticcall")]),e._v(" "),t("p",[e._v("为了与不知道 ABI 的合约进行交互，Solidity 提供了函数 "),t("code",[e._v("call")]),e._v("/"),t("code",[e._v("delegatecall")]),e._v("/"),t("code",[e._v("staticcall")]),e._v(" 直接控制编码。它们都带有一个 "),t("code",[e._v("bytes memory")]),e._v(" 参数和返回执行"),t("strong",[e._v("成功状态")]),e._v("（bool）和"),t("strong",[e._v("数据")]),e._v("（bytes memory）。")]),e._v(" "),t("p",[e._v("函数 "),t("code",[e._v("abi.encode")]),e._v("，"),t("code",[e._v("abi.encodePacked")]),e._v("，"),t("code",[e._v("abi.encodeWithSelector")]),e._v(" 和 "),t("code",[e._v("abi.encodeWithSignature")]),e._v(" 可用于编码结构化数据。")]),e._v(" "),t("p",[t("strong",[e._v("它们可以接受任意类型，任意数量的参数")]),e._v("。这些参数会被打包到以 32 字节为单位的连续区域中存放。其中一个"),t("strong",[e._v("例外是当第一个参数被编码成正好 4 个字节的情况")]),e._v("。 在这种情况下，这个参数后边不会填充后续参数编码，以允许使用函数签名。")]),e._v(" "),t("p",[e._v("下面具体的介绍三种 call。")]),e._v(" "),t("h4",{attrs:{id:"⓺-call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓺-call"}},[e._v("#")]),e._v(" ⓺ call()")]),e._v(" "),t("p",[e._v("用给定的有效载荷（payload）发出低级 "),t("code",[e._v("CALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）, 格式如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.call(bytes memory) returns (bool, bytes memory)\n")])])]),t("ol",[t("li",[e._v("低级 "),t("code",[e._v("CALL")]),e._v(" 调用：不需要 payable address, 普通地址即可\n"),t("ol",[t("li",[e._v("注意: 调用 "),t("code",[e._v("call")]),e._v(" 的时候，地址可以不具备 payable 属性")])])]),e._v(" "),t("li",[e._v("返回两个参数，一个 "),t("code",[e._v("bool")]),e._v(" 值代表成功或者失败，另外一个是可能存在的 "),t("code",[e._v("data")])]),e._v(" "),t("li",[e._v("发送所有可用 gas，也可以自己调节 gas。\n"),t("ol",[t("li",[e._v("如果 "),t("code",[e._v("fallback")]),e._v(" 和 "),t("code",[e._v("receive")]),e._v(" 内的代码相对复杂也可以，但是如果是恶意代码，需要考虑消耗的 gas 是否值得执行。")]),e._v(" "),t("li",[t("code",[e._v("_ads.call{value: msg.value,gas:2300}(data)")])])])]),e._v(" "),t("li",[e._v("当合约调用合约时，不知道对方源码和 ABI 时候，可以使用 call 调用对方合约")]),e._v(" "),t("li",[e._v("推荐使用 call 转账 ETH，但是不推荐使用 call 来调用其他合约。\n"),t("ol",[t("li",[e._v("原因是: call 调用的时候，将合约控制权交给对方，如果碰到恶意代码，或者不安全的代码就很容易凉凉。")])])]),e._v(" "),t("li",[e._v("当调用不存在的合约方法时候，会触发对方合约内的 "),t("code",[e._v("fallback")]),e._v(" 或者 "),t("code",[e._v("receive")]),e._v("。\n"),t("ol",[t("li",[e._v("我们的合约也可以在 "),t("code",[e._v("fallback")]),e._v(" / "),t("code",[e._v("receive")]),e._v(" 这两个方法内抛出事件，查看是否有人对其做了什么操作。")])])]),e._v(" "),t("li",[e._v("三种方法都提供 "),t("code",[e._v("gas")]),e._v(" 选项，而 "),t("code",[e._v("value")]),e._v(" 选项仅 "),t("code",[e._v("call")]),e._v(" 支持 。三种 call 里只有 "),t("code",[e._v("call")]),e._v(" 可以进行 ETH 转账，其他两种不可以进行转账。")])]),e._v(" "),t("p",[t("strong",[e._v("例子 1:发送 ETH")])]),e._v(" "),t("p",[e._v("核心: "),t("code",[e._v('(bool success, ) = _to.call{value: 100}("");')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract SendEth {\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    fallback() external payable {\n        emit Log("fallback", msg.sender, msg.value, msg.data);\n    }\n\n    receive() external payable {\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // 29005\n    function call1(address payable _to) external payable {\n        (bool success, bytes memory data) = _to.call{value: 100}("");\n        require(success, "call Faied");\n    }\n\n    // 29007\n    function call2(address _to) external {\n        (bool success, bytes memory data) = payable(_to).call{value: 100}("");\n        require(success, "call Faied");\n    }\n}\n')])])]),t("p",[t("strong",[e._v("例子 2（重要）：调用其他合约方法")])]),e._v(" "),t("p",[t("strong",[e._v("完整代码如下")]),e._v(":")]),e._v(" "),t("p",[e._v("分别使用 "),t("code",[e._v("Test1")]),e._v(" 和 "),t("code",[e._v("Test2")]),e._v(" 的地址进行测试。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test1 {\n    string public name;\n    uint256 public age;\n    address public owner;\n    event Log(string message);\n\n    fallback() external payable {\n        emit Log("fallback was called");\n    }\n\n    receive() external payable {\n        emit Log("receive was called");\n    }\n\n    function setNameAndAge(string memory name_, uint256 age_)\n        external\n        payable\n        returns (string memory __name, uint256 __age)\n    {\n        name = name_;\n        age = age_;\n        owner = msg.sender;\n        return (name_, age_);\n    }\n\n    // 获取合约的余额\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n\ncontract Test2 {}\n\ncontract CallTest {\n    // 需要一个网页，动态的解析 _bys\n    bytes public bys;\n\n    function call_Test1_setNameAndAge(\n        address ads_,\n        string memory name_,\n        uint256 age_\n    ) external payable {\n        bytes memory data = abi.encodeWithSignature(\n            "setNameAndAge(string,uint256)",\n            name_,\n            age_\n        );\n        (bool success, bytes memory _bys) = ads_.call{value: msg.value}(data);\n        require(success, "Call Failed");\n        bys = _bys;\n    }\n}\n')])])]),t("p",[e._v("简单说下这个例子的原理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n普通调用\n用户A 调用 callB 合约, 发送 100 wei ; callB 调用 Test1, 发送 50 wei\n此时在 Test1 合约内部\n        msg.sender = B\n        msg.value = 50\n        Test1 内部如果有状态变量修改，则会被修改\n        发送到 Test1 内的ETH主币也会被留在Test1内\n */\n")])])]),t("p",[t("strong",[e._v("call 核心代码如下")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('bytes memory data = abi.encodeWithSignature(\n    "setNameAndAge(string,uint256)",\n    _name,\n    _age\n);\n(bool success, bytes memory _bys) = _ads.call{value: msg.value}(data);\nrequire(success, "Call Failed");\nbys = _bys;\n')])])]),t("h4",{attrs:{id:"⓻-delegatecall-委托调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓻-delegatecall-委托调用"}},[e._v("#")]),e._v(" ⓻ delegatecall() 委托调用")]),e._v(" "),t("p",[e._v("发出低级函数 "),t("code",[e._v("DELEGATECALL")]),e._v("，失败时返回 false，发送所有可用 gas，也可以自己调节 gas。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.delegatecall(bytes memory) returns (bool, bytes memory)\n")])])]),t("p",[t("code",[e._v("delegatecall")]),e._v(" 使用方法和 "),t("code",[e._v("call")]),e._v(" 完全一样。区别在于，"),t("code",[e._v("delegatecall")]),e._v(" 只调用给定地址的代码（函数），其他状态属性如（存储，余额 …）都来自当前合约。"),t("code",[e._v("delegatecall")]),e._v(" 的目的是使用另一个合约中的库代码。")]),e._v(" "),t("p",[e._v("委托调用是："),t("strong",[e._v("委托对方调用自己数据的")]),e._v("。类似授权转账，比如我部署一个 Bank 合约， 授权 ContractA 使用 Bank 地址内的资金，ContractA 只拥有控制权，但是没有拥有权。")]),e._v(" "),t("ul",[t("li",[e._v("委托调用后，所有变量修改都是发生在委托合约内部，并不会保存在被委托合约中。\n"),t("ul",[t("li",[e._v("利用这个特性，可以通过更换被委托合约，来升级委托合约。")])])]),e._v(" "),t("li",[e._v("委托调用合约内部，需要和被委托合约的内部参数完全一样，否则容易导致数据混乱\n"),t("ul",[t("li",[e._v("可以通过顺序来避免这个问题，但是推荐完全一样")])])])]),e._v(" "),t("p",[t("strong",[e._v("例子 1（重要）")])]),e._v(" "),t("p",[e._v("代码如下:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DelegateCall")]),e._v(" 是委托合约")]),e._v(" "),t("li",[t("code",[e._v("TestVersion1")]),e._v(" 是第 1 次被委托合约")]),e._v(" "),t("li",[t("code",[e._v("TestVersion2")]),e._v(" 是第 2 次被委托合约")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 合约版本 V.1\ncontract TestVersion1 {\n    address public sender;\n    uint256 public value;\n    uint256 public num;\n\n    function set(uint256 num_) external payable {\n        sender = msg.sender;\n        value = msg.value;\n        num = num_;\n    }\n}\n\n// 合约版本 V.2\ncontract TestVersion2 {\n    address public sender;\n    uint256 public value;\n    uint256 public num;\n\n    function set(uint256 num_) external payable {\n        sender = msg.sender;\n        value = msg.value;\n        num = num_ * 2;\n    }\n}\n\n// 委托调用测试\ncontract DelegateCall {\n    address public sender;\n    uint256 public value;\n    uint256 public num;\n\n    function set(address _ads, uint256 num_) external payable {\n        sender = msg.sender;\n        value = msg.value;\n        num = num_;\n        // 第1种 encode\n        // 不需知道合约名字，函数完全自定义\n        bytes memory data1 = abi.encodeWithSignature("set(uint256)", num_);\n        // 第2种 encode\n        // 需要合约名字，可以避免函数和参数写错\n        bytes memory data2 = abi.encodeWithSelector(TestVersion1.set.selector, num_);\n\n        (bool success, bytes memory _data) = _ads.delegatecall(data2);\n\n        require(success, "DelegateCall set failed");\n    }\n}\n')])])]),t("p",[e._v("简单说下这个例子的原理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n委托调用\n用户A 调用 DelegateCallB 合约, 发送 100 wei ; DelegateCallB 委托调用 Test1\n此时在 Test1 合约内部\n        msg.sender = A\n        msg.value = 100\n        Test1 内部如果有状态变量修改，也不会被修改，会在DelegateCallB 内改变\n        发送到 Test1 内的ETH主币，会被留在 DelegateCallB 内，不会在Test1 内\n */\n")])])]),t("h4",{attrs:{id:"⓼-staticcall-静态调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓼-staticcall-静态调用"}},[e._v("#")]),e._v(" ⓼ staticcall() 静态调用")]),e._v(" "),t("p",[e._v("用给定的有效载荷（payload）发出低级 "),t("code",[e._v("STATICCALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.staticcall(bytes memory) returns (bool, bytes memory)\n")])])]),t("p",[e._v("它与 call 基本相同，发送所有可用 gas，也可以自己调节 gas，"),t("strong",[e._v("但如果被调用的函数以任何方式修改状态变量，都将回退")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 被调用的合约\ncontract Hello1 {\n    function echo() external pure returns (string memory) {\n        return "Hello World!";\n    }\n}\n\ncontract Hello2 {\n    uint8 public a;\n    function echo() external returns (string memory) {\n        a = 1;\n        return "Hello World!";\n    }\n}\n\n// 调用者合约\ncontract SoldityTest {\n    function callHello(address ads_) external view returns (string memory) {\n        // 编码被调用者的方法签名\n        bytes4 methodId = bytes4(keccak256("echo()"));\n\n        // 调用合约\n        (bool success, bytes memory data) = ads_.staticcall(\n            abi.encodeWithSelector(methodId)\n        );\n        if (success) {\n            return abi.decode(data, (string));\n        } else {\n            return "error";\n        }\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓽-三种-call-的总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓽-三种-call-的总结"}},[e._v("#")]),e._v(" ⓽ 三种 call 的总结")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("call")]),e._v(" ， "),t("code",[e._v("delegatecall")]),e._v(" 和 "),t("code",[e._v("staticcall")]),e._v(" 都是非常低级的函数，应该只把它们当作最后一招来使用，它们破坏了 Solidity 的类型安全性。")]),e._v(" "),t("li",[e._v("三种方法都提供 "),t("code",[e._v("gas")]),e._v(" 选项，而 "),t("code",[e._v("value")]),e._v(" 选项仅 "),t("code",[e._v("call")]),e._v(" 支持 。所以三种 call 里只有 "),t("code",[e._v("call")]),e._v(" 可以进行 ETH 转账，其他两种不可以进行转账。")]),e._v(" "),t("li",[e._v("不管是读取状态还是写入状态，最好避免在合约代码中硬编码使用的 gas 值。这可能会引入"),t("strong",[e._v("错误")]),e._v("，而且 gas 的消耗也是动态改变的。")]),e._v(" "),t("li",[e._v("如果在通过低级函数 "),t("code",[e._v("delegatecall")]),e._v(" 发起调用时需要访问存储中的变量，那么这两个合约的存储布局需要一致，以便被调用的合约代码可以正确地通过变量名访问合约的存储变量。 这不是指在库函数调用（高级的调用方式）时所传递的存储变量指针需要满足那样情况。")])]),e._v(" "),t("blockquote",[t("p",[e._v("⚠️ 注意: 在 0.5.0 版本以前, "),t("code",[e._v(".call")]),e._v(", "),t("code",[e._v(".delegatecall")]),e._v(" and "),t("code",[e._v(".staticcall")]),e._v(" 仅仅返回成功状态，没有返回值。")])]),e._v(" "),t("blockquote",[t("p",[e._v("⚠️ 在 0.5.0 版本以前, 还有一个 "),t("code",[e._v("callcode")]),e._v(" 函数，现在已经去除。")])]),e._v(" "),t("h4",{attrs:{id:"⓾-transfer-send-call-三种转账的总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓾-transfer-send-call-三种转账的总结"}},[e._v("#")]),e._v(" ⓾ transfer / send / call 三种转账的总结")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    mapping(address => uint256) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function byTransfer() public {\n        payable(msg.sender).transfer(100);\n    }\n\n    function bySend() public {\n        bool success = payable(msg.sender).send(100);\n        require(success, "Send Fail");\n    }\n\n    // 如果使用 transfer 或 send 函数必须添加fallback回退函数\n    fallback() external {}\n\n    receive() external payable {}\n}\n')])])]),t("p",[e._v("相同点:")]),e._v(" "),t("ul",[t("li",[e._v("三种方法都可以进行转账")]),e._v(" "),t("li",[t("code",[e._v("_to.transfer(100)")]),e._v("、"),t("code",[e._v("_to.send(100)")]),e._v("、"),t("code",[e._v('_to.call{value: 100}("")')]),e._v(" 的接收方都是"),t("code",[e._v("_to")]),e._v("。\n"),t("ul",[t("li",[e._v("如果"),t("code",[e._v("_to")]),e._v("是合约，则合约中必须增加 "),t("code",[e._v("fallback")]),e._v(" 或者 "),t("code",[e._v("receive")]),e._v(" 函数！")]),e._v(" "),t("li",[e._v("否则报错"),t("code",[e._v("In order to receive Ether transfer the contract should have either 'receive' or payable 'fallback' function")])])])])]),e._v(" "),t("p",[e._v("不同点:")]),e._v(" "),t("ul",[t("li",[e._v("低级 "),t("code",[e._v("CALL")]),e._v(" 调用：不需要 "),t("code",[e._v("payable address")]),e._v(" "),t("ul",[t("li",[e._v("transfer 和 send 只能是 "),t("code",[e._v("payable address")])])])]),e._v(" "),t("li",[t("code",[e._v("call")]),e._v(" 的 gas 可以动态调整\n"),t("ul",[t("li",[e._v("transfer 和 send 只能是固定制 "),t("code",[e._v("2300")])])])]),e._v(" "),t("li",[t("code",[e._v("call")]),e._v(" 除了可以转账外，可以还可以调用不知道 ABI 的方法，还可以调用的时候转账\n"),t("ul",[t("li",[e._v("当调用不存在的合约方法时候，会触发对方合约内的 "),t("code",[e._v("fallback")]),e._v(" 或者 "),t("code",[e._v("receive")]),e._v("。")]),e._v(" "),t("li",[e._v("如果使用 "),t("code",[e._v("_to.call{value: 100}(data)")]),e._v("，那么"),t("code",[e._v("data")]),e._v("中被调用的方法必须添加 "),t("code",[e._v("payable")]),e._v(" 修饰符，否则转账失败！")]),e._v(" "),t("li",[e._v("因为可以调用方法，所以 call 有两个参数，除了一个 "),t("code",[e._v("bool")]),e._v(" 值代表成功或者失败，另外一个是可能存在的 "),t("code",[e._v("data")]),e._v("，比如创建合约时候得到部署的地址，调用函数时候得到的函数放回值。")])])])]),e._v(" "),t("h4",{attrs:{id:"_0-注意事项·"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-注意事项·"}},[e._v("#")]),e._v(" ⓪ 注意事项·")]),e._v(" "),t("p",[t("strong",[e._v("send")])]),e._v(" "),t("p",[e._v("使用 send 有很多危险：如果调用栈深度已经达到 1024（这总是可以由调用者所强制指定），转账会失败；并且如果接收者用光了 gas，转账同样会失败。为了保证以太币转账安全，总是检查 send 的返回值，利用 transfer 或者下面更好的方式： 用这种接收者取回钱的模式。")]),e._v(" "),t("p",[t("strong",[e._v("call")])]),e._v(" "),t("p",[e._v("在执行另一个合约函数时，应该尽可能避免使用 .call() ，因为它绕过了类型检查，函数存在检查和参数打包。")]),e._v(" "),t("p",[e._v("由于 EVM 会把对一个不存在的合约的调用作为是成功的。 Solidity 会在执行外部调用时使用 extcodesize 操作码进行额外检查。 这确保了即将被调用的合约要么实际存在（它包含代码）或者触发一个异常。低级调用不 包括这个检查，"),t("strong",[e._v("这使得它们在 GAS 方面更便宜，但也更不安全")]),e._v("。")]),e._v(" "),t("p",[e._v("上面的这三个 call 方法都是底层的消息传递调用，最好仅在万不得已才进行使用，因为他们破坏了 Solidity 的类型安全。")]),e._v(" "),t("h2",{attrs:{id:"_5️⃣-值类型-合约类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-值类型-合约类型"}},[e._v("#")]),e._v(" 5️⃣ 值类型:合约类型")]),e._v(" "),t("p",[e._v("每一个合约定义都有他自己的类型。")]),e._v(" "),t("ul",[t("li",[e._v("可以隐式地将合约转换为从他们继承的合约。")]),e._v(" "),t("li",[e._v("合约可以显式转换为 "),t("code",[e._v("address")]),e._v(" 类型。")]),e._v(" "),t("li",[e._v("可以转换为 "),t("code",[e._v("address payable")]),e._v(" 类型")])]),e._v(" "),t("p",[e._v("⚠️ 注意：合约不支持任何运算符。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-14"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=27",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 5 节值类型:合约类型")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=CU5PbGUCeio&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=27",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 5 节值类型:合约类型")])])]),e._v(" "),t("h3",{attrs:{id:"_1-创建的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建的例子"}},[e._v("#")]),e._v(" 1.创建的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract A {\n    uint256 public a = 123;\n\n    fallback() external {}\n\n    receive() external payable {}\n}\n\ncontract C {\n    A public a1;\n    // A public a1 = A(payable(0xa0808B3e1713ff8C66b89aa4d0033c9ACfe37016));\n    A public a2 = new A();\n\n    // 先部署后，然后传入地址\n    function getA1(A _a) external pure returns (address, address) {\n        return (address(_a), payable(address(_a)));\n    }\n\n    // 内部直接new创建\n    function getA2() external view returns (address, address) {\n        return (address(a2), payable(address(a2)));\n    }\n\n\n    function test1(A _a) external view returns (uint256) {\n        return _a.a();\n    }\n    function test2() external view returns (uint256) {\n        return a2.a();\n    }\n}\n")])])]),t("p",[e._v("如果声明一个合约类型的局部变量（ "),t("code",[e._v("MyContract c")]),e._v(" ），则可以调用该合约的函数。 注意需要赋相同合约类型的值给它。")]),e._v(" "),t("p",[e._v("还可以实例化合约（即新创建一个合约对象），使用 "),t("code",[e._v("new")]),e._v(" 创建合约。")]),e._v(" "),t("p",[e._v("合约和 address 的数据表示是相同的.")]),e._v(" "),t("h3",{attrs:{id:"_2-转钱的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-转钱的例子"}},[e._v("#")]),e._v(" 2.转钱的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract A {\n    uint256 public a = 123;\n\n    fallback() external {}\n\n    receive() external payable {}\n}\n\ncontract B {\n    // 没有 fallback / receive\n    uint256 public b = 123;\n}\n\ncontract C {\n    A public a = new A();\n    B public b = new B();\n\n    function transferA() external payable returns (address, address) {\n        payable(address(a)).transfer(msg.value);\n        return (address(a), payable(address(a)));\n    }\n\n\n    function transferB() external payable returns (address, address) {\n        payable(address(b)).transfer(msg.value);\n        return (address(b), payable(address(b)));\n    }\n\n        // 获取合约的余额\n    function getBalance(address ads_) external view returns (uint256) {\n        return ads_.balance;\n    }\n}\n")])])]),t("h3",{attrs:{id:"_3-合约的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-合约的属性"}},[e._v("#")]),e._v(" 3.合约的属性")]),e._v(" "),t("p",[e._v("合约类型的成员是合约的外部函数及 public 的 状态变量。")]),e._v(" "),t("p",[e._v("对于合约 C 可以使用 type(C) 获取合约的类型信息，")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("type(C).name")]),e._v(" "),t("ul",[t("li",[e._v("获得合约名")])])]),e._v(" "),t("li",[t("code",[e._v("type(C).creationCode")]),e._v(" "),t("ul",[t("li",[e._v("获得包含创建合约字节码的内存字节数组。")]),e._v(" "),t("li",[e._v("该值和合约内使用 "),t("code",[e._v("address(this).code;")]),e._v(" 结果一样。")]),e._v(" "),t("li",[e._v("它可以在内联汇编中构建自定义创建例程，尤其是使用 "),t("code",[e._v("create2")]),e._v(" 操作码。")]),e._v(" "),t("li",[e._v("不能在合约本身或派生的合约访问此属性。 因为会引起循环引用。")])])]),e._v(" "),t("li",[t("code",[e._v("type(C).runtimeCode")]),e._v(" "),t("ul",[t("li",[e._v("获得合约的运行时字节码的内存字节数组。这是通常由 "),t("code",[e._v("C")]),e._v(" 的构造函数部署的代码。")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("C")]),e._v(" 有一个使用内联汇编的构造函数，那么可能与实际部署的字节码不同。")]),e._v(" "),t("li",[e._v("还要注意库在部署时修改其运行时字节码以防范定期调用（guard against regular calls）。 与 "),t("code",[e._v(".creationCode")]),e._v(" 有相同的限制，不能在合约本身或派生的合约访问此属性。 因为会引起循环引用。")])])])]),e._v(" "),t("h4",{attrs:{id:"⓵-无-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-无-constructor"}},[e._v("#")]),e._v(" ⓵ 无 constructor")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    address public owner;\n\n    function getCode() public view returns (bytes memory) {\n        return address(this).code;\n    }\n}\n\ncontract C {\n    string public name = type(Test).name;\n\n    bytes public creationCode = type(Test).creationCode;\n\n    bytes public runtimeCode = type(Test).runtimeCode;\n}\n\n// Test.getCode\n//\n\n// creationCode\n//\n\n// runtimeCode\n// 和 Test.getCode 相同\n")])])]),t("h4",{attrs:{id:"⓶-有-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-有-constructor"}},[e._v("#")]),e._v(" ⓶ 有 constructor")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function getCode() public view returns (bytes memory) {\n        return address(this).code;\n    }\n}\n\ncontract C {\n    string public name = type(Test).name;\n\n    bytes public creationCode = type(Test).creationCode;\n\n    // runtimeCode 不能获取 constructor 修改 immutable 变量的数据\n    // 比如 Test 里的owner 不能是 immutable 类型\n    // "runtimeCode" is not available for contracts containing immutable variables.\n    // 等于合约地址上的属性 address(this).code\n    bytes public runtimeCode = type(Test).runtimeCode;\n}\n\n// Test.getCode\n//\n\n// creationCode\n//\n\n// runtimeCode\n// 和 Test.getCode 相同\n')])])]),t("h2",{attrs:{id:"_6️⃣-引用类型的额外注解-数据位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-引用类型的额外注解-数据位置"}},[e._v("#")]),e._v(" 6️⃣ 引用类型的额外注解:数据位置")]),e._v(" "),t("p",[e._v("data location ，中文名为数据位置。")]),e._v(" "),t("p",[e._v("在讲引用类型之前，先介绍数据位置。这是因为在 Solidity 中，引用类型是由简单数据类型组合而成，相比于简单的值类型，这些类型通常通过名称引用。这些类型涉及到的数据量较大，复制它们可能要消耗大量 Gas，所以我们在使用引用数据类型时，必须考虑存储位置。我们需要仔细考虑数据是保存在内存中，还是在 EVM 存储区中。这就是线介绍数据位置的原因。")]),e._v(" "),t("p",[e._v("注意：所有的引用类型，都有数据位置这个额外的注解来指定存储在哪里，所以一定要掌握好。")]),e._v(" "),t("p",[e._v("总结："),t("strong",[e._v("如果使用引用类型，则必须明确指明数据存储哪种类型的位置（空间）里")]),e._v("：")]),e._v(" "),t("h3",{attrs:{id:"_1-数据位置的基础介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据位置的基础介绍"}},[e._v("#")]),e._v(" 1.数据位置的基础介绍")]),e._v(" "),t("p",[e._v("在合约中声明和使用的变量都有一个数据位置，合约变量的数据位置将会影响 Gas 消耗量。")]),e._v(" "),t("p",[e._v("Solidity 提供的有三种如下数据位置。")]),e._v(" "),t("ul",[t("li",[e._v("存储 storage : 状态变量保存的位置，只要合约存在就一直存储．")]),e._v(" "),t("li",[e._v("内存 memory : 即数据在内存中，因此数据仅在其生命周期内（函数调用期间）有效。不能用于外部调用。")]),e._v(" "),t("li",[e._v("调用数据 calldata : 用来保存函数参数的特殊数据位置，是一个只读位置。\n"),t("ul",[t("li",[e._v("调用数据 calldata 是不可修改的、非持久的函数参数存储区域，效果大多类似 内存 memory 。")]),e._v(" "),t("li",[e._v("主要用于外部函数的参数，但也可用于其他变量，无论外部内部函数都可以使用。")])])])]),e._v(" "),t("p",[e._v("核心：更改数据位置或类型转换将始终产生自动进行一份拷贝，而在同一数据位置内（对于 存储 storage 来说）的复制仅在某些情况下进行拷贝。")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-15"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=28",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: 数据位置的基础介绍")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=XnHfYzygmG8&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=28",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: 数据位置的基础介绍")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-storage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-storage"}},[e._v("#")]),e._v(" ⓵ storage")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocation {\n    // storage\n    uint256 stateVariable = 1;\n    uint256[] stateArray = [1, 2, 3];\n\n    // uint storage stateVariable; // Expected identifier but got 'storage'\n    // uint[] memory stateArray; // Expected identifier but got 'memory'\n}\n")])])]),t("p",[e._v("该存储位置存储永久数据，这意味着该数据可以被合约中的所有函数访问。可以把它视为计算机的硬盘数据，所有数据都永久存储。保存在存储区(storage)中的变量，以智能合约的状态存储，并且在函数调用之间保持持久性。与其他数据位置相比，存储区数据位置的成本较高。")]),e._v(" "),t("p",[e._v("storage 是永久存储在以太坊区块链中，更具体地说存储在存储 Merkle Patricia 树中，"),t("strong",[e._v("形成帐户状态信息的一部分")]),e._v("。一旦使用这个类型，数据将永远存在。 扩展: "),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/39271872",target:"_blank",rel:"noopener noreferrer"}},[e._v("默克尔树（merkle tree）"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[e._v("重点:状态变量总是存储在存储区(storage)中,并且不能显式地标记状态变量的位置。")]),e._v("。状态变量是强制为 storage。")]),e._v(" "),t("h4",{attrs:{id:"⓶-memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-memory"}},[e._v("#")]),e._v(" ⓶ memory")]),e._v(" "),t("p",[e._v("内存位置是临时数据，比存储位置便宜。它只能在函数中访问。通常，内存数据用于保存临时变量，以便在函数执行期间进行计算。一旦函数执行完毕，它的内容就会被丢弃。你可以把它想象成每个单独函数的内存(RAM)。")]),e._v(" "),t("p",[e._v("memory："),t("strong",[e._v("存储在内存中，即分配、即使用，越过作用域则不可访问，等待被回收")]),e._v("。")]),e._v(" "),t("h5",{attrs:{id:"重点-1-函数参数-包括返回参数-都存储在内存中。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点-1-函数参数-包括返回参数-都存储在内存中。"}},[e._v("#")]),e._v(" "),t("strong",[e._v("重点 1:函数参数(包括返回参数)都存储在内存中。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocation {\n    function add(uint256 num1, uint256 num2)\n        public\n        pure\n        returns (uint256 result)\n    {\n        return num1 + num2;\n    }\n}\n")])])]),t("p",[e._v("上面例子中: 函数参数 "),t("code",[e._v("uint num1")]),e._v(" 与 "),t("code",[e._v("uint num2")]),e._v("，返回值 "),t("code",[e._v("uint result")]),e._v(" 都存储在内存中。")]),e._v(" "),t("h5",{attrs:{id:"重点-2-引用类型的局部变量-需要显式指定数据位置-storage-memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点-2-引用类型的局部变量-需要显式指定数据位置-storage-memory"}},[e._v("#")]),e._v(" "),t("strong",[e._v("重点 2:引用类型的局部变量，需要显式指定数据位置(storage/memory)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Locations {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    Book public java; // 一本 java 书\n    mapping(address => uint256) public balances;\n\n    function test() public {\n        /* 此处都是局部变量  */\n        // 值类型:所以它们被存储在内存中\n        bool flag = true;\n        uint256 number = 1;\n        address account = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac;\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff)));\n\n        // Data location can only be specified for array, struct or mapping types,\n        // but "memory" was given.\n        // bool memory flag2; // 错误:值类型的数据不能标示 memory\n\n        // 引用类型:需要显示指定数据位置，此处指定为内存\n        uint256[] memory localArray; // array\n        // uint8[] memory nums = [1, 2, 3]; // 内存中不能创建动态数组\n        uint8[3] memory numsFixed = [1, 2, 3];\n        uint256[] memory a = new uint256[](5); // 推荐\n        a[1] = 1;\n        a[2] = 2;\n        a[3] = 3;\n        a[4] = 4;\n\n        string memory myStr = "hello"; // string\n\n        // 映射不能在函数中动态创建，您必须从状态变量中分配它们。\n        // mapping(address => bool) memory myMapping;\n        mapping(address => uint256) storage ref = balances; // mapping\n        java = Book({title: "Solidity", author: "Anbang", book_id: 1}); // struct\n        bytes memory bc = bytes("!"); //\n    }\n}\n')])])]),t("ul",[t("li",[e._v("mapping 和 struct 类型，不能在函数中动态创建，必须从状态变量中分配它们。")]),e._v(" "),t("li",[e._v("内存中不能创建动态数组")])]),e._v(" "),t("h5",{attrs:{id:"重点-3-函数的输入和输出参数如果是数组-使用-memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点-3-函数的输入和输出参数如果是数组-使用-memory"}},[e._v("#")]),e._v(" "),t("strong",[e._v("重点 3:函数的输入和输出参数如果是数组,使用 memory")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocations {\n    // name_ 是 string ，所以使用 memory\n    // mm_ 是 uint256[] ，所以使用 memory\n    // 输出相同，也是使用 memory\n    function examples2(string memory name_, uint256[] memory mm_)\n        external\n        pure\n        returns (uint256[] memory memArr, string memory myName)\n    {\n        memArr = new uint256[](mm_.length);\n        myName = name_;\n        for (uint256 index = 0; index < mm_.length; index++) {\n            memArr[index] = mm_[index];\n        }\n    }\n}\n")])])]),t("h5",{attrs:{id:"重点-4-引用类型的局部变量-指定-storage-和-memory-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点-4-引用类型的局部变量-指定-storage-和-memory-的区别"}},[e._v("#")]),e._v(" "),t("strong",[e._v("重点 4:引用类型的局部变量:指定 storage 和 memory 的区别")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocations {\n    struct MyStruct {\n        string name;\n        uint256 age;\n    }\n    mapping(address => MyStruct) public myStructs;\n\n    function test1() external returns (MyStruct memory) {\n        myStructs[msg.sender] = MyStruct({name: "Anbang1", age: 18});\n\n        // storage 会修改状态变量\n        MyStruct storage myStruct1 = myStructs[msg.sender];\n        myStruct1.age++;\n        return myStruct1;\n    }\n\n    function test2() external returns (MyStruct memory) {\n        myStructs[msg.sender] = MyStruct({name: "Anbang2", age: 18});\n\n        // memory 函数运行完后即消失，修改的值也不会储存在状态变量中\n        MyStruct memory myStruct2 = myStructs[msg.sender];\n        myStruct2.age++;\n        return myStruct2;\n    }\n}\n')])])]),t("ul",[t("li",[t("code",[e._v("storage")]),e._v("修改引用数据: 会修改状态变量")]),e._v(" "),t("li",[t("code",[e._v("memory")]),e._v("修改引用数据: 函数运行完后即消失，修改的值也不会储存在状态变量中")])]),e._v(" "),t("h4",{attrs:{id:"⓷-calldata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-calldata"}},[e._v("#")]),e._v(" ⓷ calldata")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocations {\n    function test(uint256[] calldata mm_)\n        external\n        pure\n        returns (uint256[] calldata)\n    {\n        // mm_[0] = 1; // Calldata arrays are read-only.\n        return mm_;\n    }\n}\n")])])]),t("p",[e._v("calldata 是不可修改的非持久性数据位置，所有传递给函数的值，都存储在这里。此外，"),t("code",[e._v("calldata")]),e._v(" 是外部函数(external function)的参数的默认位置。外部函数(external function)的参数存储在 calldata 中。函数的返回值中也可以使用 calldata 数据位置的数组和结构，但是无法给其分配空间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocations {\n    // 参数 [1,2,3]      消耗 25586 gas\n    // 参数 [1,2,3,4,5,6,7,8,9,0] 消耗 32114 gas\n    function iMemory(uint256[] memory _mm)\n        external\n        pure\n        returns (uint256[] memory memArr)\n    {\n        memArr = new uint256[](_mm.length);\n        for (uint256 index = 0; index < _mm.length; index++) {\n            memArr[index] = _mm[index];\n        }\n    }\n\n    // 参数 [1,2,3]      消耗 24551 gas\n    // 参数 [1,2,3,4,5,6,7,8,9,0] 消耗 29510 gas\n    function iCalldata(uint256[] calldata _mm)\n        external\n        pure\n        returns (uint256[] memory memArr)\n    {\n        memArr = new uint256[](_mm.length);\n        for (uint256 index = 0; index < _mm.length; index++) {\n            memArr[index] = _mm[index];\n        }\n    }\n}\n")])])]),t("ul",[t("li",[t("strong",[e._v("要点: calldata 只能用在函数的输入和输出参数中")])]),e._v(" "),t("li",[t("strong",[e._v("要点: calldata 用在输入参数中，比 memorg 更省 gas")])]),e._v(" "),t("li",[t("strong",[e._v("要点: calldata 的参数不允许修改，但是 memorg 参数允许修改")])])]),e._v(" "),t("p",[e._v("存储函数参数，它是只读的，不会永久存储的一个数据位置。外部函数(external function)的参数被强制指定为 calldata，效果与 memory 类似。")]),e._v(" "),t("blockquote",[t("p",[e._v("注解: 如果可以的话，请尽量使用 calldata 作为数据位置，因为它将避免复制，并确保不能修改数据。")])]),e._v(" "),t("blockquote",[t("p",[e._v("注解: 在 0.6.9 版本之前，引用类型参数的数据位置有限制，主要表现在函数的可见性上；外部函数中使用 calldata ，公共函数中使用 memory ，以及内部和私有函数中的 memory 或 storage 。 现在 memory 和 calldata 在所有函数中都被允许使用，无论其可见性如何。")])]),e._v(" "),t("h4",{attrs:{id:"⓸-stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-stack"}},[e._v("#")]),e._v(" ⓸ stack")]),e._v(" "),t("p",[e._v("堆栈是由 EVM (Ethereum 虚拟机)维护的非持久性数据。EVM 使用堆栈数据位置在执行期间加载变量。堆栈位置最多有 1024 个级别的限制。")]),e._v(" "),t("h4",{attrs:{id:"⓹-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-小结"}},[e._v("#")]),e._v(" ⓹ 小结")]),e._v(" "),t("p",[e._v("按照关键字:")]),e._v(" "),t("ul",[t("li",[e._v("storage: 存储区: 状态变量总是储存在"),t("strong",[e._v("存储区")]),e._v("上")]),e._v(" "),t("li",[e._v("memory: 内存区: 局部变量使用，只在内存中生效。\n"),t("ul",[t("li",[e._v("值类型的局部变量，存储在"),t("strong",[e._v("内存")]),e._v("中。")]),e._v(" "),t("li",[t("strong",[e._v("引用类型局部变量，需要显式地指定数据位置")]),e._v("。")]),e._v(" "),t("li",[e._v("函数的输入参数如果是数组或者 string，必须是 "),t("code",[e._v("memory")]),e._v(" 或 "),t("code",[e._v("calldata")])]),e._v(" "),t("li",[e._v("内存中的数组必须是定长数组（不能使用 push 赋值），动态数组只能储存在状态变量中。")])])]),e._v(" "),t("li",[e._v("calldata\n"),t("ul",[t("li",[e._v("和 memory 类似，但是 calldata 只能用在函数的输入参数中。")]),e._v(" "),t("li",[e._v("相比使用 memory ,合约输入参数如果使用 calldata, 可以节约 gas")])])])]),e._v(" "),t("p",[e._v("按照函数参数:")]),e._v(" "),t("ul",[t("li",[e._v("内部函数参数: (包括返回参数)都存储在**memory（内存）**中。")]),e._v(" "),t("li",[e._v("外部函数参数: (不包括返回参数)存储在 "),t("code",[e._v("calldata")]),e._v(" 中。")])]),e._v(" "),t("h3",{attrs:{id:"_2-不同数据位置之间的赋值规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-不同数据位置之间的赋值规则"}},[e._v("#")]),e._v(" 2.不同数据位置之间的赋值规则")]),e._v(" "),t("p",[e._v("本小节总结如下:")]),e._v(" "),t("ol",[t("li",[e._v("将 "),t("strong",{staticStyle:{color:"blue"}},[e._v("存储变量")]),e._v(" 赋值给 "),t("strong",[e._v("存储变量")]),e._v(" (同类型)\n"),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])])]),e._v(" "),t("li",[e._v("将 "),t("strong",{staticStyle:{color:"red"}},[e._v("内存变量")]),e._v(" 赋值给 "),t("strong",[e._v("存储变量")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])])]),e._v(" "),t("li",[e._v("将 "),t("strong",{staticStyle:{color:"blue"}},[e._v("存储变量")]),e._v(" 赋值给 内存变量\n"),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])])]),e._v(" "),t("li",[e._v("将 "),t("strong",{staticStyle:{color:"red"}},[e._v("内存变量")]),e._v(" 赋值给 内存变量 (同类型)\n"),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 不会创建副本。("),t("strong",[e._v("重要")]),e._v(")")])])])]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-16"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=29",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: 不同数据位置之间的赋值规则")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=gR6s2aBbftg&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=29",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: 不同数据位置之间的赋值规则")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-将存储变量赋值给存储变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-将存储变量赋值给存储变量"}},[e._v("#")]),e._v(" ⓵ 将"),t("strong",{staticStyle:{color:"blue"}},[e._v("存储变量")]),e._v("赋值给存储变量")]),e._v(" "),t("p",[e._v("将一个状态(存储)变量赋值给另一个状态(存储)变量，将创建一个新的副本。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Locations {\n    // 值类型\n    uint256 public stateA1 = 10;\n    uint256 public stateA2 = 20;\n    // 引用类型\n    string public stateB1 = "ABCD";\n    string public stateB2 = "1234";\n\n    function testA() public returns (uint256) {\n        stateA1 = stateA2;\n        stateA2 = 30;\n        return stateA1; // returns 20\n    }\n\n    function testB() public returns (string memory) {\n        stateB1 = stateB2;\n        bytes(stateB2)[0] = bytes1("9");\n        return stateB1; // returns 1234\n    }\n}\n')])])]),t("p",[t("strong",[e._v("问答题: 上面函数 "),t("code",[e._v("testA")]),e._v(" 和 "),t("code",[e._v("testB")]),e._v(" 的返回值是什么？")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("testA")]),e._v(": 第一次执行返回值是 "),t("code",[e._v("20")]),e._v("，之后执行返回值是 "),t("code",[e._v("30")])]),e._v(" "),t("li",[t("code",[e._v("testB")]),e._v(": 第一次执行返回值是字符串 "),t("code",[e._v('"1234"')]),e._v("，之后执行返回值是字符串 "),t("code",[e._v('"9234"')])])]),e._v(" "),t("p",[t("strong",[e._v("值类型")]),e._v(": 先将 stateA2 赋值给 stateA1,再把 stateA2 修改；结果得到的 stateA1 是 stateA2 修改前的值，说明对于值类型的局部变量来说 => 创建一个新副本。")]),e._v(" "),t("p",[t("strong",[e._v("引用类型")]),e._v(": 先将 stateB2 赋值给 stateB1,再把 stateB2 修改；结果得到的 stateB1 是 stateB2 修改前的值，说明对于引用类型的局部变量来说 => 创建一个新副本。")]),e._v(" "),t("h4",{attrs:{id:"⓶-将内存变量赋值给存储变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-将内存变量赋值给存储变量"}},[e._v("#")]),e._v(" ⓶ 将"),t("strong",{staticStyle:{color:"red"}},[e._v("内存变量")]),e._v("赋值给存储变量")]),e._v(" "),t("p",[e._v("将内存变量赋值给存储变量，总会创建一个新副本。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Locations {\n    uint256 public stateA1 = 10; //storage\n    string public stateB1 = "ABCD";\n\n    function testA() public returns (uint256) {\n        uint256 memoryA2 = 20; // memory\n        stateA1 = memoryA2;\n        memoryA2 = 40;\n        return stateA1; // returns 20\n    }\n\n    function testB() public returns (string memory) {\n        string memory memoryB2 = "1234"; // memory\n        stateB1 = memoryB2;\n        bytes(memoryB2)[0] = bytes1("9");\n        return stateB1; // returns 1234\n    }\n}\n')])])]),t("p",[t("strong",[e._v("问答题: 上面函数 "),t("code",[e._v("testA")]),e._v(" 和 "),t("code",[e._v("testB")]),e._v(" 的返回值是什么？")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("testA")]),e._v(": 永远返回 "),t("code",[e._v("20")])]),e._v(" "),t("li",[t("code",[e._v("testB")]),e._v(": 永远返回字符串 "),t("code",[e._v('"1234"')])])]),e._v(" "),t("p",[t("strong",[e._v("值类型")]),e._v(": 先将 memoryA2 赋值给 stateA1,再把 memoryA2 修改；结果得到的 stateA1 是 memoryA2 修改前的值，说明对于值类型的局部变量来说 => 创建一个新副本。")]),e._v(" "),t("p",[t("strong",[e._v("引用类型")]),e._v(": 先将 memoryB2 赋值给 stateB1,再把 memoryB2 修改；结果得到的 stateB1 是 memoryB2 修改前的值，说明对于引用类型的局部变量来说 => 创建一个新副本。")]),e._v(" "),t("h4",{attrs:{id:"⓷-将存储变量赋值给内存变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-将存储变量赋值给内存变量"}},[e._v("#")]),e._v(" ⓷ 将"),t("strong",{staticStyle:{color:"blue"}},[e._v("存储变量")]),e._v("赋值给内存变量")]),e._v(" "),t("p",[e._v("从存储变量复制到内存变量，将创建一个副本。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Locations {\n    uint256 public stateA1 = 10; //storage\n    string public stateB1 = "ABCD";\n\n    function testA() public returns (uint256) {\n        uint256 memoryA2 = 20; // memory\n        memoryA2 = stateA1;\n        stateA1 = 40;\n        return memoryA2; // returns 第一次是 10, 以后都是40\n    }\n\n    function testB() public returns (string memory) {\n        string memory memoryB2 = "1234"; // memory\n        memoryB2 = stateB1;\n        bytes(stateB1)[0] = bytes1("9");\n        return memoryB2; // returns 第一次是 "ABCD", 以后都是 "9BCD"\n    }\n}\n')])])]),t("p",[t("strong",[e._v("问答题: 上面函数 testA 和 testB 的返回值是什么？")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("testA")]),e._v(": 第一次执行返回值是 10，之后执行返回值是 40")]),e._v(" "),t("li",[t("code",[e._v("testB")]),e._v(": 第一次执行返回值是字符串 "),t("code",[e._v('"ABCD"')]),e._v("，之后执行返回值是字符串 "),t("code",[e._v('"9BCD"')])])]),e._v(" "),t("p",[t("strong",[e._v("值类型")]),e._v(": 先将 stateA1 赋值给 memoryA2,再把 stateA1 修改；结果得到的 memoryA2 是 stateA1 修改前的值，说明对于值类型的局部变量来说 => 创建一个新副本。")]),e._v(" "),t("p",[t("strong",[e._v("引用类型")]),e._v(": 先将 stateB1 赋值给 memoryB2,再把 stateB1 修改；结果得到的 memoryB2 是 stateB1 修改前的值，说明对于引用类型的局部变量来说 => 创建一个新副本。")]),e._v(" "),t("h4",{attrs:{id:"⓸-将内存变量赋值给内存变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-将内存变量赋值给内存变量"}},[e._v("#")]),e._v(" ⓸ 将"),t("strong",{staticStyle:{color:"red"}},[e._v("内存变量")]),e._v("赋值给内存变量")]),e._v(" "),t("ul",[t("li",[e._v("对于值类型的局部变量: 创建一个新副本。")]),e._v(" "),t("li",[e._v("对于引用类型局部变量: "),t("strong",[e._v("不会创建副本")]),e._v("。(重要)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Locations {\n    function testA() public pure returns (uint256) {\n        uint256 memoryA1 = 10; // memory\n        uint256 memoryA2 = 20; // memory\n        memoryA1 = memoryA2;\n        memoryA2 = 40;\n        return memoryA1; // returns 永远是 20\n    }\n\n    function testB() public pure returns (string memory) {\n        string memory memoryB1 = "ABCD"; // memory\n        string memory memoryB2 = "1234"; // memory\n        memoryB1 = memoryB2;\n        bytes(memoryB2)[0] = bytes1("9");\n        return memoryB1; // returns 永远是 "9234"\n    }\n}\n')])])]),t("p",[t("strong",[e._v("问答题: 上面函数 testA 和 testB 的返回值是什么？")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("testA")]),e._v(": 永远是 "),t("code",[e._v("20")])]),e._v(" "),t("li",[t("code",[e._v("testB")]),e._v(": 永远是字符串 "),t("code",[e._v('"9234"')])])]),e._v(" "),t("p",[t("strong",[e._v("值类型")]),e._v(": 先将 memoryA2 赋值给 memoryA1,再把 memoryA2 修改；结果得到的 memoryA1 是 memoryA2 修改前的值，说明对于值类型的局部变量来说，此时仍然创建一个新副本。")]),e._v(" "),t("p",[t("strong",[e._v("引用类型")]),e._v(": 先将 memoryB2 赋值给 memoryB1,再把 memoryB2 修改；结果得到的 memoryB1 是 memoryB2 修改后的值。说明它们都指向相同的存储位置，并不会创建新副本。")]),e._v(" "),t("p",[e._v("⚠️ 重点："),t("strong",[e._v("对于引用类型的局部变量，从一个内存变量复制到另一个内存变量不会创建副本，共享内存")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"⓹-小结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-小结-2"}},[e._v("#")]),e._v(" ⓹ 小结")]),e._v(" "),t("p",[e._v("数据位置不仅仅表示数据如何保存，它同样影响着赋值行为：")]),e._v(" "),t("ul",[t("li",[e._v("在 storage 和 memory 之间两两赋值（或者从 calldata 赋值 ），都会创建一份独立的拷贝。")]),e._v(" "),t("li",[e._v("从 memory 到 memory 的赋值只创建引用，这意味着更改内存变量，其他引用相同数据的所有其他内存变量的值也会跟着改变。")]),e._v(" "),t("li",[e._v("从 storage 到本地存储变量的赋值也只分配一个引用。")]),e._v(" "),t("li",[e._v("其他的向 storage 的赋值，总是进行拷贝。 这种情况的示例，如对状态变量或 storage 的结构体类型的局部变量成员的赋值，即使局部变量本身是一个引用，也会进行一份拷贝。")])]),e._v(" "),t("h3",{attrs:{id:"_3-深刻理解引用类型赋值和修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-深刻理解引用类型赋值和修改"}},[e._v("#")]),e._v(" 3.深刻理解引用类型赋值和修改")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-17"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=30",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: 深刻理解引用类型赋值和修改")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=HB-03x5PfX4&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=30",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: 深刻理解引用类型赋值和修改")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Locations {\n    string public stateB1 = "ABCD";\n    struct MyStruct {\n        string name;\n        uint256 age;\n    }\n    mapping(address => MyStruct) public stateC1;\n\n    constructor() {\n        stateC1[msg.sender] = MyStruct({name: "Anbang", age: 1});\n    }\n\n    function testB1() public returns (string memory, string memory) {\n        string memory memoryB2 = "1234"; // memory\n        stateB1 = memoryB2;\n\n        // storage 修改:会改变状态变量\n        string storage stateB3 = stateB1;\n        bytes(stateB3)[0] = bytes1("9");\n        return (stateB1, stateB3);\n        // returns (9234,9234)\n        // 储存空间中 stateB1 = 9234\n    }\n\n    function testB2() public returns (string memory, string memory) {\n        string memory memoryB2 = "1234"; // memory\n        stateB1 = memoryB2;\n\n        // memory 修改:不会改变状态变量\n        string memory memoryB3 = stateB1;\n        bytes(memoryB3)[0] = bytes1("9");\n        return (stateB1, memoryB3);\n        // returns (1234,9234)\n        // 储存空间中 stateB1 = 1234\n    }\n\n    function testC1() external returns (MyStruct memory, MyStruct memory) {\n        MyStruct memory memoryC2 = MyStruct({name: "Anbang1", age: 18});\n        stateC1[msg.sender] = memoryC2;\n\n        // storage 修改:会改变状态变量\n        MyStruct storage stateC3 = stateC1[msg.sender];\n        stateC3.age++;\n        return (stateC1[msg.sender], stateC3);\n        // returns ({name: "Anbang1", age: 19},{name: "Anbang1", age: 19})\n        // 储存空间中 stateC1 = {name: "Anbang1", age: 19}\n    }\n\n    function testC2() external returns (MyStruct memory, MyStruct memory) {\n        MyStruct memory memoryC2 = MyStruct({name: "Anbang2", age: 18});\n        stateC1[msg.sender] = memoryC2;\n\n        // memory 修改:不会改变状态变量\n        MyStruct memory memoryC3 = stateC1[msg.sender];\n        memoryC3.age++;\n        return (stateC1[msg.sender], memoryC3);\n        // returns ({name: "Anbang2", age: 18},{name: "Anbang2", age: 19})\n        // 储存空间中 stateC1 = {name: "Anbang2", age: 18}\n    }\n}\n')])])]),t("p",[e._v("问答题：")]),e._v(" "),t("ul",[t("li",[e._v("testB1 运行后，返回什么？\n"),t("ul",[t("li",[t("code",[e._v("(9234,9234)")])])])]),e._v(" "),t("li",[e._v("testB2 运行后，返回什么？\n"),t("ul",[t("li",[t("code",[e._v("(1234,9234)")])])])]),e._v(" "),t("li",[e._v("testC1 运行后，返回什么？\n"),t("ul",[t("li",[t("code",[e._v('({name: "Anbang1", age: 19},{name: "Anbang1", age: 19})')])])])]),e._v(" "),t("li",[e._v("testC2 运行后，返回什么？\n"),t("ul",[t("li",[t("code",[e._v('({name: "Anbang2", age: 18},{name: "Anbang2", age: 19})')])])])])]),e._v(" "),t("h3",{attrs:{id:"_4-calldata-和-memeory-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-calldata-和-memeory-区别"}},[e._v("#")]),e._v(" 4.calldata 和 memeory 区别")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-18"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-18"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=31",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: calldata 和 memeory 区别")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=dyUlxfSJOvE&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=31",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 6 节数据位置: calldata 和 memeory 区别")])])]),e._v(" "),t("p",[t("strong",[e._v("函数调用函数时的区别")]),e._v(":")]),e._v(" "),t("h4",{attrs:{id:"⓵-calldata可以隐式转换为memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-calldata可以隐式转换为memory"}},[e._v("#")]),e._v(" ⓵ "),t("code",[e._v("calldata可以隐式转换为memory")])]),e._v(" "),t("ul",[t("li",[e._v("calldata 参数可以隐式转换为 memory")]),e._v(" "),t("li",[e._v("memory 参数不可以隐式转换为 calldata")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataLocations {\n    function memoryFn(uint256[] memory _mm)\n        private\n        pure\n        returns (uint256[] memory memArr)\n    {\n        memArr = new uint256[](_mm.length);\n        for (uint256 index = 0; index < _mm.length; index++) {\n            memArr[index] = _mm[index];\n        }\n    }\n\n    function calldataFn(uint256[] calldata _mm)\n        private\n        pure\n        returns (uint256[] memory memArr)\n    {\n        memArr = new uint256[](_mm.length);\n        for (uint256 index = 0; index < _mm.length; index++) {\n            memArr[index] = _mm[index];\n        }\n    }\n\n\n    function examples1(uint256[] memory _mm)\n        external\n        pure\n        returns (uint256[] memory memArr)\n    {\n        // memoryFn 参数是 memory，可以调用\n        // calldataFn 参数是 calldata ，不可以调用， memory 不可以隐式转换为 calldata\n        // memory 参数，调用需要 memory 参数的函数: 成功\n        memArr = memoryFn(_mm);\n\n        // memory 不能隐式转换为 calldata\n        // memArr = calldataFn(_mm); // memory 参数，调用需要 calldata 参数的函数: 禁止\n    }\n\n    function examples2(uint256[] calldata _mm)\n        external\n        pure\n        returns (uint256[] memory memArr)\n    {\n        // calldata 参数，调用需要 calldata 参数的函数: 成功\n        memArr = calldataFn(_mm);\n\n        // memoryFn 参数是 memory，可以调用，calldata可以隐式转换为 memory\n        // calldataFn 参数是 calldata ，直接使用calldata更省gas\n        // calldata（小:约束多） 可以隐式的转换 memory（大）\n        // calldata 参数，调用需要 memory 参数的函数: 成功\n        // memArr = memoryFn(_mm);\n    }\n\n}\n")])])]),t("h4",{attrs:{id:"⓶-calldata-和-memeory-对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-calldata-和-memeory-对比"}},[e._v("#")]),e._v(" ⓶ calldata 和 memeory 对比")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("contract Test {\n    function memoryFn(uint256[] memory _num)\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _num[0] = 999; // 修改参数\n        return (_num);\n    }\n\n    function calldataFn(uint256[] calldata _num)\n        public\n        pure\n        returns (uint256[] calldata)\n    {\n        // _num[0] = 999; // 禁止修改 calldata 数据\n        return (_num);\n    }\n}\n")])])]),t("h2",{attrs:{id:"_7️⃣-引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7️⃣-引用类型"}},[e._v("#")]),e._v(" 7️⃣ 引用类型")]),e._v(" "),t("p",[e._v("Solidity 中，有一些数据类型由值类型组合而成，相比于简单的值类型，这些类型通常通过名称引用，被称为引用类型。")]),e._v(" "),t("ul",[t("li",[e._v("array\n"),t("ul",[t("li",[e._v("基本类型组成的数组集合。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint256[5] public T1 = [1, 2, 3, 4, 5];\naddress[5] public A = [0xff...6ac];\nbyte[5] public A = [0xff...6ac];\n")])])]),t("ul",[t("li",[e._v("字符串与 bytes 是特殊的数组，所以也是引用类型")])])]),e._v(" "),t("li",[e._v("string: 是一个动态尺寸的 utf-8 编码字符串\n"),t("ul",[t("li",[e._v("他其实是一个特殊的可变字节数组，同时其也是一个引用类型")])])]),e._v(" "),t("li",[e._v("bytes: 动态十六进制字节数组\n"),t("ul",[t("li",[e._v("bytes 类似于 "),t("code",[e._v("byte[]")]),e._v("，但它在 calldata 中被紧密地打包。因此，相比于 "),t("code",[e._v("byte[]")]),e._v("，bytes 应该优先使用，因为更便宜。")]),e._v(" "),t("li",[e._v("string 等价于 bytes，但不允许长度或索引访问。")])])]),e._v(" "),t("li",[e._v("mapping")]),e._v(" "),t("li",[e._v("struct：为了允许 evm 的优化，请确保 storage 中的变量和 "),t("code",[e._v("struct")]),e._v(" 成员的书写顺序允许它们被紧密地打包。例如，应该按照 "),t("code",[e._v("uint128，uint128，uint256")]),e._v(" 的顺序来声明状态变量，而不是使用 "),t("code",[e._v("uint128，uint256，uint128")]),e._v("，因为前者只占用两个存储插槽，而后者将占用三个。")])]),e._v(" "),t("h3",{attrs:{id:"_1-array-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-array-数组"}},[e._v("#")]),e._v(" 1.array 数组")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-19"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-19"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=32",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: array 数组")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=rKSExH-ZclU&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=32",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: array 数组")])])]),e._v(" "),t("p",[e._v("数组是存储"),t("strong",[e._v("同类元素的有序集合")]),e._v("。数组声明时可以是固定大小的，也可以是动态调整长度。")]),e._v(" "),t("p",[e._v("下面是 array 的总结:")]),e._v(" "),t("ul",[t("li",[e._v("声明和初始化数组\n"),t("ul",[t("li",[e._v("数组元素可以是任何类型，包括映射或结构体。对类型的限制是映射只能存储在 存储 storage 中，并且公开访问函数的参数需要是 ABI 类型。")])])]),e._v(" "),t("li",[e._v("访问和修改数组元素\n"),t("ul",[t("li",[t("code",[e._v("arr[_index]")]),e._v(":\n"),t("ul",[t("li",[e._v("通过索引进行获取特定元素")]),e._v(" "),t("li",[e._v("可以通过索引修改值")])])]),e._v(" "),t("li",[e._v("状态变量标记 "),t("code",[e._v("public")]),e._v(" 的数组，Solidity 创建一个 "),t("code",[e._v("getter函数")]),e._v(" 。 下标的索引数字就是 "),t("code",[e._v("getter函数")]),e._v(" 的参数。")]),e._v(" "),t("li",[e._v("访问超出数组长度的元素会导致异常（assert 类型异常 ）。 可以使用 .push() 方法在末尾追加一个新元素，其中 .push() 追加一个零初始化的元素并返回对它的引用。")])])]),e._v(" "),t("li",[e._v("函数中返回数组\n"),t("ul",[t("li",[e._v("如果想把数组全部返回，需要通过函数进行操作。在函数中返回数组")])])]),e._v(" "),t("li",[e._v("动态数组和定长数组\n"),t("ul",[t("li",[e._v("动态数组只能存在于状态变量中")]),e._v(" "),t("li",[e._v("内存中只能创建定长数组")])])]),e._v(" "),t("li",[e._v("创建内存数组\n"),t("ul",[t("li",[e._v("对于 storage 数组，元素可以是任意类型(其他数组、映射或结构)。")]),e._v(" "),t("li",[e._v("对于 memory 数组，元素类型不能是映射类型，如果它是一个 public 函数的参数，那么元素类型必须是 ABI 类型。")])])]),e._v(" "),t("li",[e._v("数组的属性\n"),t("ul",[t("li",[t("code",[e._v("length")]),e._v(": 获取数组的长度")])])]),e._v(" "),t("li",[e._v("数组的方法\n"),t("ul",[t("li",[e._v("push : 只有动态数组可以使用，只能用在动态数组上")]),e._v(" "),t("li",[e._v("pop: 删除最后一个长度，只能用在动态数组上")]),e._v(" "),t("li",[e._v("delete: 清空对应的索引；清空不是删除，并不会改变长度，索引位置的值会改为默认值。")]),e._v(" "),t("li",[e._v("数组切片: "),t("code",[e._v("x[start:end]")])])])]),e._v(" "),t("li",[e._v("写一个完全删除的 delete 方法")])]),e._v(" "),t("h4",{attrs:{id:"⓵-数组的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-数组的创建"}},[e._v("#")]),e._v(" ⓵ 数组的创建")]),e._v(" "),t("p",[e._v("数组长度上分为 "),t("strong",[e._v("固定长度数组")]),e._v(" 和 "),t("strong",[e._v("可变长度数组")]),e._v("，类型上分为"),t("strong",[e._v("一维数组")]),e._v("和"),t("strong",[e._v("多维数组")]),e._v("；")]),e._v(" "),t("p",[e._v("一个元素类型为 "),t("code",[e._v("T")]),e._v("，固定长度为 "),t("code",[e._v("k")]),e._v(" 的数组可以声明为 "),t("code",[e._v("T[k]")]),e._v("，而动态数组声明为 "),t("code",[e._v("T[]")]),e._v("。")]),e._v(" "),t("ul",[t("li",[e._v("固定长度数组:创建")]),e._v(" "),t("li",[e._v("可变长度数组:创建")]),e._v(" "),t("li",[e._v("二维数组:创建")]),e._v(" "),t("li",[e._v("其它\n"),t("ul",[t("li",[t("code",[e._v("uint256[2][] public T = new uint256[2][](10);")])])])])]),e._v(" "),t("h5",{attrs:{id:"_1-固定长度数组-创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-固定长度数组-创建"}},[e._v("#")]),e._v(" 1."),t("strong",[e._v("固定长度数组:创建")])]),e._v(" "),t("p",[e._v("固定长度数组:创建")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    // 固定长度数组\n    uint256[5] public T = [1, 2, 3, 4, 5];\n    address[5] public A =   [0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac];\n    uint256[10] public arr1 = [0, 1, 2]; // 赋值的数组长度不超过10都可以\n    uint256[10] public arr2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    // 如果初始化超出了数组的预期长度，报错:\n    // Type uint8[11] memory is not implicitly convertible to expected\n    // type uint256[10] storage ref.\n    // uint256[10] public arr3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n}\n")])])]),t("ul",[t("li",[e._v("语法: "),t("code",[e._v("type[arraySize] arrayName;")]),e._v("，这是一维数组，其中 arraySize 必须是一个大于零的整数数字，type 可以是任何数据类型。")]),e._v(" "),t("li",[e._v("固定长度数组创建后不可对长度进行修改,但是可以对内容进行修改\n"),t("ul",[t("li",[e._v("（不可对长度进行修改是与不可变字节数组之间不同点）")])])])]),e._v(" "),t("p",[t("strong",[e._v("数组先声明再赋值")])]),e._v(" "),t("p",[e._v("通过索引进行赋值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[10] public arr1;\n\n    function test() external {\n        arr1[0] = 1;\n        arr1[1] = 10;\n        arr1[2] = 100;\n        arr1[9] = 900;\n    }\n}\n")])])]),t("h5",{attrs:{id:"_2-可变长度数组-创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-可变长度数组-创建"}},[e._v("#")]),e._v(" 2."),t("strong",[e._v("可变长度数组:创建")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    // 可变长度数组\n    uint256[] public T1 = [1, 2, 3, 4, 5]; // 方式 1\n    uint256[] public T2 = new uint256[](5); // 方式 2\n}\n")])])]),t("ul",[t("li",[e._v("方式 1: "),t("code",[e._v("uint256[] T1 = [1, 2, 3, 4, 5];")]),e._v(" "),t("ul",[t("li",[e._v("该方式不可以在函数内创建")])])]),e._v(" "),t("li",[e._v("方式 2: "),t("code",[e._v("uint256[] T2 = new uint256[](5);")]),e._v(" "),t("ul",[t("li",[e._v("用方式 2 创建数组时，若数组为成员变量, 则默认为 storage 类型；")]),e._v(" "),t("li",[e._v("若为局部变量默认为 "),t("code",[e._v("memory")]),e._v(" 类型，"),t("code",[e._v("memory")]),e._v(" 类型的数组，必须声明长度，并且长度创建后不可变。")]),e._v(" "),t("li",[t("code",[e._v("push")]),e._v(" 方法不能用在 "),t("code",[e._v("memeory")]),e._v(" 的数组上,只能逐个索引的赋值。")])])])]),e._v(" "),t("h5",{attrs:{id:"_3-内存中创建数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-内存中创建数组"}},[e._v("#")]),e._v(" 3.内存中创建数组")]),e._v(" "),t("p",[e._v("不能直接创建：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[] public x = [uint256(1), 3, 4];\n\n    // 下面这段代码并不能编译。\n    function f() public {\n        uint256[] memory x = [uint256(1), 3, 4];\n    }\n}\n")])])]),t("p",[e._v("可以使用 "),t("code",[e._v("new")]),e._v(" 关键字在内存中创建动态数组。创建格式: "),t("code",[e._v("uint256[] memory x = new uint256[](3);")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    function f() public pure {\n        uint256[] memory x = new uint256[](3);\n    }\n}\n")])])]),t("ul",[t("li",[e._v("内存中创建的数组是局部变量。")]),e._v(" "),t("li",[e._v("内存中不能创建动态数组，必须创建定长数组。\n"),t("ul",[t("li",[e._v("思考: 插入排序的例子中，优化后的代码是动态数组，还是定长数组？(插入排序在后面算法那一章)")])])])]),e._v(" "),t("p",[e._v("memory 类型的数组长度创建后不可变，不能通过修改成员变量 "),t("code",[e._v(".push")]),e._v(" 改变 memory 数组的大小。必须提前计算数组大小，或者创建一个新的内存数组并复制每个元素。")]),e._v(" "),t("p",[e._v("例子 0 : 显示给各个元素赋值:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    function f() public pure {\n        uint256[] memory x = new uint256[](3);\n        x[0] = 1;\n        x[1] = 3;\n        x[2] = 4;\n    }\n}\n")])])]),t("p",[e._v("例子 1: 新分配的数组元素总是以 默认值 初始化。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    function examples1() external pure returns (uint256[] memory) {\n        uint256[] memory a = new uint256[](5);\n        a[1] = 1;\n        a[2] = 2;\n        a[3] = 3;\n        a[4] = 4;\n        return a;\n    }\n\n    // 在 Solidity 中的所有变量，新分配的数组元素总是以 默认值 初始化。\n    function examples2(uint256 _len)\n        external\n        pure\n        returns (uint256[] memory b)\n    {\n        require(_len > 1, "length > 1");\n        b = new uint256[](_len);\n        b[0] = 666;\n    }\n\n    function examples3(uint256 _len) external pure returns (bytes memory b) {\n        require(_len > 1, "length > 1");\n        b = new bytes(_len);\n        b[0] = bytes1("A");\n    }\n}\n')])])]),t("h5",{attrs:{id:"_4-动态数组和定长数组的-gas-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-动态数组和定长数组的-gas-区别"}},[e._v("#")]),e._v(" 4.动态数组和定长数组的 gas 区别")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    // 26086 gas\n    uint256[] public nums = [1, 2, 3];\n\n    // 23913 gas\n    uint256[3] public numsFixed = [1, 2, 3];\n}\n")])])]),t("p",[e._v("在 Remix 中部署后，如果获取 nums，需要传入索引获取 nums 的对应 inedx 值。其中动态数组 nums 查看需要 26086 gas，定长数组 numsFixed 查看仅需 23913 gas。"),t("strong",[e._v("如果能使用定长数组，就使用定长数组，因为它很便宜。")])]),e._v(" "),t("h5",{attrs:{id:"_5-二维数组-创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-二维数组-创建"}},[e._v("#")]),e._v(" 5."),t("strong",[e._v("二维数组:创建")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // length:3\n    uint256[2][3] public T = [[1, 2], [3, 4], [5, 6]];\n\n    function getLength() external view returns (uint256) {\n        return T.length;\n    }\n}\n")])])]),t("ul",[t("li",[e._v("举个例子，一个长度为 "),t("code",[e._v("5")]),e._v("，元素类型为 uint 的动态数组的数组（二维数组），应声明为 "),t("code",[e._v("uint[][5]")]),e._v(" （注意这里跟其它语言比，数组长度的声明位置是反的）。在 Solidity 中， "),t("code",[e._v("X[3]")]),e._v(" 总是一个包含三个 X 类型元素的数组，即使 X 本身就是一个数组.")]),e._v(" "),t("li",[t("code",[e._v("uint256[2][3] public T = [[1, 2], [3, 4], [5, 6]];")])]),e._v(" "),t("li",[t("code",[e._v("T.length")]),e._v(" 为 3")])]),e._v(" "),t("h4",{attrs:{id:"⓶-访问和修改数组元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-访问和修改数组元素"}},[e._v("#")]),e._v(" ⓶ 访问和修改数组元素")]),e._v(" "),t("ul",[t("li",[e._v("通过索引访问数组元素")]),e._v(" "),t("li",[e._v("通过索引修改数组元素")])]),e._v(" "),t("p",[e._v("注意: "),t("code",[e._v("arr[index]")]),e._v(" 中的 index 需要小于 "),t("code",[e._v("arr.length")]),e._v("；")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[10] public arr1 = [0, 1, 2]; // 赋值的数组长度不超过10都可以\n    uint256[10] public arr2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    function test() external view returns (uint256, uint256) {\n        return (arr1[2], arr2[5]);\n    }\n\n    function modi() external {\n        arr1[2] = 666;\n        arr2[5] = 666;\n    }\n}\n")])])]),t("p",[e._v("这种可以查看到元素的指定元素，但有时候我们可能想要查看元素的所有内容。这时候就需要函数处理一下。")]),e._v(" "),t("h4",{attrs:{id:"⓷-函数中返回整个数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-函数中返回整个数组"}},[e._v("#")]),e._v(" ⓷ 函数中返回整个数组")]),e._v(" "),t("p",[e._v("通过函数把数组的所有内容全部返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    uint256[] public nums1 = [1, 2, 3];\n    uint256[3] public nums2 = [1, 2, 3];\n\n    function test1() external view returns (uint256[] memory) {\n        return nums1;\n    }\n\n    function test2() external view returns (uint256[3] memory) {\n        return nums2;\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓸-数组常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-数组常量"}},[e._v("#")]),e._v(" ⓸ 数组常量")]),e._v(" "),t("p",[e._v("正常看到下方代码应该没什么问题，但是注意:函数 s 中数组类型是"),t("code",[e._v("uint256")]),e._v("，而函数 t 中输入的数组类型是"),t("code",[e._v("uint8")]),e._v(", 这里需要将 uint8 转换一下"),t("code",[e._v("s([uint256(1), uint256(2)]);")]),e._v(";")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract T {\n    function s(uint256[2] memory _arr) public {}\n\n    function t() public {\n        // Invalid type for argument in function call.\n        // Invalid implicit conversion from uint8[2] memory to uint256[2] memory requested.\n        // s([1, 2]); // 默认这么写不行的 ❌\n        s([uint256(1), uint256(2)]); // ✅\n    }\n}\n")])])]),t("p",[e._v("数组常量（字面量）是在方括号中（ "),t("code",[e._v("[...]")]),e._v(" ） 包含一个或多个逗号分隔的表达式。例如 "),t("code",[e._v("[1, a, f(3)]")]),e._v(" 。")]),e._v(" "),t("p",[e._v("数组常量的类型通过以下的方式确定:")]),e._v(" "),t("ul",[t("li",[e._v("它总是一个静态大小的内存数组，其长度为表达式的数量。")]),e._v(" "),t("li",[e._v("数组的基本类型是列表上的第一个表达式的类型，以便所有其他表达式可以隐式地转换为它。如果不可以转换，将出现类型错误。")]),e._v(" "),t("li",[e._v("所有元素都都可以转换为基本类型也是不够的。其中一个元素必须是明确类型的。")])]),e._v(" "),t("p",[e._v("在下面的例子中，"),t("code",[e._v("[1, 2, 3]")]),e._v(" 的类型是 "),t("code",[e._v("uint8[3] memory")]),e._v("。 因为每个常量的类型都是 "),t("code",[e._v("uint8")]),e._v(" ，如果你希望结果是 "),t("code",[e._v("uint256[3] memory")]),e._v(" 类型，你需要将第一个元素转换为 "),t("code",[e._v("uint256")]),e._v(" 。虽然所有元素都都可以转换为"),t("code",[e._v("uint256")]),e._v("，但是默认是转换为"),t("code",[e._v("uint8")]),e._v("，能转成小的类型，就不会转成大的，这是数组常量的"),t("strong",[e._v("懒惰性")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract LBC {\n    function f() public pure returns (uint256[3] memory) {\n        return g([uint256(1), 2, 3]);\n    }\n\n    function g(uint256[3] memory _arr)\n        internal\n        pure\n        returns (uint256[3] memory)\n    {\n        return _arr;\n    }\n}\n")])])]),t("p",[e._v("如下是一个比较经典的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract T {\n    int8[2] public a = [1, -1];\n    // int8[2] public a = [int8(1), -1];\n}\n")])])]),t("p",[e._v("数组常量 "),t("code",[e._v("[1, -1]")]),e._v(" 是无效的，因为第一个表达式类型是 "),t("code",[e._v("uint8")]),e._v(" 而第二个类似是 "),t("code",[e._v("int8")]),e._v(" 他们不可以隐式的相互转换。 为了确保可以运行，你是可以使用例如： "),t("code",[e._v("[int8(1), -1]")]),e._v(" 。")]),e._v(" "),t("p",[e._v("由于不同类型的固定大小的内存数组不能相互转换(尽管基础类型可以)，如果你想使用二维数组常量，你必须显式地指定一个基础类型:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function f() public pure returns (uint24[2][4] memory) {\n        // 下面代码无法工作，因为没有匹配内部类型\n        // uint[2][4] memory x = [[0x1, 1], [0xffffff, 2], [0xff, 3], [0xffff, 4]];\n\n        uint24[2][4] memory x = [\n            [uint24(0x1), 1],\n            [0xffffff, 2],\n            [uint24(0xff), 3],\n            [uint24(0xffff), 4]\n        ];\n\n        return x;\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓹-数组的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-数组的属性"}},[e._v("#")]),e._v(" ⓹ 数组的属性")]),e._v(" "),t("h5",{attrs:{id:"length"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[e._v("#")]),e._v(" length")]),e._v(" "),t("p",[e._v("数组有 "),t("code",[e._v("length")]),e._v(" 属性表示当前数组的长度。 一经创建，内存 memory 数组的大小就是固定的（但却是动态的，也就是说，它可以根据运行时的参数创建）。")]),e._v(" "),t("p",[e._v("例子 1: "),t("strong",[e._v("通过 "),t("code",[e._v("arr.length")]),e._v(" 获取数组的长度")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[10] public arr1 = [0, 1, 2];\n    uint256[10] public arr2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    function test1() external view returns (uint256) {\n        return arr1.length;\n    }\n\n    function test2() external view returns (uint256) {\n        return arr2.length;\n    }\n}\n")])])]),t("p",[e._v("例子 2: "),t("strong",[e._v("可以通过 length 属性来判断长度。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract TX {\n    function f(uint len) public pure {\n        uint[] memory a = new uint[](7);\n        bytes memory b = new bytes(len);\n\n        assert(a.length == 7);\n        assert(b.length == len);\n    }\n}\n")])])]),t("p",[e._v("例子 3:"),t("strong",[e._v("不能通过设置 "),t("code",[e._v("arr.length")]),e._v(" 来调整动态数组的长度。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[10] public arr1 = [0, 1, 2];\n    // Member "length" is read-only and cannot be used to resize arrays.\n    function test1() external {\n        arr1.length = 8;\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓺-数组的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓺-数组的方法"}},[e._v("#")]),e._v(" ⓺ 数组的方法")]),e._v(" "),t("ul",[t("li",[e._v("push : 只有动态数组可以使用，动态的 storage 数组以及 "),t("code",[e._v("bytes")]),e._v(" 类型可以用，"),t("code",[e._v("string")]),e._v(" 类型不可以\n"),t("ul",[t("li",[t("code",[e._v("push()")]),e._v(": 它用来添加新的零初始化元素到数组末尾，并返回元素引用.因此可以这样："),t("code",[e._v("x.push().t = 2")]),e._v(" 或 "),t("code",[e._v("x.push() = b")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("push(x)")]),e._v(": 用来在数组末尾添加一个给定的元素，这个函数没有返回值．")])])]),e._v(" "),t("li",[t("code",[e._v("pop")]),e._v(": 删除最后一个长度\n"),t("ul",[t("li",[e._v("它用来从数组末尾删除元素。 同样的会在移除的元素上隐含调用 delete 。")])])]),e._v(" "),t("li",[t("code",[e._v("delete")]),e._v(": 删除对应的索引；删除并不会改变长度，索引位置的值会改为默认值。")]),e._v(" "),t("li",[t("code",[e._v("x[start:end]")]),e._v(": 数组切片，仅可使用于 "),t("code",[e._v("calldata")]),e._v(" 数组.")])]),e._v(" "),t("h5",{attrs:{id:"push"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[e._v("#")]),e._v(" push")]),e._v(" "),t("p",[e._v("通过 "),t("code",[e._v("push()")]),e._v("　增加 storage 数组的长度具有固定的 gas 消耗，因为 storage 总是被零初始化；")]),e._v(" "),t("p",[e._v("例子: 状态变量的定长数组可以通过 push 来改变长度。但是内存中不可以使用 push。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[] public a1 = new uint256[](5);\n\n    function setStorageA() external {\n        a1.push(8);\n    }\n\n    function setMemoryA() external pure {\n        uint256[] memory a2 = new uint256[](5);\n\n        // Type uint8[5] memory is not implicitly convertible to expected\n        // type uint256[] memory. uint256[] memory a3 = [1, 2, 3, 4, 5];\n\n        // Member "push" is not available in uint256[] memory outside of storage.\n        // a2.push(8);\n    }\n}\n')])])]),t("h5",{attrs:{id:"pop-delete"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pop-delete"}},[e._v("#")]),e._v(" pop & delete")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    uint256[] private nums = [1, 2, 3];\n    uint256[3] private numsFixed = [1, 2, 3];\n\n    function setArray()\n        external\n        returns (\n            uint256 len1,\n            uint256 len2,\n            uint256 len3\n        )\n    {\n        nums.push(4); // push\n        len1 = nums.length;\n\n        nums.pop(); // 删除\n        len2 = nums.length;\n\n        nums[2] = 666;\n\n        delete nums[1];\n        // delete nums;\n        len3 = nums.length;\n    }\n\n    function getArray() external view returns (uint256[] memory) {\n        return nums;\n    }\n}\n")])])]),t("ul",[t("li",[t("code",[e._v("pop")]),e._v(" 删除最后一个元素")]),e._v(" "),t("li",[t("code",[e._v("delete array[x]")]),e._v(" 仅仅是清除元素对应索引为默认值")]),e._v(" "),t("li",[t("code",[e._v("delete array")]),e._v(" array 的 length 重置为 0")])]),e._v(" "),t("p",[e._v("通过 "),t("code",[e._v("pop()")]),e._v("　删除数组成本是很高的,因为它包括已删除的元素的清理，类似于在这些元素上调用 "),t("code",[e._v("delete")]),e._v("。")]),e._v(" "),t("p",[e._v("注意:如果需要在外部（external）函数中使用多维数组，这需要启用 ABI coder v2。 public 函数中是支持的使用多维数组。因为多维数组用的场景不多，这里就不介绍了。")]),e._v(" "),t("h5",{attrs:{id:"数组切片-x-start-end"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组切片-x-start-end"}},[e._v("#")]),e._v(" 数组切片: x[start:end]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[] internal nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n    uint256[] temp1;\n    uint256[] temp2;\n    uint256[] temp3;\n\n    // 输入 [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    function setTemp(uint256[] calldata _arr)\n        external\n        returns (\n            uint256[] memory,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        temp1 = _arr[0:2];\n        temp2 = _arr[:2];\n        temp3 = _arr[2:];\n\n        // Index range access is only supported for dynamic calldata arrays.\n        // temp3 = nums[2:];\n\n        return (temp1, temp2, temp3);\n    }\n}\n")])])]),t("p",[e._v("数组切片是数组连续部分的视图，用法如："),t("code",[e._v("x[start:end]")]),e._v(" ， "),t("code",[e._v("start")]),e._v(" 和 "),t("code",[e._v("end")]),e._v(" 是 "),t("code",[e._v("uint256")]),e._v(" 类型（或结果为 "),t("code",[e._v("uint256")]),e._v(" 的表达式）。 "),t("code",[e._v("x[start:end]")]),e._v(" 的第一个元素是 "),t("code",[e._v("x[start]")]),e._v(" ， 最后一个元素是 "),t("code",[e._v("x[end - 1]")]),e._v(" 。(包含 start，不包含 end)")]),e._v(" "),t("ul",[t("li",[e._v("目前数组切片，仅可使用于 "),t("code",[e._v("calldata")]),e._v(" 数组.")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("start")]),e._v(" 比 "),t("code",[e._v("end")]),e._v(" 大或者 "),t("code",[e._v("end")]),e._v(" 比数组长度还大，将会抛出异常。")]),e._v(" "),t("li",[t("code",[e._v("start")]),e._v(" 和 "),t("code",[e._v("end")]),e._v(" 都可以是可选的： "),t("code",[e._v("start")]),e._v(" 默认是 0， 而 "),t("code",[e._v("end")]),e._v(" 默认是数组长度。")])]),e._v(" "),t("p",[e._v("数组切片没有任何成员。 它们可以隐式转换为其“背后”类型的数组，并支持索引访问。 索引访问也是相对于切片的开始位置。 数组切片没有类型名称，这意味着没有变量可以将数组切片作为类型，它们仅存在于中间表达式中。")]),e._v(" "),t("h4",{attrs:{id:"⓻-模拟切片的-slice-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓻-模拟切片的-slice-方法"}},[e._v("#")]),e._v(" ⓻ 模拟切片的 slice 方法")]),e._v(" "),t("p",[e._v("切片当前仅支持 calldata 的数据，如果是 memory 就不支持了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    function slice(\n        uint256[] memory arr,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (uint256[] memory) {\n        require(begin < arr.length, "index out of bound");\n\n        //如果起始位置越界，返回空数组\n        if (begin >= arr.length) return arr;\n\n        //处理 begin 和 end小于0的情况，使用 uint256 ，不存在负数\n        // if (begin < 0) {\n        //     begin = begin + arr.length < 0 ? 0 : begin + arr.length;\n        // }\n        // if (end < 0) {\n        //     end = end + arr.length < 0 ? 0 : end + arr.length;\n        // }\n\n        //声明一个空数组，作为复制后返回值\n        uint256[] memory temp = new uint256[](end - begin);\n\n        //复制begin至end的元素到 temp 中 包括arr[begin] 不包括arr[end]\n        for (uint256 index = begin; index < end; index++) {\n            temp[index - begin] = arr[index];\n        }\n        return temp;\n    }\n\n    function test()\n        external\n        pure\n        returns (\n            uint256[] memory arr,\n            uint256[] memory temp1,\n            uint256[] memory temp2,\n            uint256[] memory temp3\n        )\n    {\n        arr = new uint256[](5);\n        arr[0] = 1;\n        arr[1] = 2;\n        arr[2] = 3;\n        arr[3] = 4;\n        arr[4] = 5;\n\n        temp1 = slice(arr, 1, 3); // [2,3]\n        temp2 = slice(arr, 1, 4); // [2,3,4]\n        temp3 = slice(arr, 1, 5); // [2,3,4,5]\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓼-delete-完全删除数组的指定索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓼-delete-完全删除数组的指定索引"}},[e._v("#")]),e._v(" ⓼ delete 完全删除数组的指定索引")]),e._v(" "),t("p",[e._v("删除数组的指定索引，数组的长度也会改变")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    function deletePro(uint256[] memory arr, uint256 _index)\n        internal\n        pure\n        returns (uint256[] memory temp)\n    {\n        require(_index < arr.length, "index out of bound");\n        temp = new uint256[](arr.length - 1);\n        for (uint256 index = 0; index <= temp.length - 1; index++) {\n            if (index >= _index) {\n                temp[_index] = arr[_index + 1];\n            } else {\n                temp[index] = arr[index];\n            }\n        }\n    }\n\n    function test()\n        external\n        pure\n        returns (uint256[] memory arr, uint256[] memory temp)\n    {\n        arr = new uint256[](3);\n        arr[0] = 1;\n        arr[1] = 2;\n        arr[2] = 3;\n        assert(arr[0] == 1);\n        assert(arr[1] == 2);\n        assert(arr[2] == 3);\n        assert(arr.length == 3);\n\n        temp = deletePro(arr, 1);\n        assert(temp[0] == 1);\n        assert(temp[1] == 3);\n        assert(temp.length == 2);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_2-bytes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-bytes"}},[e._v("#")]),e._v(" 2.bytes")]),e._v(" "),t("p",[t("code",[e._v("string")]),e._v(" 和 "),t("code",[e._v("bytes")]),e._v(" 类型的变量是特殊的数组。 "),t("code",[e._v("bytes")]),e._v(" 可以通过索引或者"),t("code",[e._v(".length")]),e._v("来访问数据。string 与 bytes 相同，但不允许用"),t("code",[e._v(".length")]),e._v("或索引来访问数据。")]),e._v(" "),t("ul",[t("li",[e._v("对任意长度的原始字节数据使用 "),t("code",[e._v("bytes")]),e._v("，对任意长度字符串（UTF-8）数据使用 "),t("code",[e._v("string")]),e._v(" 。")]),e._v(" "),t("li",[e._v("如果使用一个长度限制的字节数组，应该使用一个 "),t("code",[e._v("bytes1")]),e._v(" 到 "),t("code",[e._v("bytes32")]),e._v(" 的具体类型，因为它们便宜得多。")]),e._v(" "),t("li",[t("code",[e._v("bytesN[]")]),e._v(" 和 "),t("code",[e._v("bytes")]),e._v(" 可以转换: bytes1 是值类型，比如 "),t("code",[e._v("0x61")]),e._v("; "),t("code",[e._v("bytes")]),e._v("是可变字节数组,如果 bytes1 想要借用 bytes 的方法，就需要转换成 bytes;")]),e._v(" "),t("li",[e._v("基本规则:对任意长度的原始字节数据使用 "),t("code",[e._v("bytes")]),e._v("，对任意长度字符串（UTF-8）数据使用 "),t("code",[e._v("string")]),e._v(" 。")])]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-20"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-20"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=33",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: bytes")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=0QfJRgBOOCg&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=33",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: bytes")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-创建"}},[e._v("#")]),e._v(" ⓵ 创建")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome = bytes("1.Welcome");\n    bytes public temp1 = new bytes(2); // 可变字节数组创建方式\n\n    function test1(uint256 len_) public pure  returns(bytes memory){\n        bytes memory temp2 = new bytes(len_);\n        temp2[0] = "a";\n        return temp2;\n    }\n    function test2() public{\n        temp1[0] = "a";\n    }\n}\n')])])]),t("p",[e._v("状态变量的创建方式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('bytes public welcome = bytes("1.Welcome");\n')])])]),t("p",[e._v("函数中可变字节数组创建方式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bytes memory temp2 = new bytes(length); // 可变字节数组创建方式\n")])])]),t("h4",{attrs:{id:"⓶-bytes-和-bytes32-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-bytes-和-bytes32-区别"}},[e._v("#")]),e._v(" ⓶ bytes 和 "),t("code",[e._v("bytes32[]")]),e._v(" 区别")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// bytes / bytes32 / bytes32[] 区别\n// bytes:可变字节数组 ： 引用类型\n// bytes32: 固定长度的字节数组 ： 值类型\n// bytes32[]: 由“固定长度的字节数组” 组成的 数组类型\ncontract Demo {\n    bytes public welcome1 = bytes("1.Welcome");\n    bytes32 public welcome2 = "a";\n    bytes32[] public welcome3 = [bytes32("a")];\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes32[] public abcArray = [bytes1("a"), bytes1("b"), bytes1("c")];\n\n    // 0x616263\n    bytes public abcBytes = bytes("abc");\n\n    function getAbcArr() external view returns (bytes32[] memory) {\n        return abcArray;\n    }\n}\n')])])]),t("p",[t("code",[e._v("abcBytes")]),e._v(" 的值是: "),t("code",[e._v("0x616263")]),e._v(";")]),e._v(" "),t("p",[t("code",[e._v("abcArray")]),e._v(" 的值是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[\n    0x6100000000000000000000000000000000000000000000000000000000000000,\n    0x6200000000000000000000000000000000000000000000000000000000000000,\n    0x6300000000000000000000000000000000000000000000000000000000000000\n]\n")])])]),t("p",[t("code",[e._v("bytes")]),e._v(" 有点类似于 "),t("code",[e._v("bytes1[]")]),e._v("的紧打包，我们可以把上面例子中 bytes32 改为 bytes1 类型进行对比。")]),e._v(" "),t("p",[e._v("我们更多时候应该使用 "),t("code",[e._v("bytes")]),e._v(" 而不是 "),t("code",[e._v("bytes32[]")]),e._v("这种数组类型 ，因为 Gas 费用更低;")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytes32[]")]),e._v(" 会在元素之间添加 31 个填充字节。")]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(" 由于紧密包装，这没有填充字节。")])]),e._v(" "),t("h4",{attrs:{id:"⓷-属性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-属性-2"}},[e._v("#")]),e._v(" ⓷ 属性")]),e._v(" "),t("ul",[t("li",[e._v("获取 bytes 长度\n"),t("ul",[t("li",[e._v("bytesVar.length:以字节长度表示字符串的长度")])])]),e._v(" "),t("li",[e._v("获取指定索引的数据"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bytes1 temp1 = bytes(welcome)[_index]; // 返回固定长度的 bytes1\n")])])])]),e._v(" "),t("li",[e._v("修改 bytes\n"),t("ul",[t("li",[t("code",[e._v("bytesVar[7] = 'x'")])])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome = bytes("1.Welcome");\n\n    function getLength() public view returns (uint256 welcomeLength) {\n        welcomeLength = welcome.length;\n    }\n\n    function modi() public {\n        welcome[0] = bytes1("2");\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓸-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-方法"}},[e._v("#")]),e._v(" ⓸ 方法")]),e._v(" "),t("ul",[t("li",[e._v("bytes 拼接\n"),t("ul",[t("li",[t("code",[e._v("bytes.concat(...) returns (bytes memory):")])]),e._v(" "),t("li",[e._v("如果不使用参数调用 bytes.concat 将返回空数组。")])])]),e._v(" "),t("li",[e._v("push 方法\n"),t("ul",[t("li",[t("code",[e._v("a.push(b)")]),e._v(" 往字节数组添加字节")])])]),e._v(" "),t("li",[t("code",[e._v("delete bys;")]),e._v(":清空字节数组")]),e._v(" "),t("li",[t("code",[e._v("x[start:end]")]),e._v(": 数组切片")]),e._v(" "),t("li",[t("code",[e._v("bytes()")]),e._v(": 将字符串转换到 bytes")]),e._v(" "),t("li",[t("code",[e._v("string()")]),e._v(":将 bytes 数据转换到字符串")]),e._v(" "),t("li",[e._v("比较两个 bytes\n"),t("ul",[t("li",[t("code",[e._v("keccak256(bytes1) == keccak256(bytes2)")])])])])]),e._v(" "),t("h5",{attrs:{id:"bytes-concat-拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bytes-concat-拼接"}},[e._v("#")]),e._v(" bytes.concat 拼接")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytes.concat(...) returns (bytes memory)")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome = bytes("a");\n    bytes public concatBytes = bytes.concat(welcome, bytes("b"), bytes1("c"),"a");\n}\n')])])]),t("p",[e._v("bytes.concat 函数可以连接任意数量的 "),t("code",[e._v("bytes")]),e._v(" 或 "),t("code",[e._v("bytes1")]),e._v(" ... "),t("code",[e._v("bytes32")]),e._v(" 值。 该函数返回一个 "),t("code",[e._v("bytes memory")]),e._v(" ，包含所有参数的内容，无填充方式拼接在一起。 如果你想使用字符串参数或其他不能隐式转换为 "),t("code",[e._v("bytes")]),e._v(" 的类型，你需要先将它们转换为 "),t("code",[e._v("bytes")]),e._v("或 "),t("code",[e._v("bytes1/…/ bytes32")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome = bytes("a");\n    bytes public concatBytes = bytes.concat();\n}\n')])])]),t("p",[e._v("如果你不使用参数调用 "),t("code",[e._v("bytes.concat")]),e._v(" 将返回空数组。")]),e._v(" "),t("h5",{attrs:{id:"push-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push-方法"}},[e._v("#")]),e._v(" push 方法")]),e._v(" "),t("p",[e._v("注意： push 是单个字节，是 "),t("code",[e._v("bytes1")]),e._v("的固定长度,而不是 "),t("code",[e._v("bytes")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome1 = bytes("Welcome");\n    bytes public welcome2 = new bytes(10);\n\n    function testPush() public {\n        welcome1.push(bytes("A")[0]);\n        welcome2.push(bytes("B")[0]);\n    }\n}\n')])])]),t("h5",{attrs:{id:"pop-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pop-方法"}},[e._v("#")]),e._v(" pop 方法")]),e._v(" "),t("p",[e._v("删除数组的最后一个元素。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome1 = bytes("Welcome");\n    bytes public welcome2 = new bytes(10);\n\n    function testPop() public {\n        welcome1.pop();\n        welcome2.pop();\n    }\n}\n')])])]),t("h5",{attrs:{id:"delete-清空字节数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delete-清空字节数组"}},[e._v("#")]),e._v(" "),t("code",[e._v("delete")]),e._v(" 清空字节数组")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("delete")]),e._v(" 全局关键字;")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("delete bytesName")])]),e._v(" "),t("li",[t("code",[e._v("delete bytesName[index]")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public welcome1 = bytes("Welcome");\n\n    function deleteAll() public {\n        delete welcome1;\n    }\n\n    function deleteIndex(uint256 index_) public {\n        delete welcome1[index_];\n    }\n}\n')])])]),t("h5",{attrs:{id:"x-start-end-数组切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#x-start-end-数组切片"}},[e._v("#")]),e._v(" "),t("code",[e._v("x[start:end]")]),e._v(":数组切片")]),e._v(" "),t("p",[e._v("注意：数组切片只能用在 calldata 类型上。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Proxy {\n    bytes public welcome1 = bytes("Welcome");\n    bytes4 public temp1 = bytes4(welcome1); // 0x57656c63\n\n    // 把 welcome1 的值传入参数\n    function forward(bytes calldata payload)\n        external pure\n        returns(bytes memory temp2,bytes4 temp3)\n    {\n        // 切片方法只能用在 calldata 上。\n        temp2 = payload[:4];\n        temp3 = bytes4(payload[:4]);\n    }\n}\n')])])]),t("p",[e._v("另一个例子: "),t("code",[e._v("bts_[:4]")]),e._v(" 和 "),t("code",[e._v("bytes4(bts_)")]),e._v(" 结果不一样！")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// x[start:end]\n//      1.只能用在 caldata 类型的数据上\n//      2.切出来的是数组：`bts_[:4]` 和 `bytes4(bts_)` 结果不一样！\n//          两者虽然看起来值意义，但是类型不一样！处理的时候也需要注意\ncontract Demo {\n    // 0x57656c636f6d65\n    bytes public welcome1 = bytes("Welcome");\n    bytes4 public welcome2 = bytes4(welcome1);\n\n    // bytes: temp1 0x57656c63\n    // bytes4: temp2 0x57656c63\n    function test(bytes calldata bts_) public pure returns(\n        bytes memory temp1,\n        bytes4 temp2,\n        bytes4 temp3\n    ){\n        temp1 = bts_[:4]; // 切的返回值是数组\n        temp2 = bytes4(bts_[:4]); //\n        temp3 = bytes4(bts_); // 切： 由大到小 => 切出来的是值类型\n    }\n\n}\n')])])]),t("p",[e._v("例子: "),t("strong",[e._v("数组切片在 ABI 解码数据的时候非常有用")]),e._v("，如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Proxy {\n    /// 被当前合约管理的 客户端合约地址\n    address client;\n\n    constructor(address client_) {\n        client = client_;\n    }\n\n    /// 在进行参数验证之后，转发到由client实现的 "setOwner(address)"\n    function forward(bytes calldata payload) external {\n        bytes4 sig = bytes4(payload[:4]);\n\n        // 由于截断行为，与执行 bytes4(payload) 是相同的\n        // bytes4 sig = bytes4(payload);\n\n        if (sig == bytes4(keccak256("setOwner(address)"))) {\n            address owner = abi.decode(payload[4:], (address));\n            require(owner != address(0), "Address of owner cannot be zero.");\n        }\n        (bool status, ) = client.delegatecall(payload);\n        require(status, "Forwarded call failed.");\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓹-字符串-到-bytes-的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-字符串-到-bytes-的转换"}},[e._v("#")]),e._v(" ⓹ 字符串 到 bytes 的转换")]),e._v(" "),t("p",[e._v("转换方法: 可以使用 "),t("code",[e._v("bytes()")]),e._v(" 构造函数将字符串转换为 "),t("code",[e._v("bytes")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function trans(string memory _str) external pure returns (bytes memory) {\n        return bytes(_str);\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓺-bytes-到-字符串-的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓺-bytes-到-字符串-的转换"}},[e._v("#")]),e._v(" ⓺ bytes 到 字符串 的转换")]),e._v(" "),t("p",[e._v("转换方法: 可以使用 "),t("code",[e._v("string()")]),e._v(" 构造函数将 "),t("code",[e._v("bytes")]),e._v(" 转换为字符串。")]),e._v(" "),t("p",[e._v("注意: 字节数组分为动态大小和固定大小的。如果是固定大小字节数组，需要先转为动态大小字节数组。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("动态大小字节数组")]),e._v(" —> "),t("code",[e._v("string")])]),e._v(" "),t("li",[t("code",[e._v("固定大小字节数组")]),e._v(" —> "),t("code",[e._v("动态大小字节数组")]),e._v(" —> "),t("code",[e._v("string")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    string public data1;\n    string public data2;\n\n    // `动态大小字节数组` —> `string`\n    function trans1() external {\n        bytes memory bstr = new bytes(2);\n        bstr[0] = "a";\n        bstr[1] = "b";\n        data1 = string(bstr);\n    }\n\n    // `固定大小字节数组` —> `动态大小字节数组` —> `string`\n    function trans2() external {\n        // 固定大小字节数组\n        bytes2 ab = 0x6162;\n\n        // `固定大小字节数组` —> `动态大小字节数组`\n        bytes memory temp = new bytes(ab.length); // 可变字节数组创建方式\n        for (uint256 i = 0; i < ab.length; i++) {\n            temp[i] = ab[i];\n        }\n\n        // `动态大小字节数组` —> `string`\n        data2 = string(temp);\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓻-比较-2-个-bytes-值是否相等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓻-比较-2-个-bytes-值是否相等"}},[e._v("#")]),e._v(" ⓻ 比较 2 个 bytes 值是否相等")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes welcome1 = bytes("Welcome");\n    bytes welcome2 = bytes("Welcome");\n\n    function test1() public view returns (bool) {\n        return keccak256(welcome2) == keccak256(welcome1);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_3-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-string"}},[e._v("#")]),e._v(" 3.string")]),e._v(" "),t("p",[e._v("Solidity 中，字符串值使用双引号("),t("code",[e._v('""')]),e._v(")或单引号("),t("code",[e._v("''")]),e._v(")包括，字符串类型用 string 表示。"),t("code",[e._v("string")]),e._v(" 和 "),t("code",[e._v("bytes")]),e._v(" 类型的变量是特殊的数组，是引用类型。")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-21"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-21"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=34",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: string")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=nnJgvvObd5o&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=34",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: string")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-格式"}},[e._v("#")]),e._v(" ⓵ 格式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\"abc\"\n'hello'\n")])])]),t("p",[e._v("例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract For {\n    string public a = \"a\" \"b\" \"c\";\n    string public b = \"abc\";\n    string public c = 'x' 'y' 'z';\n    string public d = 'xyz';\n}\n")])])]),t("h4",{attrs:{id:"⓶-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-属性"}},[e._v("#")]),e._v(" ⓶ 属性")]),e._v(" "),t("p",[e._v("string 并没有获取其字符串长度的 length 属性; 也没提供获取某个索引字节码的索引属性。")]),e._v(" "),t("p",[e._v("我们可以通过把 string 转换成 "),t("code",[e._v("bytes")]),e._v("，借助"),t("code",[e._v("bytes")]),e._v(" 的属性。")]),e._v(" "),t("p",[e._v("例子: 下面是使用 "),t("code",[e._v("getLength()")]),e._v(" 获取长度，使用"),t("code",[e._v("modi()")]),e._v("修改字符串，使用 "),t("code",[e._v("getIndexValue()")]),e._v(" 获取字符串的指定索引的数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    string public welcome = "1.Welcome";\n\n    function getLength() public view returns (uint256 welcomeLength) {\n        welcomeLength = bytes(welcome).length;\n    }\n\n    function getIndexValue(uint256 _index) public view returns (string memory) {\n        bytes1 temp1 = bytes(welcome)[_index]; // 返回固定长度的 bytes1\n        bytes memory temp2 = new bytes(1); // 可变字节数组创建方式\n        temp2[0] = temp1;\n        return string(temp2);\n    }\n\n    function modi() public {\n        bytes(welcome)[0] = bytes1("2");\n    }\n}\n')])])]),t("ul",[t("li",[e._v("获取字符串的长度\n"),t("ul",[t("li",[t("code",[e._v("bytes(str).length")]),e._v(":以字节长度表示字符串的长度")])])]),e._v(" "),t("li",[e._v("某个字符串索引的字节码\n"),t("ul",[t("li",[t("code",[e._v("bytes1 temp1 = bytes(str)[_index];")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getIndexValue(uint256 _index) public view return(string memory) {\n    bytes1 temp1 = bytes(welcome)[_index]; // 返回固定长度的 bytes1\n    bytes memory temp2 = new bytes(1); // 可变字节数组创建方式\n    temp2[0] = temp1;\n    return string(temp2);\n}\n")])])])])])]),e._v(" "),t("li",[e._v("修改字符串\n"),t("ul",[t("li",[t("code",[e._v("bytes(s)[7] = 'x'")])])])])]),e._v(" "),t("h4",{attrs:{id:"⓷-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-方法"}},[e._v("#")]),e._v(" ⓷ 方法")]),e._v(" "),t("p",[e._v("Solidity string 本身并没有操作函数，需要借助全局的函数")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("字符串拼接")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("string.concat()")])]),e._v(" "),t("li",[e._v("如果不使用参数调用 string.concat 将返回空数组。")])])]),e._v(" "),t("li",[t("p",[e._v("将 bytes 转换到 字符串")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("string()")])])])]),e._v(" "),t("li",[t("p",[e._v("将 字符串 转换到 bytes")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytes()")])])])]),e._v(" "),t("li",[t("p",[e._v("比较两个字符串")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2))")])]),e._v(" "),t("li",[t("code",[e._v("keccak256(bytes(s1)) == keccak256(bytes(s2))")]),e._v(":更省 gas")])])]),e._v(" "),t("li",[t("p",[e._v("有没有如下办法呢？")]),e._v(" "),t("ul",[t("li",[e._v("push")]),e._v(" "),t("li",[e._v("pop")]),e._v(" "),t("li",[e._v("delete")]),e._v(" "),t("li",[t("code",[e._v("x[start:end]")])])])])]),e._v(" "),t("h4",{attrs:{id:"⓸-字符串拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-字符串拼接"}},[e._v("#")]),e._v(" ⓸ 字符串拼接")]),e._v(" "),t("p",[e._v("可以使用 "),t("code",[e._v("string.concat")]),e._v(" 连接任意数量的 string 字符串。 该函数返回一个 "),t("code",[e._v("string memory")]),e._v(" ，包含所有参数的内容，无填充方式拼接在一起。 如果你想使用不能隐式转换为 string 的其他类型作为参数，你需要先把它们转换为 string。")]),e._v(" "),t("p",[t("strong",[e._v("string.concat 例子")])]),e._v(" "),t("p",[e._v("输入字符串，输出拼接后的字符串")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    string public welcome = "Welcome";\n\n    // 写一个 welcome username 的小方法\n    // Welcome Anbang!\n    function test(string memory name_)\n        public\n        view\n        returns(string memory concatString){\n            bytes memory bs = bytes("!");\n            // welcome + name_ + bs\n            // 内部是使用字符串，如果是bytes，需要转换为 string 类型\n            concatString = string.concat(\n                welcome,\n                name_,\n                string(bs)\n            );\n        }\n}\n')])])]),t("p",[e._v("如果你不使用参数调用 "),t("code",[e._v("string.concat")]),e._v(" 或 "),t("code",[e._v("bytes.concat")]),e._v(" 将返回空数组。")]),e._v(" "),t("p",[e._v("推荐了解：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 这是一种 string.concat 方法的实现\nfunction strConcat(string memory _a, string memory _b)\n    internal\n    pure\n    returns (string memory)\n{\n    bytes memory _ba = bytes(_a);\n    bytes memory _bb = bytes(_b);\n    string memory ret = new string(_ba.length + _bb.length);\n    bytes memory bret = bytes(ret);\n    uint256 k = 0;\n    for (uint256 i = 0; i < _ba.length; i++) bret[k++] = _ba[i];\n    for (uint256 i = 0; i < _bb.length; i++) bret[k++] = _bb[i];\n    return string(ret);\n}\n")])])]),t("h4",{attrs:{id:"⓹-bytes-和-字符串-之间转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-bytes-和-字符串-之间转换"}},[e._v("#")]),e._v(" ⓹ bytes 和 字符串 之间转换")]),e._v(" "),t("p",[e._v("见 bytes 章节中的内容，这里不再重复介绍。")]),e._v(" "),t("h4",{attrs:{id:"⓺-比较两个字符串是否相等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓺-比较两个字符串是否相等"}},[e._v("#")]),e._v(" ⓺ 比较两个字符串是否相等")]),e._v(" "),t("p",[e._v("比较两个字符串借助 keccak256 来使用:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2))")])]),e._v(" "),t("li",[t("code",[e._v("keccak256(bytes(s1)) == keccak256(bytes(s2))")]),e._v(" : 更推荐这个，省 gas")])]),e._v(" "),t("p",[e._v("注意：上面 "),t("code",[e._v("abi.encodePacked")]),e._v(" 的返回值是 "),t("code",[e._v("bytes")]),e._v(" 类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    string public hello = "Hello";\n\n    // string 转成 bytes\n    function test1() public view\n        returns (bytes memory,bytes memory) {\n        return (abi.encodePacked(hello),bytes(hello));\n    }\n\n    function test2(string calldata hello_) public view returns (bool) {\n        // 这里只要能够转换成 bytes的都可以。\n        // 更多方法可以参考后面介绍的 全局 ABI 编码函数\n        return\n            keccak256(abi.encodePacked(hello)) ==\n            keccak256(abi.encodePacked(hello_));\n    }\n\n    function test3(string calldata hello_) public view returns (bool) {\n        return keccak256(bytes(hello)) == keccak256(bytes(hello_));\n    }\n\n}\n')])])]),t("p",[e._v("几个常用的全局 ABI 编码函数的简单用法介绍：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    string public hello = "Hello Anbang";\n    bytes public temp1 = abi.encodePacked(hello);\n    bytes public temp2 = abi.encode(hello);\n\n    bytes public temp3 = abi.encodeWithSignature(hello);\n    bytes public temp4 = abi.encodeWithSignature("Hello Anbang1");\n}\n')])])]),t("p",[e._v("如果比较多个参数的拼接字符串是否相等，谨慎使用 "),t("code",[e._v("abi.encodePacked")]),e._v("了，因为紧压缩机制的问题。详细可以在 "),t("code",[e._v("abi.encodePacked")]),e._v(" 中了解")]),e._v(" "),t("h3",{attrs:{id:"_4-mapping-映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-mapping-映射"}},[e._v("#")]),e._v(" 4.mapping 映射")]),e._v(" "),t("p",[e._v("mapping 可以看作一个哈希表，会执行虚拟化初始化，使所有可能的值都是该类型的默认值。其实 mapping 并不是一个哈希表，没有 key 集合，也没有 value 集合，所以 mapping 没办法遍历/迭代。")]),e._v(" "),t("p",[e._v("数组中找某一个值，需要循环遍历，这是很消耗 Gas 的，而使用 mapping 就可以很好的解决这个问题。映射可以很方便的获取某个值。映射并没有做迭代的方法。")]),e._v(" "),t("ul",[t("li",[e._v("映射声明")]),e._v(" "),t("li",[e._v("映射的设置，获取，删除")])]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-22"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-22"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=35",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: mapping 映射")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=bNc2nJX4cT0&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=35",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: mapping 映射")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-本节重点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-本节重点"}},[e._v("#")]),e._v(" ⓵ 本节重点")]),e._v(" "),t("p",[e._v("声明映射类型的语法："),t("code",[e._v("mapping(_KeyType => _ValueType)")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("_KeyType")]),e._v("：可以是任何内置类型，或者 bytes 和 字符串。\n"),t("ul",[t("li",[e._v("键是唯一的，其赋值方式为："),t("code",[e._v("map[a]=test")]),e._v("; 意思是键为 a,值为 test；。")])])]),e._v(" "),t("li",[t("code",[e._v("_ValueType")]),e._v("： 可以是任何类型，用户自定义类型也可以。")]),e._v(" "),t("li",[e._v("mapping 支持嵌套。")]),e._v(" "),t("li",[e._v("映射的数据位置(data location)只能是 "),t("code",[e._v("storage")]),e._v("，通常用于状态变量。")]),e._v(" "),t("li",[t("code",[e._v("mapping")]),e._v(" 不能用于 "),t("code",[e._v("public")]),e._v(" 函数的参数或返回结果\n"),t("ul",[t("li",[e._v("映射只能是 storage 的数据位置，因此只允许作为状态变量 或 作为函数内的 storage 引用 或 作为库函数的参数。它们不能用合约公有函数的参数或返回值。")]),e._v(" "),t("li",[e._v("这些限制同样适用于包含映射的数组和结构体。")])])]),e._v(" "),t("li",[e._v("映射可以标记为 "),t("code",[e._v("public")]),e._v("，Solidity 自动为它创建 getter 函数。\n"),t("ul",[t("li",[t("code",[e._v("_KeyType")]),e._v(" 将成为 "),t("code",[e._v("getter")]),e._v(" 的必须参数，并且 getter 会返回 "),t("code",[e._v("_ValueType")]),e._v("。")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("ValueType")]),e._v(" 是一个映射。这时在使用 "),t("code",[e._v("getter")]),e._v(" 时将需要递归地传入每个 "),t("code",[e._v("KeyType")]),e._v(" 参数，")])])])]),e._v(" "),t("p",[e._v("问答题：为什么映射不能像哈希表一样遍历？")]),e._v(" "),t("p",[e._v("映射与哈希表不同的地方："),t("strong",[e._v("在映射中,并不存储 key，而是存储它的 "),t("code",[e._v("keccak256")]),e._v(" 哈希值，从而便于查询实际的值")]),e._v("。正因为如此，映射是没有长度的，也没有 "),t("code",[e._v("key 的集合")]),e._v("或 "),t("code",[e._v("value 的集合")]),e._v("的概念。映射只能是存储的数据位置，因此只允许作为状态变量或作为函数内的存储引用 或 作为库函数的参数。")]),e._v(" "),t("h4",{attrs:{id:"⓶-创建格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-创建格式"}},[e._v("#")]),e._v(" ⓶ 创建格式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Mapping {\n    // 普通\n    mapping(address => uint256) public balances;\n\n    // 嵌套\n    mapping(address => mapping(address => bool)) public friends;\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 不能像 array 一样返回所有\ncontract Demo {\n    mapping(address => uint256) public balances;\n\n    function getAllBalance() public view\n        returns(mapping(address => uint256) memory){\n        return balances;\n    }\n\n}\n")])])]),t("h4",{attrs:{id:"⓷-如何获取-设置-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-如何获取-设置-删除"}},[e._v("#")]),e._v(" ⓷ 如何获取-设置-删除")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Mapping {\n    // 普通\n    mapping(address => uint256) public balances;\n\n    // 嵌套\n    mapping(address => mapping(address => bool)) public friends;\n\n    constructor() {\n        balances[msg.sender] = 100;\n    }\n\n    function blanceGet() external view returns (uint256) {\n        // 获取\n        return balances[msg.sender];\n    }\n\n    function blanceSet(uint256 amount) external {\n        // 设置\n        balances[msg.sender] += amount;\n    }\n\n    function blanceDelete() external {\n        // 删除\n        delete balances[msg.sender];\n    }\n\n    function friendGet() external view returns (bool) {\n        // 获取\n        return friends[msg.sender][address(0)];\n    }\n\n    function friendSet() external {\n        // 设置\n        friends[msg.sender][address(0)] = true;\n    }\n\n    function friendDelete() external {\n        // 删除\n        delete friends[msg.sender][address(0)];\n        // delete friends[msg.sender];\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓸-作为局部变量的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-作为局部变量的使用"}},[e._v("#")]),e._v(" ⓸ 作为局部变量的使用")]),e._v(" "),t("p",[t("code",[e._v("mapping")]),e._v(" 类型可以用做局部变量，但只能引用状态变量，而且存储位置为 storage。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 作为局部变量的使用\ncontract Demo {\n    // 普通 mapping\n    mapping(address => uint256) public balances; // 普通mapping\n\n    // storage: 改变内部 ref，会影响 balances 的值\n    // 不能声明为 memory\n    function updataBalance() public returns(uint256){\n        // mapping(address=>uint256) memory ref = balances; // ❌\n        mapping(address=>uint256) storage ref = balances;\n        ref[msg.sender] += 3;\n        return ref[msg.sender];\n    }\n\n}\n")])])]),t("h4",{attrs:{id:"⓹-在-erc20-token-中的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-在-erc20-token-中的用法"}},[e._v("#")]),e._v(" ⓹ 在 ERC20 token 中的用法")]),e._v(" "),t("p",[e._v("下面的例子是　 ERC20 token 　的简单版本． "),t("code",[e._v("_allowances")]),e._v(" 是一个嵌套 mapping 的例子． "),t("code",[e._v("_allowances")]),e._v(" 用来记录其他的账号，可以允许从其账号使用多少数量的币．")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// mapping 在 ERC20 token 中的用法\ncontract MappingExample {\n    // 余额\n    mapping(address => uint256) private _balances;\n    // 授权:\n    // 授权人 - 代理人 - 授权金额\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    // 获取：授权金额\n    function allowance(address owner, address spender)\n        public\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    // 检查：授权金额大于等于需要操作的金额\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public returns (bool) {\n        require(\n            _allowances[sender][msg.sender] >= amount,\n            "ERC20: Allowance not high enough."\n        );\n        _allowances[sender][msg.sender] -= amount; // 设置额度\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n    // 设置：\n    function approve(address spender, uint256 amount) public returns (bool) {\n        require(spender != address(0), "ERC20: approve to the zero address");\n\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), "ERC20: transfer from the zero address");\n        require(recipient != address(0), "ERC20: transfer to the zero address");\n        require(_balances[sender] >= amount, "ERC20: Not enough funds.");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓺-可迭代映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓺-可迭代映射"}},[e._v("#")]),e._v(" ⓺ 可迭代映射")]),e._v(" "),t("p",[e._v("遍历所有 Mapping 内的数据，（Mapping 配合 array ）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    mapping(address => uint256) public balances;\n    // 用于检查:地址是否已经存在于 balancesKey\n    mapping(address => bool) public balancesInserted;\n    address[] public balancesKey; // 所有地址\n\n    // 设置\n    function set(address ads_,uint256 amount_) external{\n        balances[ads_] = amount_;\n        // 1.检查\n        if(!balancesInserted[ads_]){\n            // 2.修改检查条件\n            balancesInserted[ads_] = true;\n            // 3.正在的操作\n            balancesKey.push(ads_);\n        }\n    }\n    // 获取\n    function get(uint256 index_) external view returns(uint256){\n        require(index_<balancesKey.length,"index_ error");\n        return balances[balancesKey[index_]];\n    }\n    // 获取所有\n    function totalAddress() external view returns(uint256){\n        return balancesKey.length;\n    }\n\n    // 获取第一个值\n    function first() external view returns(uint256){\n        return balances[balancesKey[0]];\n    }\n    // 最后一个值\n    function latest() external view returns(uint256){\n        return balances[balancesKey[balancesKey.length-1]];\n    }\n}\n')])])]),t("ul",[t("li",[t("p",[e._v("更完善的实现: https://github.com/ethereum/dapp-bin/blob/master/library/iterable_mapping.sol")])]),e._v(" "),t("li",[t("p",[e._v("更新的实现: https://learnblockchain.cn/docs/solidity/types.html#iterable-mappings")])])]),e._v(" "),t("h3",{attrs:{id:"_5-struct-结构体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-struct-结构体"}},[e._v("#")]),e._v(" 5.struct 结构体")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-23"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-23"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=36",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: struct 结构体")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=US5_yCXw1kE&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=36",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 7 节引用类型: struct 结构体")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-创建语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-创建语法"}},[e._v("#")]),e._v(" ⓵ 创建语法")]),e._v(" "),t("p",[e._v("要定义结构体，使用 "),t("code",[e._v("struct")]),e._v(" 关键字。"),t("code",[e._v("struct")]),e._v(" 关键字定义了一个新的数据类型，包含多个成员。结构体是可以将多个变量进行编组的自定义类型")]),e._v(" "),t("p",[e._v("struct 语句的格式如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("struct StructName {\n   type1 typeName1;\n   type2 typeName2;\n   type3 typeName3;\n}\n")])])]),t("p",[e._v("例子:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    Book public book = Book("Solidity", "Anbang", 1);\n}\n')])])]),t("h4",{attrs:{id:"⓶-三种创建方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-三种创建方法"}},[e._v("#")]),e._v(" ⓶ 三种创建方法")]),e._v(" "),t("p",[e._v("基础方式："),t("code",[e._v("Test t = Test(1,2);")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Structs {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n\n    uint256 private bookId;\n    Book[] public bookcase; // 书柜:数组类型\n\n    function setA1Bookcase() external {\n        // 第1种生成方法：顺序一定要和结构一致\n        Book memory temp = Book(\n            unicode"Solidity 高级程序设计",\n            "Anbang",\n            ++bookId\n        );\n        bookcase.push(temp);\n    }\n\n    // ✅ 最优方案，推荐: 先写入内存，然后push\n    function setB1Bookcase() external {\n        // 第 2 种生成\n        Book memory temp = Book({\n            title: unicode"Solidity 高级程序设计",\n            author: "Anbang",\n            book_id: ++bookId\n        });\n        bookcase.push(temp);\n    }\n\n    function setB2Bookcase() external {\n        // 第 2 种生成: 直接 push，无变量\n        bookcase.push(\n            Book({\n                title: unicode"Solidity 高级程序设计",\n                author: "Anbang",\n                book_id: ++bookId\n            })\n        );\n    }\n\n    function setC1Bookcase() external {\n        // 第 3 种生成: 推荐\n        Book memory temp;\n        temp.title = unicode"Solidity 高级程序设计";\n        temp.author = "Anbang";\n        temp.book_id = ++bookId;\n        bookcase.push(temp);\n    }\n}\n')])])]),t("p",[e._v("总结：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 第 1 种生成\nBook memory solidity1 = Book(unicode"Solidity 高级程序设计", "Anbang", ++bookId);\n\n// 第 2 种生成\nBook memory solidity2 = Book({\n    title: unicode"Solidity 高级程序设计",\n    author: "Anbang",\n    book_id: ++bookId,\n});\n\n// 第 3 种生成\nBook memory temp;\ntemp.title = unicode"Solidity 高级程序设计";\ntemp.author = "Anbang";\ntemp.book_id = ++bookId;\n')])])]),t("h4",{attrs:{id:"⓷-读取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-读取"}},[e._v("#")]),e._v(" ⓷ 读取")]),e._v(" "),t("p",[e._v("函数内仅读取结构体，使用 memory 和 storage 区别:")]),e._v(" "),t("ol",[t("li",[e._v("函数内读取并返回,如果使用 memory 变量接收:\n"),t("ol",[t("li",[e._v("从状态变量拷贝到内存中，然后内存中的变量拷贝到返回值。两次拷贝，消耗 gas 多")]),e._v(" "),t("li",[t("code",[e._v("Book memory _book = book;")])])])]),e._v(" "),t("li",[e._v("函数内读取并返回，如果使用 storage 变量接收:\n"),t("ol",[t("li",[e._v("直接从状态变量读取，状态变量拷贝到返回值。1 次拷贝，消耗 gas 小")])])]),e._v(" "),t("li",[e._v("总结: 读取时候推荐使用 "),t("code",[e._v("storage")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 读取\ncontract Demo {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    Book public book = Book("Solidity", "Anbang", 1);\n\n    // memory  30029 gas\n    // 函数内读取并返回：使用 memory 变量接收\n    //  两次拷贝，所以消耗的 gas 多\n    function get1() external view\n        returns(\n            string memory,\n            string memory,\n            uint256\n        )\n    {\n         // 从状态变量拷贝到内存中\n        Book memory _book = book;\n        // 内存中的变量拷贝到返回值；2次拷贝\n        return (_book.title,_book.author,_book.book_id);\n    }\n\n    // storage 29983 gas\n    // 函数内读取并返回：使用 storage 变量接收\n    function get2() external view\n        returns(\n            string memory,\n            string memory,\n            uint256\n        )\n    {\n        // 从状态变量读取，没有拷贝的行为\n        Book storage _book = book;\n\n        // 状态变量拷贝到返回值。1次拷贝\n        return (_book.title,_book.author,_book.book_id);\n    }\n\n}\n')])])]),t("h4",{attrs:{id:"⓸-修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-修改"}},[e._v("#")]),e._v(" ⓸ 修改")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 修改\ncontract Demo {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    Book public book = Book("Solidity", "Anbang", 1);\n\n    function modi() external {\n        book.title = "Solidity 666";\n    }\n}\n')])])]),t("p",[e._v("函数内读取时，标记 "),t("code",[e._v("memory")]),e._v(" / "),t("code",[e._v("storage")]),e._v(",会产生完全不同的结果；")]),e._v(" "),t("p",[e._v("特别注意："),t("strong",[e._v("如果结构体内包含 "),t("code",[e._v("mapping")]),e._v(" 类型，则必须使用 "),t("code",[e._v("storage")]),e._v("，不可以使用 memeory.")]),e._v("，否则报错 "),t("code",[e._v("Type struct ContractName.StructName memory is only valid in storage because it contains a (nested) mapping.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    Book public book = Book("Solidity", "Anbang", 1);\n\n    // view\n    function test1() external view {\n        Book memory bookLocal = book;\n        bookLocal.author = "Anbang666";\n    }\n    // 不能用view：因为写状态变量了\n    function test2() external {\n        Book storage bookLocal = book;\n        bookLocal.author = "Anbang777";\n    }\n}\n')])])]),t("p",[e._v("函数内获取并修改结构体：")]),e._v(" "),t("ul",[t("li",[e._v("因为要修改状态变量，所以使用 storage")]),e._v(" "),t("li",[e._v("函数内直接修改变量; 在修改一个属性时比较省 Gas 费用")]),e._v(" "),t("li",[e._v("函数内先获取存储到 storage 再修改:修改多个属性的时候比较省 Gas 费用")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Structs {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    uint256 private bookId;\n    Book public book1; // Book类型\n    Book public book2; // Book类型\n\n    mapping(address => Book) public students; // mapping 类型\n\n    // 设置 book1\n    function setBook1() external {\n        Book memory temp;\n        temp.title = unicode"Solidity 高级程序设计";\n        temp.author = "Anbang";\n        temp.book_id = ++bookId;\n        book1 = temp;\n    }\n\n    // 设置 book2\n    // ✅ 最优方案，推荐:直接修改\n    function setBook2() external {\n        book2.title = unicode"Solidity 高级程序设计";\n        book2.author = "Anbang";\n        book2.book_id = ++bookId;\n    }\n\n    // ✅ 最优方案，推荐:直接修改\n    function set1Student() external {\n        Book storage temp = students[msg.sender];\n        temp.title = unicode"Solidity 高级程序设计";\n        temp.author = "Anbang";\n        temp.book_id = ++bookId;\n    }\n\n    function set2Student() external {\n        Book memory temp;\n        temp.title = unicode"Solidity 高级程序设计";\n        temp.author = "Anbang";\n        temp.book_id = ++bookId;\n        students[msg.sender] = temp;\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓹-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-删除"}},[e._v("#")]),e._v(" ⓹ 删除")]),e._v(" "),t("p",[e._v("删除结构体的变量，仅仅是重置数据，并不是完全的删除。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n    Book public book = Book("Solidity", "Anbang", 1);\n\n    function del() external\n    {\n        delete book;\n    }\n}\n')])])]),t("h2",{attrs:{id:"_8️⃣-类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8️⃣-类型转换"}},[e._v("#")]),e._v(" 8️⃣ 类型转换")]),e._v(" "),t("p",[e._v("Solidity 允许类型之间进行隐式转换和显式转换。")]),e._v(" "),t("p",[t("strong",[e._v("前文回顾")]),e._v(": "),t("code",[e._v("bytes1")]),e._v(" 对应 "),t("code",[e._v("uint8")]),e._v("，对应两位连续的十六进制数字 "),t("code",[e._v("0xXX")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-24"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-24"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=37",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 8 节: 类型转换")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=uJ0DDcietlw&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=37",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 8 节: 类型转换")])])]),e._v(" "),t("h3",{attrs:{id:"_1-隐式转换-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-隐式转换-2"}},[e._v("#")]),e._v(" 1.隐式转换")]),e._v(" "),t("h4",{attrs:{id:"⓵-发生场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-发生场景"}},[e._v("#")]),e._v(" ⓵ 发生场景")]),e._v(" "),t("p",[e._v("在"),t("strong",[e._v("赋值")]),e._v(", "),t("strong",[e._v("函数参数传递")]),e._v("以及应用运算符时，会发生隐式转换。")]),e._v(" "),t("h4",{attrs:{id:"⓶-转换的标准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-转换的标准"}},[e._v("#")]),e._v(" ⓶ 转换的标准")]),e._v(" "),t("ol",[t("li",[e._v("值类型")]),e._v(" "),t("li",[e._v("源类型必须是目标类型的子集。")])]),e._v(" "),t("p",[e._v("例如，"),t("code",[e._v("uint8")]),e._v(" 可以转换为 "),t("code",[e._v("uint16")]),e._v("/"),t("code",[e._v("uint24")]),e._v("../"),t("code",[e._v("uint256")]),e._v("，因为"),t("code",[e._v("uint8")]),e._v("是"),t("code",[e._v("uint16")]),e._v("这些类型的子集。但是 "),t("code",[e._v("int8")]),e._v(" 不可以转换为 "),t("code",[e._v("uint256")]),e._v("，因为 "),t("code",[e._v("int8")]),e._v(" 可以包含 "),t("code",[e._v("uint256")]),e._v(" 中不允许的负值，比如 "),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"⓷-相交集合的类型-不能隐式转换。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-相交集合的类型-不能隐式转换。"}},[e._v("#")]),e._v(" ⓷ 相交集合的类型，不能隐式转换。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    int8 public a1 = 3;\n\n    // Type int8 is not implicitly convertible to expected type uint16.\n    // uint16 public a2 = a1;\n\n    uint8 public b1 = 3;\n    uint16 public b2 = b1;\n}\n")])])]),t("h4",{attrs:{id:"⓸-把整数字面量赋值给整型时-不能超出范围而发生截断-否则会报错。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-把整数字面量赋值给整型时-不能超出范围而发生截断-否则会报错。"}},[e._v("#")]),e._v(" ⓸ 把整数字面量赋值给整型时，不能超出范围而发生截断，否则会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo1 {\n    uint8 public a = 12; // no error\n    uint32 public b = 1234; // no error\n    uint16 public c = 0x01;\n\n    // Type int_const 123456 is not implicitly convertible\n    // to expected type uint8. Literal is too large to fit in uint8.\n    // uint8 d = 123456;\n}\n")])])]),t("h4",{attrs:{id:"⓹-函数参数传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-函数参数传递"}},[e._v("#")]),e._v(" ⓹ 函数参数传递")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 函数的传参\ncontract Demo {\n    uint256 public a;\n\n    function test1(uint256 u_) public {\n        a = u_;\n    }\n\n    function test2() external {\n        uint8 temp = 3;\n        test1(temp); //\n    }\n}\n")])])]),t("p",[e._v("数组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 函数的传参\ncontract Demo {\n    uint256 public a;\n\n    function test1(uint256[3] memory u_) public {\n        a = u_[0];\n    }\n\n    // 禁止的：\n    function test2() external {\n        // function call. Invalid implicit conversion from uint8[3]\n        // memory to uint256[3] memory requested.\n        // test1([1,2,3]);\n        test1([uint256(1),uint256(2),uint256(3)]);\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓺-运算符应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓺-运算符应用"}},[e._v("#")]),e._v(" ⓺ 运算符应用")]),e._v(" "),t("p",[e._v("则编译器将尝试将"),t("strong",[e._v("其中一个操作数")]),e._v("隐式转换为"),t("strong",[e._v("另一个操作数的类型")]),e._v("（赋值也是如此）。 这意味着操作始终以操作数之一的类型执行。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 运算符\ncontract Demo {\n    uint8 public  x = 1;\n    uint16 public  y = 2;\n\n    // uint8 + uint16 => uint16 + uint16 = uint16\n    // uint16 => uint32\n    uint32 public  z = x + y;\n}\n")])])]),t("p",[e._v("在上面的示例中，加法的操作数 x 和 y 没有相同的类型，uint8 可以被隐式转换为 uint16，相反却不可以。 因此在执行加法之前，将 uint8 转换为 uint16 的类型，结果类型是 uint16。因为它被赋值给 uint32 类型的变量，又进行了另一个类似逻辑的隐式转换.")]),e._v(" "),t("h3",{attrs:{id:"_2-显式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-显式转换"}},[e._v("#")]),e._v(" 2.显式转换")]),e._v(" "),t("p",[e._v("可以使用类型关键字，显式地将数据类型转换为另一种类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // uint8 => uint16\n    uint8 public a1 = 3;\n    uint16 public a2 = uint16(a1);\n\n    int8 public b1 = 3;\n    //Explicit type conversion not allowed from "int8" to "uint256".\n    // uint256 b2 = uint256(b1);\n}\n')])])]),t("h4",{attrs:{id:"⓵-int-uint-整型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-int-uint-整型转换"}},[e._v("#")]),e._v(" ⓵ int/uint 整型转换")]),e._v(" "),t("p",[e._v("整型加大数据位置是从左侧增加，减小数据位置也是从左侧移除；（"),t("strong",[e._v("整型是右对齐")]),e._v("）")]),e._v(" "),t("ul",[t("li",[e._v("整型转换成更大的类型，从左侧添加填充位。")]),e._v(" "),t("li",[e._v("整型转换成更小的类型，会丢失左侧数据。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // 整型转换成更大的类型，从左侧添加填充位。\n    // uint16 => uint32\n    uint16 public a1 = 22136;       // 等于 0x5678\n    uint32 public a2 = uint32(a1); // a2 = 22136\n\n    // uint16 => uint8\n    uint8 public a3 = uint8(a1); // b4 = 0x78\n    uint8 public a4 = 0x78;\n\n    // 整型转换成更小的类型，会丢失左侧数据。\n    // uint32 => uint16\n    uint32 public b1 = 0x12345678; // 0x12345678\n    uint16 public b2 = uint16(b1); // 0x5678 | b2 = 22136\n}\n")])])]),t("p",[t("strong",[e._v("整数显式转换为更大的类型")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint16 a = 0x1234;\nuint32 b = uint32(a); // b 为 0x00001234 now\n")])])]),t("p",[t("strong",[e._v("整数显式转换成更小的类型")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint32 a = 0x12345678;\nuint16 b = uint16(a); // 此时 b 的值是 0x5678\n")])])]),t("h4",{attrs:{id:"⓶-bytes-字节类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-bytes-字节类型转换"}},[e._v("#")]),e._v(" ⓶ bytes 字节类型转换")]),e._v(" "),t("p",[e._v("字节加大数据位置是从右侧增加，减小数据位置也是从右侧移除；（"),t("strong",[e._v("字节是左对齐")]),e._v("）")]),e._v(" "),t("ul",[t("li",[e._v("字节转换为更大的类型时，从右侧添加填充位。")]),e._v(" "),t("li",[e._v("字节转换到更小的类型时，丢失右侧数据。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // 字节转换为更大的类型时，从右侧添加填充位。\n    // bytes2 =>bytes4\n    bytes2 public a1 = 0x5678;\n    bytes4 public a2 = bytes4(a1); // a2 = 0x56780000\n\n    // 字节转换到更小的类型时，丢失右侧数据。\n    // bytes4 => bytes2\n    bytes4 public b1 = 0x12345678;\n    bytes2 public b2 = bytes2(b1); // b2 = 0x1234\n}\n")])])]),t("p",[t("strong",[e._v("bytes 显式转换成更小的类型")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bytes2 a = 0x1234;\nbytes1 b = bytes1(a); // b 为 0x12\n")])])]),t("p",[t("strong",[e._v("bytes 显式转换成更大的类型")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bytes2 a = 0x1234;\nbytes4 b = bytes4(a); // b 为 0x12340000\n")])])]),t("h4",{attrs:{id:"⓷-bytes-与-uint-转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-bytes-与-uint-转换"}},[e._v("#")]),e._v(" ⓷ bytes 与 uint 转换")]),e._v(" "),t("p",[e._v("只有当字节类型和整数类型大小相同时，才可以进行转换。")]),e._v(" "),t("p",[e._v("因为整数和定长字节数组在截断（或填充）时行为是不同的，如果要在不同的大小的整数和定长字节数组之间进行转换，"),t("strong",[e._v("必须使用一个中间类型来明确进行所需截断和填充的规则")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bytes2 a = 0x1234;\nuint32 b = uint16(a);           // b 为 0x00001234\nuint32 c = uint32(bytes4(a));   // c 为 0x12340000\n\nuint8  d = uint8(uint16(a));    // d 为 0x34\nuint8  e = uint8(bytes1(a));    // e 为 0x12\n")])])]),t("p",[t("strong",[e._v("1.bytes 转换成 uint")]),e._v(": "),t("strong",[e._v("先转类型，再转大小")])]),e._v(" "),t("ul",[t("li",[e._v("推荐先把 bytes 显示转换成数字类型后，再转换成更大或更小的数字")])]),e._v(" "),t("div",{staticClass:"language-code-block:: solidity extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// - `uint8`  等于两位连续的十六进制数字 `0xXX`\n// - `bytes1` 等于两位连续的十六进制数字 `0xXX`\n// - `bytes1` 等于 `uint8`\ncontract Demo1 {\n    // bytes => uint\n    bytes2 public a1 = 0x5678; // : 十进制数字 = 22136\n    bytes4 public a2 = bytes4(a1); // a2 = 0x56780000 : 十进制数字 = 1450704896\n    bytes1 public a3 = bytes1(a1); // a3 = 0x56 : 十进制数字 = 86\n\n    // -- 增大\n    // bytes 显示转换成数字后，显示转换更大的数字 (这里也可以隐式完成)\n    uint32 public a4 = uint32(uint16(a1)); // ✅ a4 = 0x00005678 : 十进制 = 22136\n    // bytes 显示转换成更大数字对应的的bytes，然后bytes显示转换成匹配的数字\n    uint32 public a5 = uint32(bytes4(a1)); // ❌ a5 = 0x56780000 : 十进制 = 1450704896\n\n    // -- 减小\n    // bytes 显示转换成数字后，显示转换成更小的数字\n    uint8 public a6 = uint8(uint16(a1)); // ✅ a6 = 0x78 : 十进制 = 120\n    // bytes 显示转换成更小数字对应的的bytes，然后bytes显示转换成匹配的数字\n    uint8 public a7 = uint8(bytes1(a1)); // ❌ a7 = 0x56 : 十进制 = 86\n}\n")])])]),t("p",[t("strong",[e._v("2.uint 转换成 bytes")]),e._v(": "),t("strong",[e._v("先转大小，再转类型")])]),e._v(" "),t("ul",[t("li",[e._v("推荐先把 uint 显示转换成更大 bytes 对应的 uint，然后 uint 再显示转换成匹配的 bytes")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo2 {\n    // uint => bytes\n    uint16 public b1 = 0x5678; // 0x5678 : 十进制 = 22136\n    uint32 public b2 = uint32(b1); // b2 = 0x00005678 : 十进制 = 22136\n    uint8 public b3 = uint8(b1); // b3 = 0x78 : 十进制 = 120\n    // -- 增大\n    // uint 显示转换成bytes类型后，再显示转换成更大或更小的bytes\n    bytes4 public b4 = bytes4(bytes2(b1)); // ❌ b4 = 0x56780000\n    // uint 显示转换成更大bytes对应的uint，然后uint再显示转换成匹配的bytes\n    bytes4 public b5 = bytes4(uint32(b1)); //  ✅ b5 = 0x00005678\n\n    // -- 减小\n    // uint 显示转换成bytes类型后，再显示转换成更大或更小的bytes\n    bytes1 public b6 = bytes1(bytes2(b1)); // ❌ b4 = 0x56\n    // uint 显示转换成更大bytes对应的uint，然后uint再显示转换成匹配的bytes\n    bytes1 public b7 = bytes1(uint8(b1)); // ✅ b4 = 0x78\n}\n")])])]),t("h4",{attrs:{id:"⓸-bytes-和-bytesn-之间转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-bytes-和-bytesn-之间转换"}},[e._v("#")]),e._v(" ⓸ bytes 和 bytesN 之间转换")]),e._v(" "),t("p",[t("code",[e._v("bytes")]),e._v(" 数组和 "),t("code",[e._v("bytes calldata")]),e._v(" 切片可以显示转换为固定长度的 bytes 类型("),t("code",[e._v("bytes1...bytes32")]),e._v(").")]),e._v(" "),t("ul",[t("li",[e._v("如果数组比固定长度的 bytes 类型长，则在末尾处会发生截断。")]),e._v(" "),t("li",[e._v("如果数组比目标类型短，它将在末尾用零填充。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    // 0x6162636465666768\n    bytes public bts = "abcdefgh";\n    bytes3 public b1 = bytes3(bts);\n    bytes8 public b2 = bytes8(bts);\n    bytes16 public b3 = bytes16(bts);\n    bytes32 public b4 = bytes32(bts);\n}\n')])])]),t("p",[t("strong",[e._v("补充")]),e._v("：使用切片也可以把数据从 bytes 转为 bytesN。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    // 0x6162636465666768\n    bytes public bts = "abcdefgh";\n\n    function f(bytes calldata bts_)\n        public\n        pure\n        returns (bytes3,bytes16)\n    {\n\n        bytes3 b1 = bytes3(bts_);\n        bytes16 b2 = bytes16(bts_[:8]);\n        return (b1, b2);\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓹-bytes-与-address-转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-bytes-与-address-转换"}},[e._v("#")]),e._v(" ⓹ bytes 与 address 转换")]),e._v(" "),t("p",[e._v("address 的格式是 "),t("code",[e._v("0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac")]),e._v("，是一个 "),t("strong",[e._v("bytes20")]),e._v(" 的数据。")]),e._v(" "),t("p",[e._v("地址是取 "),t("code",[e._v("bytes32")]),e._v(" 数据中的后 20 位。如果想删除前面的 12 位数据，可以使用 solidity assembly (内联汇编) 来截取，也可以借助 "),t("code",[e._v("uint")]),e._v(" 转换成更小的类型，会丢失左侧数据的特性来完成。")]),e._v(" "),t("p",[e._v("代码如下:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // 获取即将部署的地址\n    function getAddress(bytes memory bytecode, uint256 _salt)\n        external\n        view\n        returns (address)\n    {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff), // 固定字符串\n                address(this), // 当前工厂合约地址\n                _salt, // salt\n                keccak256(bytecode) //部署合约的 bytecode\n            )\n        );\n        // bytes 转换成 uint: 先转类型，再转大小\n        //      bytes32 => uint256 => uint160\n        // uint160 转 address\n        //      uint160 => address\n        return address(uint160(uint256(hash)));\n    }\n}\n")])])]),t("p",[e._v("前文介绍过编码的方式: "),t("code",[e._v("keccak256(abi.encodePacked())")]),e._v("，返回的是 "),t("code",[e._v("bytes32")]),e._v(" 类型。")]),e._v(" "),t("p",[e._v("这个小例子是"),t("strong",[e._v("合约部署合约")]),e._v("那章节中 create2 代码的一部分，相关的更多演示请查看 create2 创建。")]),e._v(" "),t("h3",{attrs:{id:"_3-数字转换成字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-数字转换成字符串"}},[e._v("#")]),e._v(" 3.数字转换成字符串")]),e._v(" "),t("h4",{attrs:{id:"本节配套视频-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-25"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=38",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 8 节: 类型转换 数字转换成字符串")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=BoiR3shgaic&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=38",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 8 节: 类型转换 数字转换成字符串")])])]),e._v(" "),t("h4",{attrs:{id:"⓵-直接借助-bytes-和-string-未完成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-直接借助-bytes-和-string-未完成"}},[e._v("#")]),e._v(" ⓵ 直接借助 bytes 和 string（未完成）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // `固定大小字节数组` —> `动态大小字节数组` —> `string`\n    function test(uint8 num_) public pure returns (bytes1 ab,string memory data) {\n        // 固定大小字节数组\n        ab = bytes1(num_);\n\n        // `固定大小字节数组` —> `动态大小字节数组`\n        bytes memory temp = new bytes(ab.length); // 可变字节数组创建方式\n        for (uint8 i = 0; i < ab.length; i++) {\n            temp[i] = ab[i];\n        }\n\n        // `动态大小字节数组` —> `string`\n        data = string(temp);\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓶-借助单个数字转换-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-借助单个数字转换-推荐"}},[e._v("#")]),e._v(" ⓶ 借助单个数字转换（推荐）")]),e._v(" "),t("p",[e._v("这种方法是借助将 0-9 的数字进行转换，然后超过十位的数字，通过 "),t("code",[e._v("%")]),e._v(" 来得到，并且拼接在一起。\n推荐方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function uintToString(uint256 _uint)\n        public\n        pure\n        returns (string memory str)\n    {\n        if (_uint == 0) return "0";\n        while (_uint != 0) {\n            //取模\n            uint256 remainder = _uint % 10;\n            //每取一位就移动一位，个位、十位、百位、千位……\n            _uint = _uint / 10;\n            //将字符拼接，注意字符位置\n            str =  string.concat(toStr(remainder), str);\n        }\n    }\n\n    function toStr(uint256 num_) internal pure returns (string memory) {\n        require(num_ < 10,"error");\n        bytes memory alphabet = "0123456789";\n        bytes memory str = new bytes(1);\n        str[0] = alphabet[num_];\n        return string(str);\n    }\n}\n')])])]),t("p",[e._v("上面代码的 toStr 千万不要写下面的这种垃圾代码，写下面这种垃圾是对自己职业的不尊重：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function toStr(uint8 step) external pure returns (string memory str) {\n        string memory str;\n        if (step == 0) {\n            str = "0";\n        } else if (step == 1) {\n            str = "1";\n        } else if (step == 2) {\n            str = "2";\n        } else if (step == 3) {\n            str = "3";\n        } else if (step == 4) {\n            str = "4";\n        } else {\n            str = "?";\n        }\n    }\n}\n')])])]),t("p",[e._v("toStr 的另外一种实现，推荐了解一下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    //这个函数最关键，比较取巧，用来将uint256类型的 0-9 数字转成字符\n    function toStr2(uint256 value) public pure returns (string memory) {\n        bytes memory alphabet = "0123456789abcdef";\n        //这里把数字转成了bytes32类型，但是因为我们知道数字是 0-9 ，所以前面其实都是填充了0\n        bytes memory data = abi.encodePacked(value);\n        bytes memory str = new bytes(1);\n        //所以最后一位才是真正的数字\n        uint256 i = data.length - 1;\n        str[0] = alphabet[uint256(uint8(data[i] & 0x0f))];\n        return string(str);\n    }\n}\n')])])]),t("h2",{attrs:{id:"_9️⃣-字面常量与基本类型的转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9️⃣-字面常量与基本类型的转换"}},[e._v("#")]),e._v(" 9️⃣ 字面常量与基本类型的转换")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-26"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-26"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=39",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 9 节: 字面常量与基本类型的转换")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=oRtB3wH5Z0I&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=39",target:"_blank",rel:"noreferrer"}},[e._v("第二章第 9 节: 字面常量与基本类型的转换")])])]),e._v(" "),t("h3",{attrs:{id:"_1-十进制和十六进制字面常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-十进制和十六进制字面常量"}},[e._v("#")]),e._v(" 1.十进制和十六进制字面常量")]),e._v(" "),t("p",[e._v("十进制和十六进制字面常量可以隐式转换为任何足以表示它而不会截断的整数类型：")]),e._v(" "),t("div",{staticClass:"language-solidity extra-class"},[t("pre",{pre:!0,attrs:{class:"language-solidity"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// SPDX-License-Identifier: MIT")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pragma")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("solidity")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("^")]),t("span",{pre:!0,attrs:{class:"token version number"}},[e._v("0.8.17")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("contract")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Demo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint8")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  可行")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint32")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1234")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 可行")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("uint16")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0x01")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// uint16 d = 0x123456; // 失败, 会截断为 0x3456")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("⚠️：在 0.8.0 之前,任何十进制和十六进制常量都可以显示转化为整型，不过从 0.8.0 开始，只有在匹配数据范围时，才能进行这个转换，就像隐式转换那样。")]),e._v(" "),t("h3",{attrs:{id:"_2-整型字面常量与-bytesn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-整型字面常量与-bytesn"}},[e._v("#")]),e._v(" 2.整型字面常量与 bytesN")]),e._v(" "),t("ul",[t("li",[e._v("十进制字面常量不能隐式转换为定长字节数组。")]),e._v(" "),t("li",[e._v("十六进制字面常量可以转换为定长字节数组，但仅当十六进制数字大小完全符合定长字节数组长度的时候。")]),e._v(" "),t("li",[e._v("零的"),t("strong",[e._v("十进制")]),e._v("和"),t("strong",[e._v("十六进制字面常量")]),e._v("都可以转换为任何定长字节数组类型，零值是例外，比较特殊")])]),e._v(" "),t("div",{staticClass:"language-solidity extra-class"},[t("pre",{pre:!0,attrs:{class:"language-solidity"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// SPDX-License-Identifier: MIT")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pragma")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("solidity")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("^")]),t("span",{pre:!0,attrs:{class:"token version number"}},[e._v("0.8.17")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("contract")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Demo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 十六进制")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0x1234")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 可行")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0x0012")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 可行")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// bytes2 public c = 0x12; // 0x12不可行 ,0x1200 可行，需要完全符合长度")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 十进制")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// bytes4 public x = 1; // 不可行")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// bytes2 public y = 2; // 不可行")]),e._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 0 和 0x0")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes4")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0x0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 可行")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes4")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" e "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 可行")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("h3",{attrs:{id:"_3-字符串字面常量与-bytesn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-字符串字面常量与-bytesn"}},[e._v("#")]),e._v(" 3.字符串字面常量与 bytesN")]),e._v(" "),t("p",[e._v("字符串字面常量和十六进制字符串字面常量可以隐式转换为定长字节数组（需要它们的字符数与字节类型的大小相匹配）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes2 public a = hex"1234"; // 可行\n    bytes2 public b = hex"12"; // 可行\n    bytes2 public c = "xy"; // 可行\n    bytes2 public d = "x"; // 可行\n    // bytes2 public e = hex"123"; // 不可行\n    // bytes2 public f = "xyz"; // 不可行\n}\n')])])]),t("h3",{attrs:{id:"_4-十六进制字面常量与地址类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-十六进制字面常量与地址类型"}},[e._v("#")]),e._v(" 4.十六进制字面常量与地址类型")]),e._v(" "),t("p",[e._v("通过校验和测试的正确大小的十六进制字面常量会作为 "),t("code",[e._v("address")]),e._v("类型。没有其他字面常量可以隐式转换为 "),t("code",[e._v("address")]),e._v(" 类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    address public ads1 = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac;\n    // address public ads2 = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ab; // ❌\n}\n")])])]),t("h2",{attrs:{id:"🆗-实战-1-todo-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-1-todo-list"}},[e._v("#")]),e._v(" 🆗 实战 1: Todo List")]),e._v(" "),t("p",[e._v("TodoList: 是类似便签一样功能的东西，记录我们需要做的事情，以及完成状态。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-27"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-27"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=40",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 1: Todo List")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=jkYlSW9XJjo&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=40",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 1: Todo List")])])]),e._v(" "),t("h3",{attrs:{id:"_1-需要完成的功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-需要完成的功能"}},[e._v("#")]),e._v(" 1.需要完成的功能")]),e._v(" "),t("ul",[t("li",[e._v("创建任务")]),e._v(" "),t("li",[e._v("修改任务名称\n"),t("ul",[t("li",[e._v("任务名写错的时候")])])]),e._v(" "),t("li",[e._v("修改完成状态：\n"),t("ul",[t("li",[e._v("手动指定完成或者未完成")]),e._v(" "),t("li",[e._v("自动切换\n"),t("ul",[t("li",[e._v("如果未完成状态下，改为完成")]),e._v(" "),t("li",[e._v("如果完成状态，改为未完成")])])])])]),e._v(" "),t("li",[e._v("获取任务")])]),e._v(" "),t("h3",{attrs:{id:"_2-思考代码内状态变量怎么安排"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-思考代码内状态变量怎么安排"}},[e._v("#")]),e._v(" 2.思考代码内状态变量怎么安排？")]),e._v(" "),t("p",[e._v("思考 1：思考任务 ID 的来源？")]),e._v(" "),t("p",[e._v("我们在传统业务里，这里的任务都会有一个任务 ID，在区块链里怎么实现？？")]),e._v(" "),t("p",[e._v("答：传统业务里，ID 可以是数据库自动生成的，也可以用算法来计算出来的，比如使用雪花算法计算出 ID 等。在区块链里我们使用数组的 index 索引作为任务的 ID，也可以使用自增的整型数据来表示。")]),e._v(" "),t("p",[e._v("思考 2: 我们使用什么数据类型比较好？")]),e._v(" "),t("p",[e._v("答：因为需要任务 ID，如果使用数组 index 作为任务 ID。则数据的元素内需要记录任务名称，任务完成状态，所以元素使用 struct 比较好。")]),e._v(" "),t("p",[e._v("如果使用自增的整型作为任务 ID，则整型 ID 对应任务，使用 mapping 类型比较符合。")]),e._v(" "),t("h3",{attrs:{id:"_3-演示代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-演示代码"}},[e._v("#")]),e._v(" 3.演示代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("contract Demo {\n    struct Todo {\n        string name;\n        bool isCompleted;\n    }\n    Todo[] public list; // 29414\n\n    // 创建任务\n    function create(string memory name_) external {\n        list.push(\n            Todo({\n                name:name_, // ,\n                isCompleted:false\n            })\n        );\n    }\n\n    // 修改任务名称\n    function modiName1(uint256 index_,string memory name_) external {\n        // 方法1: 直接修改，修改一个属性时候比较省 gas\n        list[index_].name = name_;\n    }\n\n    function modiName2(uint256 index_,string memory name_) external {\n        // 方法2: 先获取储存到 storage，在修改，在修改多个属性的时候比较省 gas\n        Todo storage temp = list[index_];\n        temp.name = name_;\n    }\n\n    // 修改完成状态1:手动指定完成或者未完成\n    function modiStatus1(uint256 index_,bool status_) external {\n        list[index_].isCompleted = status_;\n    }\n\n    // 修改完成状态2:自动切换 toggle\n    function modiStatus2(uint256 index_) external {\n        list[index_].isCompleted = !list[index_].isCompleted;\n    }\n\n    // 获取任务1: memory : 2次拷贝\n    // 29448 gas\n    function get1(uint256 index_) external view\n        returns(string memory name_,bool status_){\n        Todo memory temp = list[index_];\n        return (temp.name,temp.isCompleted);\n    }\n\n    // 获取任务2: storage : 1次拷贝\n    // 预期：get2 的 gas 费用比较低（相对 get1）\n    // 29388 gas\n    function get2(uint256 index_) external view\n        returns(string memory name_,bool status_){\n        Todo storage temp = list[index_];\n        return (temp.name,temp.isCompleted);\n    }\n\n}\n")])])]),t("h3",{attrs:{id:"_4-自己动手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-自己动手"}},[e._v("#")]),e._v(" 4. 自己动手")]),e._v(" "),t("p",[e._v("自动动手写一下，按照使用自增整型作为任务 ID，配合 mapping 实现上面逻辑。状态按照【未完成，进行中，已完成，已取消】四种状态来做。")]),e._v(" "),t("h2",{attrs:{id:"🆗-实战-2-众筹合约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-2-众筹合约"}},[e._v("#")]),e._v(" 🆗 实战 2: 众筹合约")]),e._v(" "),t("p",[e._v("众筹合约是一个募集资金的合约，在区块链上，我们是募集以太币，类似互联网业务的水滴筹。区块链早起的 ICO 就是类似业务。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-28"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-28"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=41",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 2: 众筹合约")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=lE5zPY4-OR8&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=41",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 2: 众筹合约")])])]),e._v(" "),t("h3",{attrs:{id:"_1-需求分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-需求分析"}},[e._v("#")]),e._v(" 1.需求分析")]),e._v(" "),t("p",[e._v("众筹合约分为两种角色：一个是受益人，一个是资助者。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 两种角色:\n//      受益人   beneficiary => address         => address 类型\n//      资助者   funders     => address:amount  => mapping 类型 或者 struct 类型\n")])])]),t("p",[e._v("状态变量按照众筹的业务：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 状态变量\n//      筹资目标数量    fundingGoal\n//      当前募集数量    fundingAmount\n//      资助者列表      funders\n//      资助者人数      fundersKey\n")])])]),t("p",[e._v("需要部署时候传入的数据:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//      受益人\n//      筹资目标数量\n")])])]),t("h3",{attrs:{id:"_2-演示代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-演示代码"}},[e._v("#")]),e._v(" 2.演示代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract CrowdFunding {\n    address public immutable beneficiary;   // 受益人\n    uint256 public immutable fundingGoal;   // 筹资目标数量\n\n    uint256 public fundingAmount;       // 当前的 金额\n    mapping(address=>uint256) public funders;\n\n    // 可迭代的映射\n    mapping(address=>bool) private fundersInserted;\n    address[] public fundersKey; // length\n\n    // 不用自销毁方法，使用变量来控制\n    bool public AVAILABLED = true; // 状态\n\n    // 部署的时候，写入受益人+筹资目标数量\n    constructor(address beneficiary_,uint256 goal_){\n        beneficiary = beneficiary_;\n        fundingGoal = goal_;\n    }\n\n    // 资助\n    //      可用的时候才可以捐\n    //      合约关闭之后，就不能在操作了\n    function contribute() external payable{\n        require(AVAILABLED,"CrowdFunding is closed");\n        funders[msg.sender] += msg.value;\n        fundingAmount += msg.value;\n        // 1.检查\n        if(!fundersInserted[msg.sender]){\n            // 2.修改\n            fundersInserted[msg.sender] = true;\n            // 3.操作\n            fundersKey.push(msg.sender);\n        }\n    }\n\n    // 关闭\n    function close() external returns(bool){\n        // 1.检查\n        if(fundingAmount<fundingGoal){\n            return false;\n        }\n        uint256 amount = fundingAmount;\n\n        // 2.修改\n        fundingAmount = 0;\n        AVAILABLED = false;\n\n        // 3. 操作\n        payable(beneficiary).transfer(amount);\n        return true;\n    }\n\n    function fundersLenght() public view returns(uint256){\n        return fundersKey.length;\n    }\n\n}\n')])])]),t("p",[e._v("上面的合约只是一个简化版的 众筹合约，但它已经足以让我们理解本节介绍的类型概念。")]),e._v(" "),t("h3",{attrs:{id:"_3-自己动手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-自己动手"}},[e._v("#")]),e._v(" 3.自己动手")]),e._v(" "),t("p",[e._v("上面写的是项目方角度的募集自己。如果是募集平台，肯定是会向 Todo List 那个练习中一样，是有众筹 ID 的；请按照众筹平台的角度来写一个众筹协议。")]),e._v(" "),t("ul",[t("li",[e._v("使用平台角度写合约")]),e._v(" "),t("li",[e._v("使用 stuct 格式。")]),e._v(" "),t("li",[e._v("【选做】：增加众筹时间的限制\n"),t("ul",[t("li",[e._v("如果规定时间内完成，则结束后转钱给受益人")]),e._v(" "),t("li",[e._v("如果规定时间内没有完成，则资金释放，捐赠者自己取回捐赠资金。")])])])]),e._v(" "),t("h2",{attrs:{id:"🆗-实战-3-同志们好增加提示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-3-同志们好增加提示"}},[e._v("#")]),e._v(" 🆗 实战 3: 同志们好增加提示")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-29"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-29"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=42",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 3: 同志们好增加提示")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=bVrIUwrJrjo&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=42",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 3: 同志们好增加提示")])])]),e._v(" "),t("h3",{attrs:{id:"_1-需求分析-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-需求分析-2"}},[e._v("#")]),e._v(" 1.需求分析")]),e._v(" "),t("p",[e._v("需要点击一个方法，查看当前的 step 到哪里了？然后提示下一步该干什么。")]),e._v(" "),t("p",[e._v("比如："),t("strong",[e._v("当前的 step 是:0 可以执行 hello ,领导说:同志们好")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("难点：数字怎么转换成 string")]),e._v("？")]),e._v(" "),t("h3",{attrs:{id:"_2-代码如下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码如下"}},[e._v("#")]),e._v(" 2.代码如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint8 public step = 0;\n\n    /// @notice 用于辅助获取下一步该做什么的方法\n    /// @dev 整理step对应的错误，注意数字转为字符串时候的途径\n    /// @return 当前的提示信息\n    function helperInfo() external view returns (string memory) {\n        string memory stepDes = unicode"当前的step是:";\n        string memory info;\n\n        if (step == 0) {\n            info = unicode"可以执行 hello ,领导说:同志们好";\n        } else if (step == 1) {\n            info = unicode"可以执行 helloRes ,同志们说:领导好";\n        } else if (step == 2) {\n            info = unicode"可以执行 comfort ,领导必须给钱，并且说:同志们辛苦了";\n        } else if (step == 3) {\n            info = unicode"可以执行 comfortRes ,同志们说:为人民服务";\n        } else if (step == 4) {\n            info = unicode"可以执行 selfdestruct";\n        } else {\n            info = unicode"未知";\n        }\n\n        return string.concat(stepDes, uintToString(step), " ", info);\n    }\n\n    // 另外一种转换方法\n    //调用这个函数，通过取模的方式，一位一位转换\n    function uintToString(uint256 _uint)\n        internal\n        pure\n        returns (string memory str)\n    {\n        if (_uint == 0) return "0";\n        while (_uint != 0) {\n            //取模\n            uint256 remainder = _uint % 10;\n            //每取一位就移动一位，个位、十位、百位、千位……\n            _uint = _uint / 10;\n            //将字符拼接，注意字符位置\n            str =  string.concat(toStr(remainder), str);\n        }\n    }\n\n    function toStr(uint256 num_) internal pure returns (string memory) {\n        require(num_ < 10,"error");\n        bytes memory alphabet = "0123456789";\n        bytes memory str = new bytes(1);\n        str[0] = alphabet[num_];\n        return string(str);\n    }\n}\n')])])]),t("h2",{attrs:{id:"🆗-实战-4-eth-钱包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-4-eth-钱包"}},[e._v("#")]),e._v(" 🆗 实战 4: ETH 钱包")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-30"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-30"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=43",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 4: ETH 钱包")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=-VYk-kEVrLg&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=43",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 4: ETH 钱包")])])]),e._v(" "),t("h3",{attrs:{id:"内容-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容-2"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),t("p",[e._v("这一个实战主要是加深大家对 3 个取钱方法的使用。")]),e._v(" "),t("ul",[t("li",[e._v("任何人都可以发送金额到合约")]),e._v(" "),t("li",[e._v("只有 owner 可以取款")]),e._v(" "),t("li",[e._v("3 种取钱方式")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract EtherWallet {\n    address payable public immutable owner;\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    constructor() {\n        owner = payable(msg.sender);\n    }\n\n    receive() external payable {\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    function withdraw1() external {\n        require(msg.sender == owner, "Not owner");\n        // owner.transfer 相比 msg.sender 更消耗Gas\n        // owner.transfer(address(this).balance);\n        payable(msg.sender).transfer(100);\n    }\n\n    function withdraw2() external {\n        require(msg.sender == owner, "Not owner");\n        bool success = payable(msg.sender).send(200);\n        require(success, "Send Failed");\n    }\n\n    function withdraw3() external {\n        require(msg.sender == owner, "Not owner");\n        (bool success, ) = msg.sender.call{value: address(this).balance}("");\n        require(success, "Call Failed");\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),t("h2",{attrs:{id:"🆗-实战-5-多签钱包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-5-多签钱包"}},[e._v("#")]),e._v(" 🆗 实战 5: 多签钱包")]),e._v(" "),t("p",[e._v("多签钱包的功能: 合约有多个 owner，一笔交易发出后，需要多个 owner 确认，确认数达到最低要求数之后，才可以真正的执行。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-31"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-31"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=44",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 5: 多签钱包")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=PK3u8XXSbVg&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=44",target:"_blank",rel:"noreferrer"}},[e._v("第二章实战 5: 多签钱包")])])]),e._v(" "),t("h3",{attrs:{id:"_1-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-原理"}},[e._v("#")]),e._v(" 1.原理")]),e._v(" "),t("ul",[t("li",[e._v("部署时候传入地址参数和需要的签名数\n"),t("ul",[t("li",[e._v("多个 owner 地址")]),e._v(" "),t("li",[e._v("发起交易的最低签名数")])])]),e._v(" "),t("li",[e._v("有接受 ETH 主币的方法，")]),e._v(" "),t("li",[e._v("除了存款外，其他所有方法都需要 owner 地址才可以触发")]),e._v(" "),t("li",[e._v("发送前需要检测是否获得了足够的签名数")]),e._v(" "),t("li",[e._v("使用发出的交易数量值作为签名的凭据 ID（类似上么）")]),e._v(" "),t("li",[e._v("每次修改状态变量都需要抛出事件")]),e._v(" "),t("li",[e._v("允许批准的交易，在没有真正执行前取消。")]),e._v(" "),t("li",[e._v("足够数量的 approve 后，才允许真正执行。")])]),e._v(" "),t("h3",{attrs:{id:"_2-代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码"}},[e._v("#")]),e._v(" 2.代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract MultiSigWallet {\n    // 状态变量\n    address[] public owners;\n    mapping(address => bool) public isOwner;\n    uint256 public required;\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n        bool exected;\n    }\n    Transaction[] public transactions;\n    mapping(uint256 => mapping(address => bool)) public approved;\n\n    // 事件\n    event Deposit(address indexed sender, uint256 amount);\n    event Submit(uint256 indexed txId);\n    event Approve(address indexed owner, uint256 indexed txId);\n    event Revoke(address indexed owner, uint256 indexed txId);\n    event Execute(uint256 indexed txId);\n\n    // receive\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // 函数修改器\n    modifier onlyOwner() {\n        require(isOwner[msg.sender], "not owner");\n        _;\n    }\n    modifier txExists(uint256 _txId) {\n        require(_txId < transactions.length, "tx doesn\'t exist");\n        _;\n    }\n    modifier notApproved(uint256 _txId) {\n        require(!approved[_txId][msg.sender], "tx already approved");\n        _;\n    }\n    modifier notExecuted(uint256 _txId) {\n        require(!transactions[_txId].exected, "tx is exected");\n        _;\n    }\n\n    // 构造函数\n    constructor(address[] memory _owners, uint256 _required) {\n        require(_owners.length > 0, "owner required");\n        require(\n            _required > 0 && _required <= _owners.length,\n            "invalid required number of owners"\n        );\n\n        for (uint256 index = 0; index < _owners.length; index++) {\n            address owner = _owners[index];\n            require(owner != address(0), "invalid owner");\n            require(!isOwner[owner], "owner is not unique"); // 如果重复会抛出错误\n            isOwner[owner] = true;\n            owners.push(owner);\n        }\n        required = _required;\n    }\n\n    // 函数\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function submit(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns(uint256){\n        transactions.push(\n            Transaction({to: _to, value: _value, data: _data, exected: false})\n        );\n        emit Submit(transactions.length - 1);\n        return transactions.length - 1;\n    }\n\n    function approv(uint256 _txId)\n        external\n        onlyOwner\n        txExists(_txId)\n        notApproved(_txId)\n        notExecuted(_txId)\n    {\n        approved[_txId][msg.sender] = true;\n        emit Approve(msg.sender, _txId);\n    }\n\n    function execute(uint256 _txId)\n        external\n        onlyOwner\n        txExists(_txId)\n        notExecuted(_txId)\n    {\n        require(getApprovalCount(_txId) >= required, "approvals < required");\n\n        Transaction storage transaction = transactions[_txId];\n        transaction.exected = true;\n\n        (bool sucess, ) = transaction.to.call{value: transaction.value}(\n            transaction.data\n        );\n        require(sucess, "tx failed");\n        emit Execute(_txId);\n    }\n\n    function getApprovalCount(uint256 _txId)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 index = 0; index < owners.length; index++) {\n            if (approved[_txId][owners[index]]) {\n                count += 1;\n            }\n        }\n    }\n\n    function revoke(uint256 _txId)\n        external\n        onlyOwner\n        txExists(_txId)\n        notExecuted(_txId)\n    {\n        require(approved[_txId][msg.sender], "tx not approved");\n        approved[_txId][msg.sender] = false;\n        emit Revoke(msg.sender, _txId);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_3-测试流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-测试流程"}},[e._v("#")]),e._v(" 3.测试流程")]),e._v(" "),t("ol",[t("li",[e._v("部署合约\n"),t("ol",[t("li",[e._v("传入所有 owner 地址")]),e._v(" "),t("li",[e._v("传入需要的批准数: 例子是 3")])])]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("required")]),e._v(" 查询需要的数量")]),e._v(" "),t("li",[e._v("获取 "),t("code",[e._v("getBalance")]),e._v(" 查询当前地址的 ETH 主币余额")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("isOwner")]),e._v(" 查询多个地址的权限，看是否符合预期")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("owners")]),e._v(" 查询不同的索引是否符合预期")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("transactions")]),e._v(" 查询初始是否为没有值")]),e._v(" "),t("li",[t("strong",[e._v("使用其他地址向合约内转入 ETH 主币")])]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("getBalance")]),e._v(" 查询当前地址的 ETH 余额是否符合预期")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("submit")]),e._v("，申请转出一笔钱到指定地址\n"),t("ol",[t("li",[t("code",[e._v("_to")]),e._v(" 地址")]),e._v(" "),t("li",[t("code",[e._v("_value")]),e._v(" 需要的金额")]),e._v(" "),t("li",[t("code",[e._v("_data")]),e._v(": 如果没有需要的执行的代码，传入默认的 "),t("code",[e._v("0x")]),e._v("即可")]),e._v(" "),t("li",[e._v("返回值为本次交易的 "),t("code",[e._v("txId")])]),e._v(" "),t("li",[e._v("记录 "),t("code",[e._v("_to")]),e._v(" 的当前余额")]),e._v(" "),t("li",[e._v("记录 合约的当前余额，使用 "),t("code",[e._v("getBalance")]),e._v(" 获取")])])]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("transactions")]),e._v(" 查询 "),t("code",[e._v("txId")]),e._v(" 是否为预期")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("getApprovalCount")]),e._v(" 查询批准数量是否为 0")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("getBalance")]),e._v(" 查询当前地址的 ETH ，确认钱没有被转出")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("approved")]),e._v(" 查询当前 "),t("code",[e._v("txId")]),e._v(" 是否被 owner1 批准")]),e._v(" "),t("li",[t("strong",[e._v("使用 owner1 调用 "),t("code",[e._v("approv")]),e._v(" 对 "),t("code",[e._v("txId")]),e._v(" 进行批准")])]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("getApprovalCount")]),e._v(" 查询批准数量是否为 1")]),e._v(" "),t("li",[e._v("使用 owner1 调用 "),t("code",[e._v("approv")]),e._v(" 对 "),t("code",[e._v("txId")]),e._v(" 进行再次批准\n"),t("ol",[t("li",[e._v("查看是否报错 "),t("code",[e._v("tx already approved")])])])]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("approved")]),e._v(" 查询当前 "),t("code",[e._v("txId")]),e._v(" 是否被某个 owner1 批准")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("getBalance")]),e._v(" 和 "),t("code",[e._v("transactions")]),e._v(" 查询 "),t("code",[e._v("txId")]),e._v(" 是否为预期")]),e._v(" "),t("li",[t("strong",[e._v("使用 "),t("code",[e._v("owner2")]),e._v(" "),t("code",[e._v("owner3")]),e._v(" 地址调用 "),t("code",[e._v("approv")]),e._v(" 对 "),t("code",[e._v("txId")]),e._v(" 进行批准")]),e._v(" "),t("ol",[t("li",[e._v("使用 "),t("code",[e._v("approved")]),e._v(" 查询当前 "),t("code",[e._v("txId")]),e._v(" 是否被 owner1 批准")])])]),e._v(" "),t("li",[e._v("用 "),t("code",[e._v("getApprovalCount")]),e._v(" 查询批准数量是否为 3")]),e._v(" "),t("li",[t("strong",[e._v("使用 owner1 调用 "),t("code",[e._v("revoke")]),e._v(" 对 "),t("code",[e._v("txId")]),e._v(" 进行批准撤销")])]),e._v(" "),t("li",[e._v("用 "),t("code",[e._v("getApprovalCount")]),e._v(" 查询批准数量是否为 2")]),e._v(" "),t("li",[e._v("使用 owner1 调用 "),t("code",[e._v("execute")]),e._v(" 进行正式执行\n"),t("ol",[t("li",[e._v("查看是否报错 "),t("code",[e._v('"approvals < required"')]),e._v(".")])])]),e._v(" "),t("li",[t("strong",[e._v("使用 owner1 调用 "),t("code",[e._v("revoke")]),e._v(" 对 "),t("code",[e._v("txId")]),e._v(" 进行再次批准")]),e._v(" "),t("ol",[t("li",[e._v("使用 "),t("code",[e._v("approved")]),e._v(" 查询当前 "),t("code",[e._v("txId")]),e._v(" 是否被 owner1 批准")])])]),e._v(" "),t("li",[e._v("用 "),t("code",[e._v("getApprovalCount")]),e._v(" 查询批准数量是否为 3")]),e._v(" "),t("li",[t("strong",[e._v("使用 owner1 再次调用 "),t("code",[e._v("execute")]),e._v(" 进行正式执行")]),e._v(" "),t("ol",[t("li",[e._v("查询当前交易是否正确执行")])])]),e._v(" "),t("li",[e._v("确认执行的结果是否符合预期\n"),t("ol",[t("li",[e._v("使用 "),t("code",[e._v("transactions")]),e._v(" 查询 "),t("code",[e._v("txId")]),e._v(" 的 "),t("code",[e._v("exected")]),e._v(" 是否为 true")]),e._v(" "),t("li",[t("code",[e._v("_to")]),e._v(" 地址是否收到金额，")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("getBalance")]),e._v(" 查询当前地址的 ETH 余额是否正确")])])])]),e._v(" "),t("h2",{attrs:{id:"️⃣-问答题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#️⃣-问答题"}},[e._v("#")]),e._v(" #️⃣ 问答题")]),e._v(" "),t("ul",[t("li",[e._v("为什么 "),t("code",[e._v("uint8/int8")]),e._v("至 "),t("code",[e._v("uint256/uint256")]),e._v(" 都是以 8 的倍数递增，且最大值是 256。\n"),t("ul",[t("li",[e._v("1 字节是 8 位，所以后面 8,16,都需要是 8 的整数倍，int8 是 8 位。EVM 为地址设置的最大长度是 256 位，所以最大值是"),t("code",[e._v("uint256/uint256")]),e._v("。")])])]),e._v(" "),t("li",[e._v("为什么 "),t("code",[e._v("uint256")]),e._v(" 的最大值是 "),t("code",[e._v("2**256 -1")]),e._v("，而不是 "),t("code",[e._v("2**256")]),e._v(" 呢？\n"),t("ul",[t("li",[e._v("1 字节是 8 位，int8 是 8 位，二进制表示为"),t("code",[e._v("0000 0000")]),e._v("至"),t("code",[e._v("1000 0000")]),e._v("，第一位是符号位;第一位为 0 是正值，第一位为 1 是负值；因为 int8 总共能够表示 2 的 8 次方，所以带符号的正值为 128 个数，负值为 128 个数；")]),e._v(" "),t("li",[e._v("计算机里是将 0 算在正值内，负值的范围还是-128；但是 "),t("strong",[e._v("0 不是正数也不是负数")]),e._v("，所以正值范围少了一个位置，就剩 127 个位置了。")])])]),e._v(" "),t("li",[e._v("计算机中 字节 & bit & 十六进制数字的关系\n"),t("ul",[t("li",[e._v("bytes1 是指 1 个字节，1 个字节可以表示成 2 个连续的 16 进制数字。最大值是 "),t("code",[e._v("0xff")])]),e._v(" "),t("li",[e._v("bytes1 是指 1 个字节，1 个字节可以表示成 8 个连续的 bit 数字。最大值是 "),t("code",[e._v("11111111")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytes1")]),e._v(" 等于两位连续的十六进制数字 "),t("code",[e._v("0xXX")])])])]),e._v(" "),t("li",[e._v("8 个 bit 最大值是 "),t("code",[e._v("11111111")]),e._v(",8 个 bit 对应 2 个连续的十六进制数字，最大是 "),t("code",[e._v("0xff")]),e._v(";\n"),t("ul",[t("li",[t("code",[e._v("uint8")]),e._v(" 等于两位连续的十六进制数字 "),t("code",[e._v("0xXX")])])])])])]),e._v(" "),t("li",[e._v("Solidity 的值类型和引用类型分别有哪些？\n"),t("ul",[t("li",[e._v("值类型\n"),t("ul",[t("li",[e._v("boolean")]),e._v(" "),t("li",[e._v("integer 整型")]),e._v(" "),t("li",[e._v("integer 整型字面量"),t("code",[e._v("123_456_789")]),e._v("/"),t("code",[e._v("uint8 public a = (2**800 + 1) - 2**800;")])]),e._v(" "),t("li",[e._v("Fixed 定长浮点型,可以声明定长浮点型的变量，但不能给它们赋值或把它们赋值给其他变量。")]),e._v(" "),t("li",[e._v("BytesN 定长字节数组")]),e._v(" "),t("li",[e._v("字符串字面量，比如 "),t("code",[e._v('bytes1 public a8 = "a";')]),e._v(",也包括 unicode 字面常量。")]),e._v(" "),t("li",[e._v("十六进制字面常量"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('contract Test {\n    string public a1 = "a";\n    bytes1 public a2 = "a";\n    bytes1 public a3 = 0x61;\n    bytes1 public a4 = hex"61";\n}\n')])])])]),e._v(" "),t("li",[e._v("Enum:枚举")]),e._v(" "),t("li",[e._v("用户定义的值类型;用户定义值类型使用 type UserType is DefaultType 来定义，其中 UserType 是新引入的类型的名称， DefaultType 必须是内置的值类型（”底层类型”）。")]),e._v(" "),t("li",[e._v("地址类型/合类型约")]),e._v(" "),t("li",[e._v("函数类型")])])]),e._v(" "),t("li",[e._v("引用类型\n"),t("ul",[t("li",[e._v("array")]),e._v(" "),t("li",[e._v("bytes（bytes 和 bytes32[] 区别）")]),e._v(" "),t("li",[e._v("string")]),e._v(" "),t("li",[e._v("mapping")]),e._v(" "),t("li",[e._v("struct")])])])])])]),e._v(" "),t("p",[t("strong",[e._v("int/uint")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("如何获取整型的最大值和最小值")]),e._v(" "),t("ul",[t("li",[e._v("可以使用 "),t("code",[e._v("type(int8).max")]),e._v(" 获取该类型的最大值")]),e._v(" "),t("li",[e._v("可以使用 "),t("code",[e._v("type(int8).min")]),e._v(" 获取该类型的最小值")])])]),e._v(" "),t("li",[t("p",[e._v("聊一聊 "),t("code",[e._v("checked")]),e._v(" 和 "),t("code",[e._v("unchecked")])]),e._v(" "),t("ul",[t("li",[e._v("0.8.0 开始，算术运算有两种计算模式：一种是"),t("code",[e._v("checked")]),e._v("（检查）模式，另一种是 "),t("code",[e._v("unchecked")]),e._v("（不检查）模式。 默认情况下，算术运算在 "),t("code",[e._v("checked")]),e._v(" 模式下，即都会进行溢出检查，如果结果落在取值范围之外，调用会通过 失败异常 回退。 你也可以通过 "),t("code",[e._v("unchecked{ ... }")]),e._v(" 切换到 “unchecked”模式，更多可参考 "),t("code",[e._v("unchecked")]),e._v(" .")]),e._v(" "),t("li",[e._v("现在不需要因为 safeMath 库了。")])])]),e._v(" "),t("li",[t("p",[e._v("下面代码会报错么？为什么？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint8 public a = (2**800 + 1) - 2**800; // 1\nuint8 public b = 0.5 * 8; // 4\nuint8 public c = 2.5 + b + 0.5;\n")])])]),t("ul",[t("li",[t("code",[e._v("(2**800 + 1) - 2**800")]),e._v(" 的结果是字面常量 1 （属于 uint8 类型），尽管计算的中间结果已经超过了 以太坊虚拟机的机器字长度。 此外， "),t("code",[e._v(".5 * 8")]),e._v(" 的结果是整型 "),t("code",[e._v("4")]),e._v(" （尽管有非整型参与了计算）。")]),e._v(" "),t("li",[e._v("尽管我们知道 b 的值是一个整数，但 "),t("code",[e._v("2.5 + a")]),e._v(" 这部分表达式并不进行类型检查，因此编译不能通过。")])])]),e._v(" "),t("li",[t("p",[e._v("下面代码中的"),t("code",[e._v("c1")]),e._v("/"),t("code",[e._v("c2")]),e._v("结果是什么？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint256 a = 1;\nuint256 b = 4;\nuint256 c1 = (1 / 4) * 4; // 1 => 未截断\nuint256 c2 = (a / b) * b; // 0 => 截断\n")])])]),t("ul",[t("li",[e._v("整数的除法会被截断（例如："),t("code",[e._v("1/4")]),e._v(" 结果为 0）,但是使用字面量的方式不会被截断")])])]),e._v(" "),t("li",[t("p",[e._v("下面两个函数都会运行成功么？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function test1() public pure returns (int256 a) {\n    a = type(int256).min / (-2);\n}\n\n// VM error: revert.\nfunction test2() public pure returns (int256 a) {\n    a = type(int256).min / (-1);\n}\n")])])]),t("ul",[t("li",[e._v("表达式 "),t("code",[e._v("type(int).min / (-1)")]),e._v(" 是仅有的整除会发生向上溢出的情况。 在算术检查模式下，这会触发一个失败异常，在截断模式下，表达式的值将是 "),t("code",[e._v("type(int).min")]),e._v(" 。")])])]),e._v(" "),t("li",[t("p",[e._v("下面例子输出什么？")]),e._v(" "),t("ul",[t("li",[e._v("你可能认为像"),t("code",[e._v("255 + (true ? 1 : 0)")]),e._v(" 或 "),t("code",[e._v("255 + [1, 2, 3][0]")]),e._v(" 这样的表达式等同于直接使用 256 字面常量。 但事实上，它们是在 "),t("code",[e._v("uint8")]),e._v(" 类型中计算的，会溢出。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// VM error: revert.\nfunction testA1() public pure returns (uint256 a) {\n    a = 255 + (true ? 1 : 0);\n}\n\nfunction testA2() public pure returns (uint256 a) {\n    a = (true ? 1 : 0) + 255;\n}\n\n// VM error: revert.\nfunction testB1() public pure returns (uint256 a) {\n    a = 255 + [1, 2, 3][0];\n}\n\nfunction testB2() public pure returns (uint256 a) {\n    a = [1, 2, 3][0] + 255;\n}\n\nfunction testA3() public pure returns (uint256 a) {\n    a = 255 + uint256(true ? 1 : 0);\n}\n\nfunction testB3() public pure returns (uint256 a) {\n    a = 255 + uint256([1, 2, 3][0]);\n}\n")])])])])]),e._v(" "),t("p",[t("strong",[e._v("BytesN 定长字节数组")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bytesN")]),e._v(" 有哪些属性，分别怎么使用。\n"),t("ul",[t("li",[e._v("定义方式 "),t("code",[e._v("bytesN")]),e._v("，其中 N 可取 "),t("code",[e._v("1~32")]),e._v(" 中的任意整数;bytes1 代表只能存储一个字节。一旦声明，其内部的字节长度不可修改，内部字节不可修改。注意这里 "),t("code",[e._v("bytes32")]),e._v(" 和 "),t("code",[e._v("bytes")]),e._v(" 是不同的。"),t("code",[e._v("bytes")]),e._v(" 是变长字节数组，是引用类型。"),t("code",[e._v("byte")]),e._v(" 是 "),t("code",[e._v("bytes1")]),e._v(" 的别名，不推荐使用。")]),e._v(" "),t("li",[t("code",[e._v("length")]),e._v(" （只读）\n"),t("ul",[t("li",[e._v("返回字节个数，可以通过索引读取对应索引的字节。")])])]),e._v(" "),t("li",[e._v("索引访问: "),t("code",[e._v("bytesN[index]")]),e._v(" "),t("ul",[t("li",[e._v("index 取值范围"),t("code",[e._v("[0, N]")]),e._v("，其中 N 表示长度。")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("x")]),e._v(" 是 "),t("code",[e._v("bytesI")]),e._v(" 类型，那么 "),t("code",[e._v("x[k]")]),e._v(" （其中 0 <= k < I）返回第 k 个字节（只读）。")])])])])]),e._v(" "),t("li",[t("code",[e._v("bytesN")]),e._v(" 有什么方法？\n"),t("ul",[t("li",[e._v("自己没有方法，可以全局的，比如 delete。")])])]),e._v(" "),t("li",[t("code",[e._v('"a"')]),e._v(" 是值类型还是引用类型？\n"),t("ul",[t("li",[e._v("注：字符串字面常量是值类型,这不是字符串类型。比如"),t("code",[e._v('bytes1 public b1 = "a";')])])])])]),e._v(" "),t("p",[t("strong",[e._v("Unicode")])]),e._v(" "),t("ul",[t("li",[e._v("怎么样输出中文字符串？（"),t("code",[e._v('unicode"同志们好"')]),e._v("）")])]),e._v(" "),t("p",[t("strong",[e._v("十六进制字面常量")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v('bytes1 public a4 = hex"61";')]),e._v(" 的值是什么？（"),t("code",[e._v("0x61")]),e._v("）")])]),e._v(" "),t("p",[t("strong",[e._v("Enum:枚举")])]),e._v(" "),t("ul",[t("li",[e._v("枚举类型的使用场景\n"),t("ul",[t("li",[t("code",[e._v("enum")]),e._v(" 是一种用户自定义类型，用于表示多种状态，枚举可用来创建由一定数量的“常量值”构成的自定义类型。主要作用是用于限制某个事务的有限选择。比如将咖啡的容量大小限制为：大、中、小，这将确保任何人不能购买其他容量的咖啡，只能在这里选择。")])])]),e._v(" "),t("li",[e._v("Enum 的属性和方法\n"),t("ul",[t("li",[e._v("选项从 0 开始的无符号整数值表示。")]),e._v(" "),t("li",[t("code",[e._v("type(NameOfEnum).min/max")])]),e._v(" "),t("li",[e._v("delete 恢复默认")])])]),e._v(" "),t("li",[e._v("聊一聊枚举类型\n"),t("ul",[t("li",[e._v("枚举类型，返回值是索引，默认值是 0;")]),e._v(" "),t("li",[e._v("枚举类型的默认值是第一个值。\n"),t("ul",[t("li",[e._v("枚举类型 enum 至少应该有一名成员。")])])]),e._v(" "),t("li",[e._v("设置的时候，可以设置为索引，也可以对应的枚举名称;")]),e._v(" "),t("li",[e._v("枚举类型 enum 可以与整数进行显式转换，但不能进行隐式转换。\n"),t("ul",[t("li",[e._v("显示转换会在运行时检查数值范围，如果不匹配，将会引起异常。")])])]),e._v(" "),t("li",[e._v("很多人感觉 enum 很少用，一是因为应用场景确实比较窄，二是因为可以被其他数据类型所代替；但按照编码规范，限制选择范围场景，除了 bool 以外的，推荐使用 enum 类型来定义。")])])])]),e._v(" "),t("p",[t("strong",[e._v("UserType 用户定义的值类型")])]),e._v(" "),t("ul",[t("li",[e._v("聊一聊 UserType。\n"),t("ul",[t("li",[e._v("用户定义值类型使用 "),t("code",[e._v("type UserType is DefaultType")]),e._v(" 来定义，其中 "),t("code",[e._v("UserType")]),e._v(" 是新引入的类型的名称， "),t("code",[e._v("DefaultType")]),e._v(" 必须是内置的值类型（”底层类型”）。自定义类型的值的数据表示则继承自底层类型，并且 ABI 中也使用底层类型。")]),e._v(" "),t("li",[e._v("⚠️: 用户定义的类型 "),t("code",[e._v("UserType")]),e._v(" 没有任何运算符或绑定成员函数。即使是操作符 "),t("code",[e._v("==")]),e._v(" 也没有定义。也不允许与其他类型进行显式和隐式转换。")])])]),e._v(" "),t("li",[e._v("UserType 有属性么？有方法么？\n"),t("ul",[t("li",[t("code",[e._v("UserType.wrap()")])]),e._v(" "),t("li",[t("code",[e._v("UserType.unwrap()")])])])])]),e._v(" "),t("p",[t("strong",[e._v("address")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("address")]),e._v(" 和 "),t("code",[e._v("address payable")]),e._v(" 有什么区别\n"),t("ul",[t("li",[t("code",[e._v("address")]),e._v("：保存一个 20 字节的值（以太坊地址的大小）。")]),e._v(" "),t("li",[t("code",[e._v("address payable")]),e._v(" ：可支付地址，与 "),t("code",[e._v("address")]),e._v(" 相同，不过有成员函数 "),t("code",[e._v("transfer")]),e._v(" 和 "),t("code",[e._v("send")]),e._v(" 。")]),e._v(" "),t("li",[e._v("如果你需要 "),t("code",[e._v("address")]),e._v(" 类型的变量，并计划发送以太币给这个地址，那么声明类型为 "),t("code",[e._v("address payable")]),e._v(" 可以明确表达出你的需求。 同样，尽量更早对他们进行区分或转换。")]),e._v(" "),t("li",[e._v("这种区别背后的思想是 "),t("code",[e._v("address payable")]),e._v(" 可以向其发送以太币，而不能向一个普通的 "),t("code",[e._v("address")]),e._v(" 发送以太币。比如，它可能是一个智能合约地址，并且不支持接收以太币。")])])]),e._v(" "),t("li",[e._v("address 类型分别有什么属性？介绍一下用途\n"),t("ol",[t("li",[e._v(".balance : 以 Wei 为单位的余额。"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.balance    returns(uint256)\n")])])])]),e._v(" "),t("li",[e._v(".code : 地址上的代码(可以为空)"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.code        returns(bytes memory)\n")])])])]),e._v(" "),t("li",[e._v(".codehash : 地址的 codehash"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.codehash    returns(bytes32)\n")])])])])])]),e._v(" "),t("li",[e._v("address 类型有哪些方法以及各自的作用。\n"),t("ol",[t("li",[t("code",[e._v("address()")]),e._v(": 可以将地址转换到地址类型。")]),e._v(" "),t("li",[t("code",[e._v("payable()")]),e._v(": 将普通地址转为可支付地址。\n"),t("ol",[t("li",[e._v("从 "),t("code",[e._v("address")]),e._v(" 到 "),t("code",[e._v("address payable")]),e._v(" 的转换。可以通过 "),t("code",[e._v("payable(x)")]),e._v(" 进行 ，其中 "),t("code",[e._v("x")]),e._v(" 必须是 "),t("code",[e._v("address")]),e._v(" 类型。")])])]),e._v(" "),t("li",[t("code",[e._v(".transfer(uint256 amount)")]),e._v(": 将余额转到当前地址（合约地址转账）"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address payable>.transfer(uint256 amount)\n")])])]),t("ol",[t("li",[e._v("失败时抛出异常, 等价于"),t("code",[e._v("require(send())")]),e._v(" 使用固定（不可调节）的 2300 gas 的矿工费，错误会 reverts")]),e._v(" "),t("li",[e._v("需要 payable address")])])]),e._v(" "),t("li",[t("code",[e._v(".send(uint256 amount)")]),e._v(": 将余额转到当前地址，并"),t("strong",[e._v("返回交易成功状态")]),e._v("（合约地址转账）"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address payable>.send(uint256 amount) returns (bool)\n")])])]),t("ol",[t("li",[e._v("失败时仅会返回 "),t("code",[e._v("false")]),e._v("，不会终止执行（合约地址转账）;使用固定（不可调节）的 2300 gas 的矿工费。")]),e._v(" "),t("li",[e._v("需要 payable address")]),e._v(" "),t("li",[e._v("补充：send 与 transfer 对应，但 "),t("strong",[e._v("send 更底层")]),e._v("。如果执行失败，transfer 不会因异常停止，而 send 会返回 false。transfer 相对 send 较安全")]),e._v(" "),t("li",[e._v("send() 执行有一些风险：如果调用栈的深度超过 1024 或 gas 耗光，交易都会失败。因此，为了保证安全，必须检查 send 的返回值，如果交易失败，会回退以太币。")])])]),e._v(" "),t("li",[t("code",[e._v(".call(bytes memory)")]),e._v(": 用给定的有效载荷（payload）发出低级 "),t("code",[e._v("CALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.call(bytes memory) returns (bool, bytes memory)\n")])])]),t("ol",[t("li",[e._v("发送所有可用 gas，也可以自己调节 gas。")]),e._v(" "),t("li",[e._v("返回两个参数，一个 "),t("code",[e._v("bool")]),e._v(" 值代表成功或者失败，另外一个是可能存在的 "),t("code",[e._v("data")])]),e._v(" "),t("li",[e._v("低级 "),t("code",[e._v("CALL")]),e._v(" 调用：不需要 payable address, 普通地址即可")])])]),e._v(" "),t("li",[t("code",[e._v(".delegatecall(bytes memory)")]),e._v(": 用给定的有效载荷（payload）发出低级 "),t("code",[e._v("DELEGATECALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.delegatecall(bytes memory) returns (bool, bytes memory)\n")])])]),t("ol",[t("li",[e._v("发出低级函数 "),t("code",[e._v("DELEGATECALL")]),e._v("，失败时返回 false，发送所有可用 gas，也可以自己调节 gas。")])])]),e._v(" "),t("li",[t("code",[e._v("staticcall(bytes memory)")]),e._v(": 用给定的有效载荷（payload）发出低级 "),t("code",[e._v("STATICCALL")]),e._v(" 调用，并"),t("strong",[e._v("返回交易成功状态和返回数据")]),e._v("（调用合约的方法并转账）"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<address>.staticcall(bytes memory) returns (bool, bytes memory)\n")])])]),t("ol",[t("li",[e._v("发送所有可用 gas，也可以自己调节 gas。")])])])])]),e._v(" "),t("li",[e._v("地址的三种转帐有什么区别？transfer / send /call\n"),t("ul",[t("li",[e._v("相同点\n"),t("ul",[t("li",[e._v("三种方法都可以进行转账")]),e._v(" "),t("li",[t("code",[e._v("_to.transfer(100)")]),e._v("、"),t("code",[e._v("_to.send(100)")]),e._v("、"),t("code",[e._v('_to.call{value: 100}("")')]),e._v(" 的接收方都是"),t("code",[e._v("_to")]),e._v("。\n"),t("ul",[t("li",[e._v("如果"),t("code",[e._v("_to")]),e._v("合约中必须增加 "),t("code",[e._v("fallback")]),e._v(" 或者 "),t("code",[e._v("receive")]),e._v(" 函数！")]),e._v(" "),t("li",[e._v("否则报错"),t("code",[e._v("In order to receive Ether transfer the contract should have either 'receive' or payable 'fallback' function")])])])])])]),e._v(" "),t("li",[e._v("不同点:\n"),t("ul",[t("li",[e._v("低级 "),t("code",[e._v("CALL")]),e._v(" 调用：不需要 "),t("code",[e._v("payable address")]),e._v(" "),t("ul",[t("li",[e._v("transfer 和 send 只能是 "),t("code",[e._v("payable address")])])])]),e._v(" "),t("li",[t("code",[e._v("call")]),e._v(" 的 gas 可以动态调整\n"),t("ul",[t("li",[e._v("transfer 和 send 只能是固定制 "),t("code",[e._v("2300")])])])]),e._v(" "),t("li",[t("code",[e._v("call")]),e._v(" 除了可以转账外，可以还可以调用不知道 ABI 的方法，还可以调用的时候转账\n"),t("ul",[t("li",[e._v("当调用不存在的合约方法时候，会触发对方合约内的 "),t("code",[e._v("fallback")]),e._v(" 或者 "),t("code",[e._v("receive")]),e._v("。")]),e._v(" "),t("li",[e._v("如果使用 "),t("code",[e._v("_to.call{value: 100}(data)")]),e._v("，那么"),t("code",[e._v("data")]),e._v("中被调用的方法必须添加 "),t("code",[e._v("payable")]),e._v(" 修饰符，否则转账失败！")]),e._v(" "),t("li",[e._v("因为可以调用方法，所以 call 有两个参数，除了一个 "),t("code",[e._v("bool")]),e._v(" 值代表成功或者失败，另外一个是可能存在的 "),t("code",[e._v("data")]),e._v("，比如创建合约时候得到部署的地址，调用函数时候得到的函数放回值。")])])])])])])]),e._v(" "),t("li",[e._v("delegatecall 和 call 的区别\n"),t("ul",[t("li",[t("code",[e._v("delegatecall")]),e._v(" 使用方法和 "),t("code",[e._v("call")]),e._v(" 完全一样。区别在于，"),t("code",[e._v("delegatecall")]),e._v(" 只调用给定地址的代码（函数），其他状态属性如（存储，余额 …）都来自当前合约。"),t("code",[e._v("delegatecall")]),e._v(" 的目的是使用另一个合约中的库代码。")]),e._v(" "),t("li",[e._v("委托调用是："),t("strong",[e._v("委托对方调用自己数据的")]),e._v("。类似授权转账，比如我部署一个 Bank 合约， 授权 ContractA 使用 Bank 地址内的资金，ContractA 只拥有控制权，但是没有拥有权。")]),e._v(" "),t("li",[e._v("委托调用后，所有变量修改都是发生在委托合约内部，并不会保存在被委托合约中。\n"),t("ul",[t("li",[e._v("利用这个特性，可以通过更换被委托合约，来升级委托合约。")])])]),e._v(" "),t("li",[e._v("委托调用合约内部，需要和被委托合约的内部参数完全一样，否则容易导致数据混乱\n"),t("ul",[t("li",[e._v("可以通过顺序来避免这个问题，但是推荐完全一样")])])])])]),e._v(" "),t("li",[e._v("聊一聊三种低级 call\n"),t("ol",[t("li",[t("code",[e._v("call")]),e._v(" ， "),t("code",[e._v("delegatecall")]),e._v(" 和 "),t("code",[e._v("staticcall")]),e._v(" 都是非常低级的函数，应该只把它们当作最后一招来使用，它们破坏了 Solidity 的类型安全性。")]),e._v(" "),t("li",[e._v("三种方法都提供 "),t("code",[e._v("gas")]),e._v(" 选项，而 "),t("code",[e._v("value")]),e._v(" 选项仅 "),t("code",[e._v("call")]),e._v(" 支持 。所以三种 call 里只有 "),t("code",[e._v("call")]),e._v(" 可以进行 ETH 转账，其他两种不可以进行转账。")]),e._v(" "),t("li",[e._v("不管是读取状态还是写入状态，最好避免在合约代码中硬编码使用的 gas 值。这可能会引入"),t("strong",[e._v("错误")]),e._v("，而且 gas 的消耗也是动态改变的。")]),e._v(" "),t("li",[e._v("如果在通过低级函数 "),t("code",[e._v("delegatecall")]),e._v(" 发起调用时需要访问存储中的变量，那么这两个合约的存储布局需要一致，以便被调用的合约代码可以正确地通过变量名访问合约的存储变量。 这不是指在库函数调用（高级的调用方式）时所传递的存储变量指针需要满足那样情况。")])])]),e._v(" "),t("li",[e._v("编写合约的时候，如果地址不是 checksum address ,该怎么处理？\n"),t("ul",[t("li",[e._v("通过浏览器内转")])])]),e._v(" "),t("li",[e._v("聊一下合约类型\n"),t("ul",[t("li",[e._v("每一个合约定义都有他自己的类型。")]),e._v(" "),t("li",[e._v("可以隐式地将合约转换为从他们继承的合约。")]),e._v(" "),t("li",[e._v("合约可以显式转换为 "),t("code",[e._v("address")]),e._v(" 类型。")]),e._v(" "),t("li",[e._v("可以转换为 "),t("code",[e._v("address payable")]),e._v(" 类型")]),e._v(" "),t("li",[e._v("⚠️ 注意：合约不支持任何运算符。")])])]),e._v(" "),t("li",[e._v("合约的属性\n"),t("ul",[t("li",[t("code",[e._v("type(C).name")]),e._v(" "),t("ul",[t("li",[e._v("获得合约名")])])]),e._v(" "),t("li",[t("code",[e._v("type(C).creationCode")]),e._v(" "),t("ul",[t("li",[e._v("获得包含创建合约字节码的内存字节数组。")]),e._v(" "),t("li",[e._v("该值和合约内使用 "),t("code",[e._v("address(this).code;")]),e._v(" 结果一样。")]),e._v(" "),t("li",[e._v("它可以在内联汇编中构建自定义创建例程，尤其是使用 "),t("code",[e._v("create2")]),e._v(" 操作码。")]),e._v(" "),t("li",[e._v("不能在合约本身或派生的合约访问此属性。 因为会引起循环引用。")])])]),e._v(" "),t("li",[t("code",[e._v("type(C).runtimeCode")]),e._v(" "),t("ul",[t("li",[e._v("获得合约的运行时字节码的内存字节数组。这是通常由 "),t("code",[e._v("C")]),e._v(" 的构造函数部署的代码。")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("C")]),e._v(" 有一个使用内联汇编的构造函数，那么可能与实际部署的字节码不同。")]),e._v(" "),t("li",[e._v("还要注意库在部署时修改其运行时字节码以防范定期调用（guard against regular calls）。 与 "),t("code",[e._v(".creationCode")]),e._v(" 有相同的限制，不能在合约本身或派生的合约访问此属性。 因为会引起循环引用。")])])])])]),e._v(" "),t("li",[e._v("如何获取合约本身的 bytecode？\n"),t("ul",[t("li",[t("code",[e._v("type(C).creationCode")])])])])]),e._v(" "),t("p",[t("strong",[e._v("数据位置")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("聊一聊 storage/memory/calldata 三种数据位置")]),e._v(" "),t("ul",[t("li",[e._v("存储 storage : 状态变量保存的位置，只要合约存在就一直存储．")]),e._v(" "),t("li",[e._v("内存 memory : 即数据在内存中，因此数据仅在其生命周期内（函数调用期间）有效。不能用于外部调用。")]),e._v(" "),t("li",[e._v("调用数据 calldata : 用来保存函数参数的特殊数据位置，是一个只读位置。\n"),t("ul",[t("li",[e._v("调用数据 calldata 是不可修改的、非持久的函数参数存储区域，效果大多类似 内存 memory 。")]),e._v(" "),t("li",[e._v("主要用于外部函数的参数，但也可用于其他变量，无论外部内部函数都可以使用。")])])]),e._v(" "),t("li",[e._v("核心：更改数据位置或类型转换将始终产生自动进行一份拷贝，而在同一数据位置内（对于 存储 storage 来说）的复制仅在某些情况下进行拷贝。")])])]),e._v(" "),t("li",[t("p",[e._v("三种数据位置相互赋值，以及相同数据位置之间赋值都是拷贝么？详细介绍一下。")]),e._v(" "),t("ol",[t("li",[e._v("将 "),t("strong",{staticStyle:{color:"blue"}},[e._v("存储变量")]),e._v(" 赋值给 "),t("strong",[e._v("存储变量")]),e._v(" (同类型)\n"),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])])]),e._v(" "),t("li",[e._v("将 "),t("strong",{staticStyle:{color:"red"}},[e._v("内存变量")]),e._v(" 赋值给 "),t("strong",[e._v("存储变量")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])])]),e._v(" "),t("li",[e._v("将 "),t("strong",{staticStyle:{color:"blue"}},[e._v("存储变量")]),e._v(" 赋值给 内存变量\n"),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 创建一个新副本。")])])]),e._v(" "),t("li",[e._v("将 "),t("strong",{staticStyle:{color:"red"}},[e._v("内存变量")]),e._v(" 赋值给 内存变量 (同类型)\n"),t("ul",[t("li",[t("code",[e._v("值 类 型")]),e._v(": 创建一个新副本。")]),e._v(" "),t("li",[t("code",[e._v("引用类型")]),e._v(": 不会创建副本。("),t("strong",[e._v("重要")]),e._v(")")])])])])]),e._v(" "),t("li",[t("p",[e._v("memory 和 calldata 之间的区别")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("函数调用函数时的区别")]),e._v(":"),t("code",[e._v("calldata可以隐式转换为memory")])]),e._v(" "),t("li",[e._v("calldata 可以隐式转换为 memory")]),e._v(" "),t("li",[e._v("memory 不可以隐式转换为 calldata")]),e._v(" "),t("li",[e._v("作为参数：\n"),t("ul",[t("li",[e._v("memory 可以修改参数")]),e._v(" "),t("li",[e._v("calldata 禁止修改参数")])])])])])]),e._v(" "),t("p",[t("strong",[e._v("array")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("创建数组的方法有哪些。（定长数组，动态数组）")]),e._v(" "),t("ul",[t("li",[e._v("固定长度数组:创建"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("uint256[5] public T1 = [1, 2, 3, 4, 5];\naddress[5] public A =   [0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac];\nbytes1[5] public B = [bytes1(0x61)];\n")])])])]),e._v(" "),t("li",[e._v("可变长度数组:创建\n"),t("ul",[t("li",[e._v("方式 1: "),t("code",[e._v("uint256[] T1 = [1, 2, 3, 4, 5];")]),e._v(" "),t("ul",[t("li",[e._v("该方式不可以在函数内创建")])])]),e._v(" "),t("li",[e._v("方式 2: "),t("code",[e._v("uint256[] T2 = new uint256[](5);")]),e._v(" "),t("ul",[t("li",[e._v("用方式 2 创建数组时，若数组为成员变量, 则默认为 storage 类型；")]),e._v(" "),t("li",[e._v("若为局部变量默认为 "),t("code",[e._v("memory")]),e._v(" 类型，"),t("code",[e._v("memory")]),e._v(" 类型的数组，必须声明长度，并且长度创建后不可变。")]),e._v(" "),t("li",[t("code",[e._v("push")]),e._v(" 方法不能用在 "),t("code",[e._v("memeory")]),e._v(" 的数组上,只能逐个索引的赋值。")])])])])]),e._v(" "),t("li",[e._v("二维数组:创建\n"),t("ul",[t("li",[e._v("举个例子，一个长度为 "),t("code",[e._v("5")]),e._v("，元素类型为 uint 的动态数组的数组（二维数组），应声明为 "),t("code",[e._v("uint[][5]")]),e._v(" （注意这里跟其它语言比，数组长度的声明位置是反的）。在 Solidity 中， "),t("code",[e._v("X[3]")]),e._v(" 总是一个包含三个 X 类型元素的数组，即使 X 本身就是一个数组.")]),e._v(" "),t("li",[t("code",[e._v("uint256[2][3] public T = [[1, 2], [3, 4], [5, 6]];")])]),e._v(" "),t("li",[t("code",[e._v("T.length")]),e._v(" 为 3")])])]),e._v(" "),t("li",[e._v("其它\n"),t("ul",[t("li",[t("code",[e._v("uint256[2][] public T = new uint256[2][](10);")])])])])])]),e._v(" "),t("li",[t("p",[e._v("内存中如何创建数组")]),e._v(" "),t("ul",[t("li",[e._v("可以使用 "),t("code",[e._v("new")]),e._v(" 关键字在内存中创建动态数组。与存储数组相反，不能通过设置 "),t("code",[e._v(".length")]),e._v(" 成员来调整内存动态数组的长度。 ("),t("strong",[e._v("需要例子来演示")]),e._v(")。memory 类型的数组长度创建后不可变，不能通过修改成员变量 "),t("code",[e._v(".push")]),e._v(" 改变 memory 数组的大小。必须提前计算数组大小，或者创建一个新的内存数组并复制每个元素。")]),e._v(" "),t("li",[e._v("创建格式: "),t("code",[e._v("uint256[] memory a = new uint256[](5);")])]),e._v(" "),t("li",[e._v("内存中创建的数组是局部变量。")]),e._v(" "),t("li",[e._v("内存中不能创建动态数组，必须创建定长数组。")])])]),e._v(" "),t("li",[t("p",[e._v("下面代码可以正常运行么？如果可以，值分别是什么？")]),e._v(" "),t("ul",[t("li",[e._v("目前需要注意的是，"),t("strong",[e._v("定长的 memory 数组并不能赋值给变长的 memory 数组")]),e._v("，下面的例子 f 函数是无法运行的：")]),e._v(" "),t("li",[e._v("引发了一个类型错误，因为 "),t("code",[e._v("unint[3] memory")]),e._v("，不能转换成 "),t("code",[e._v("uint[] memory")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256[] public x = [1, 3, 4];\n    uint256[] public y = [uint256(1), 3, 4];\n    uint256[] public z = [uint8(1), 3, 4];\n\n    function f() public pure returns(uint256[] memory x){\n        x = [uint256(1), 3, 4];\n    }\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("下面代码可以正常运行么？")]),e._v(" "),t("ul",[t("li",[e._v("不可以，需要"),t("code",[e._v("s([uint256(1), uint256(2)])")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("contract T {\n    function t() public {\n        s([1, 2]);\n    }\n\n    function s(uint256[2] memory _arr) public {}\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("有哪些可以操作数组的方法，分别功能是什么？("),t("code",[e._v("push")]),e._v(" / "),t("code",[e._v("pop")]),e._v(" / "),t("code",[e._v("delete")]),e._v("/"),t("code",[e._v("x[start:end]")]),e._v(")")]),e._v(" "),t("ul",[t("li",[e._v("push 增加，改变长度")]),e._v(" "),t("li",[e._v("pop 删除最后一位，改变长度")]),e._v(" "),t("li",[e._v("delete: 删除对应的索引；删除并不会改变长度，索引位置的值会改为默认值。")]),e._v(" "),t("li",[t("code",[e._v("x[start:end]")]),e._v(": 数组切片，仅可使用于 "),t("code",[e._v("calldata")]),e._v(" 数组.")])])]),e._v(" "),t("li",[t("p",[e._v("能否实现一个完全 delete 数组的方法（删除数据，长度改变），说下实现逻辑也可以。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    function deletePro(uint256[] memory arr, uint256 _index)\n        internal\n        pure\n        returns (uint256[] memory temp)\n    {\n        require(_index < arr.length, "index out of bound");\n        temp = new uint256[](arr.length - 1);\n        for (uint256 index = 0; index <= temp.length - 1; index++) {\n            if (index >= _index) {\n                temp[_index] = arr[_index + 1];\n            } else {\n                temp[index] = arr[index];\n            }\n        }\n    }\n\n    function test()\n        external\n        pure\n        returns (uint256[] memory arr, uint256[] memory temp)\n    {\n        arr = new uint256[](3);\n        arr[0] = 1;\n        arr[1] = 2;\n        arr[2] = 3;\n        assert(arr[0] == 1);\n        assert(arr[1] == 2);\n        assert(arr[2] == 3);\n        assert(arr.length == 3);\n\n        temp = deletePro(arr, 1);\n        assert(temp[0] == 1);\n        assert(temp[1] == 3);\n        assert(temp.length == 2);\n    }\n}\n')])])])])]),e._v(" "),t("p",[t("strong",[e._v("bytes")])]),e._v(" "),t("ul",[t("li",[e._v("bytes 的创建方法有哪些？\n"),t("ul",[t("li",[e._v("状态变量的创建方式"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('bytes public welcome = bytes("1.Welcome");\n')])])])]),e._v(" "),t("li",[e._v("函数中可变字节数组创建方式："),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 可变字节数组创建方式\nbytes memory temp2 = new bytes(length);\n")])])])])])]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(" "),t("code",[e._v("bytes32")]),e._v(" ,和 "),t("code",[e._v("bytes32[]")]),e._v(" 区别 是什么？\n"),t("ul",[t("li",[t("code",[e._v("abcBytes")]),e._v(" 的值是: "),t("code",[e._v("0x616263")]),e._v(";")]),e._v(" "),t("li",[t("code",[e._v("abcArray")]),e._v(" 的值是："),t("code",[e._v("[0x61..00,0x62..00,0x63..00]")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  bytes32[] public abcArray = [bytes1("a"), bytes1("b"), bytes1("c")];\n  // 0x616263\n  bytes public abcBytes = bytes("abc");\n')])])])]),e._v(" "),t("li",[e._v("下面的值分别是什么？"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('bytes32[] public abcArray = [bytes1("a"), bytes1("b"), bytes1("c")];\nbytes public abcBytes = bytes("abc");\n')])])])]),e._v(" "),t("li",[e._v("bytes 的值如何修改？（"),t("code",[e._v("bytesVar[7] = 'x'")]),e._v("）")]),e._v(" "),t("li",[e._v("有哪些方法可以操作 "),t("code",[e._v("bytes")]),e._v(" 类型数据？分别是什么功能？\n"),t("ul",[t("li",[t("code",[e._v("concat")]),e._v("/ "),t("code",[e._v("push")]),e._v(" / "),t("code",[e._v("x[start:end]")]),e._v(" / "),t("code",[e._v("delete")]),e._v(" / "),t("code",[e._v("bytes()")])])])]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(" 和 "),t("code",[e._v("string")]),e._v(" 之间如何转换？\n"),t("ul",[t("li",[e._v("可以使用 "),t("code",[e._v("bytes()")]),e._v(" 构造函数将字符串转换为 "),t("code",[e._v("bytes")]),e._v("。")]),e._v(" "),t("li",[e._v("可以使用 string() 构造函数将 bytes 转换为字符串。")])])]),e._v(" "),t("li",[e._v("如何比较两个 bytes 数据是否相同？\n"),t("ul",[t("li",[t("code",[e._v("keccak256(welcome2) == keccak256(welcome1);")])])])])]),e._v(" "),t("p",[t("strong",[e._v("string")])]),e._v(" "),t("ul",[t("li",[e._v("如何修改 string 类型的字符串？\n"),t("ul",[t("li",[e._v("获取字符串的长度\n"),t("ul",[t("li",[t("code",[e._v("bytes(str).length")]),e._v(":以字节长度表示字符串的长度")])])]),e._v(" "),t("li",[e._v("某个字符串索引的字节码\n"),t("ul",[t("li",[t("code",[e._v("bytes1 temp1 = bytes(str)[_index];")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getIndexValue(uint256 _index) public view return(string memory) {\n    bytes1 temp1 = bytes(welcome)[_index]; // 返回固定长度的 bytes1\n    bytes memory temp2 = new bytes(1); // 可变字节数组创建方式\n    temp2[0] = temp1;\n    return string(temp2);\n}\n")])])])])])]),e._v(" "),t("li",[e._v("修改字符串\n"),t("ul",[t("li",[t("code",[e._v("bytes(s)[7] = 'x'")])])])])])]),e._v(" "),t("li",[e._v("如何比较两个 string 类型的字符串是否相等？\n"),t("ul",[t("li",[t("code",[e._v("keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2))")])]),e._v(" "),t("li",[t("code",[e._v("keccak256(bytes(s1)) == keccak256(bytes(s2))")]),e._v(" : 更推荐这个，省 gas")])])])]),e._v(" "),t("p",[t("strong",[e._v("mapping")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("mapping 使用的时候有哪些需要注意的？")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("_KeyType")]),e._v("：可以是任何内置类型，或者 bytes 和 字符串。\n"),t("ul",[t("li",[e._v("不允许使用引用类型或复杂对象")]),e._v(" "),t("li",[e._v("键是唯一的，其赋值方式为："),t("code",[e._v("map[a]=test")]),e._v("; 意思是键为 a,值为 test；。")])])]),e._v(" "),t("li",[t("code",[e._v("_ValueType")]),e._v("： 可以是任何类型。")]),e._v(" "),t("li",[e._v("mapping 支持嵌套。")]),e._v(" "),t("li",[e._v("映射的数据位置(data location)只能是 "),t("code",[e._v("storage")]),e._v("，通常用于状态变量。")]),e._v(" "),t("li",[t("code",[e._v("mapping")]),e._v(" 不能用于 "),t("code",[e._v("public")]),e._v(" 函数的参数或返回结果\n"),t("ul",[t("li",[e._v("映射只能是 存储 storage 的数据位置，因此只允许作为状态变量 或 作为函数内的 存储 storage 引用 或 作为库函数的参数。 它们不能用合约公有函数的参数或返回值。")]),e._v(" "),t("li",[e._v("这些限制同样适用于包含映射的数组和结构体。")])])]),e._v(" "),t("li",[e._v("映射可以标记为 "),t("code",[e._v("public")]),e._v("，Solidity 自动为它创建 getter 函数。\n"),t("ul",[t("li",[t("code",[e._v("_KeyType")]),e._v(" 将成为 "),t("code",[e._v("getter")]),e._v(" 的必须参数，并且 getter 会返回 "),t("code",[e._v("_ValueType")]),e._v("。")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("ValueType")]),e._v(" 是一个映射。这时在使用 "),t("code",[e._v("getter")]),e._v(" 时将需要递归地传入每个 "),t("code",[e._v("KeyType")]),e._v(" 参数，")])])]),e._v(" "),t("li",[e._v("映射与哈希表不同的地方："),t("strong",[e._v("在映射中,并不存储 key，而是存储它的 "),t("code",[e._v("keccak256")]),e._v(" 哈希值，从而便于查询实际的值")]),e._v("。正因为如此，映射是没有长度的，也没有 "),t("code",[e._v("key 的集合")]),e._v("或 "),t("code",[e._v("value 的集合")]),e._v("的概念。映射只能是存储的数据位置，因此只允许作为状态变量或作为函数内的存储引用 或 作为库函数的参数。")])])]),e._v(" "),t("li",[t("p",[e._v("mapping 如何获取-设置-删除？")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("balances[msg.sender];")])]),e._v(" "),t("li",[t("code",[e._v("balances[msg.sender] += amount;")])]),e._v(" "),t("li",[t("code",[e._v("delete balances[msg.sender];")])])])]),e._v(" "),t("li",[t("p",[e._v("mapping 怎么做局部变量？")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("mapping")]),e._v(" 类型可以用做局部变量，但只能引用状态变量，而且存储位置为 storage。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("contract Mapping {\n  mapping(address => uint256) public balances;\n\n  function updateBalance() public returns (uint256) {\n      // mapping 局部变量 ref 引用状态变量 balances\n      mapping(address => uint256) storage ref = balances;\n      ref[msg.sender] = 3;\n      return ref[msg.sender];\n  }\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("如何实现一个可迭代的 mapping？")]),e._v(" "),t("ul",[t("li",[e._v("（Mapping+array）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('contract Mapping {\n  mapping(address => uint256) public balances;\n  mapping(address => bool) public balancesInserted;\n  address[] public balancesKey;\n\n  function set(address _ads, uint256 amount) external {\n      balances[_ads] = amount;\n      if (!balancesInserted[_ads]) {\n          balancesInserted[_ads] = true;\n          balancesKey.push(_ads);\n      }\n  }\n\n  function totalAddress() external view returns (uint256) {\n      return balancesKey.length;\n  }\n\n  function first() external view returns (uint256) {\n      return balances[balancesKey[0]];\n  }\n\n  function latest() external view returns (uint256) {\n      return balances[balancesKey[balancesKey.length - 1]];\n  }\n\n  function get(uint256 i) external view returns (uint256) {\n      require(i < balancesKey.length, "length error");\n      return balances[balancesKey[i]];\n  }\n}\n')])])])])]),e._v(" "),t("p",[t("strong",[e._v("struct")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("struct 使用的时候有哪些需要注意的？")])]),e._v(" "),t("li",[t("p",[e._v("struct 的创建方法有哪些？(3 种)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 第 1 种生成\nBook memory solidity = Book("Solidity", "LiSi", ++bookId, false, 0);\n\n// 第 2 种生成\nBook memory rust = Book({\n    title: "Solidity",\n    author: "LiSi",\n    book_id: ++bookId,\n    is_lost: false,\n    uv: 0\n});\n\n// 第 3 种生成\nBook memory temp;\ntemp.title = "Solidity";\ntemp.author = "LiSi";\ntemp.book_id = ++bookId;\n')])])])]),e._v(" "),t("li",[t("p",[e._v("struct 如何获取-设置-删除？")]),e._v(" "),t("ol",[t("li",[e._v("函数内仅读取结构体，变量使用 memory: "),t("code",[e._v("Book memory _book = bookcase[_index];")]),e._v(" "),t("ol",[t("li",[e._v("函数内读取并返回,如果使用 memory 变量接收:从状态变量拷贝到内存中，然后内存中的变量拷贝到返回值。两次拷贝，消耗 gas 多\n"),t("ol",[t("li",[t("code",[e._v("Todo memory temp = list[_index];")])])])]),e._v(" "),t("li",[e._v("函数内读取并返回,如果使用 storage 变量接收:直接从状态变量读取，状态变量拷贝到返回值。1 次拷贝，消耗 gas 小")]),e._v(" "),t("li",[e._v("总结: 读取时候推荐使用 "),t("code",[e._v("storage")])])])]),e._v(" "),t("li",[e._v("函数内获取并修改结构体，变量使用 storage"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Book storage _book = bookcase[_index]; // 因为要修改状态变量，所以使用 storage\n_book.author = "Anbang";\n')])])]),t("ul",[t("li",[e._v("函数内直接修改变量;在修改一个属性时比较省 Gas 费用")]),e._v(" "),t("li",[e._v("函数内先获取存储到 storage 再修改:修改多个属性的时候比较省 Gas 费用")])])]),e._v(" "),t("li",[e._v("删除结构体的变量，仅仅是重置数据，并不是完全的删除。")])])]),e._v(" "),t("li",[t("p",[e._v("函数内使用 struct，标记 "),t("code",[e._v("memory")]),e._v(" / "),t("code",[e._v("storage")]),e._v(" 有什么区别？")]),e._v(" "),t("ul",[t("li",[e._v("函数内读取时，标记 "),t("code",[e._v("memory")]),e._v(" / "),t("code",[e._v("storage")]),e._v(",会产生完全不同的结果；")]),e._v(" "),t("li",[e._v("特别注意："),t("strong",[e._v("如果结构体内包含 "),t("code",[e._v("mapping")]),e._v(" 类型，则必须使用 "),t("code",[e._v("storage")]),e._v("，不可以使用 memeory.")]),e._v("，")])])]),e._v(" "),t("li",[t("p",[e._v("聊一下众筹合约的实现逻辑")])])]),e._v(" "),t("p",[t("strong",[e._v("类型转换")])]),e._v(" "),t("ul",[t("li",[e._v("隐式转换的方式有哪些？\n"),t("ul",[t("li",[e._v("隐式转换的场景: 在赋值, 参数传递给函数以及应用运算符时。")]),e._v(" "),t("li",[e._v("隐式转换的场景:\n"),t("ul",[t("li",[e._v("可以进行值类型之间的隐式转换")]),e._v(" "),t("li",[e._v("不会丢失任何信息")])])]),e._v(" "),t("li",[e._v("例如，"),t("code",[e._v("uint8")]),e._v(" 可以转换为 "),t("code",[e._v("uint16")]),e._v("/"),t("code",[e._v("uint24")]),e._v("../"),t("code",[e._v("uint256")]),e._v("，因为"),t("code",[e._v("uint8")]),e._v("是"),t("code",[e._v("uint16")]),e._v("这些类型的子集。但是 "),t("code",[e._v("int8")]),e._v(" 不可以转换为 "),t("code",[e._v("uint256")]),e._v("，因为 "),t("code",[e._v("int8")]),e._v(" 可以包含 "),t("code",[e._v("uint256")]),e._v(" 中不允许的负值，比如 "),t("code",[e._v("-1")]),e._v("。")])])]),e._v(" "),t("li",[e._v("显示转换有哪些需要注意的？\n"),t("ul",[t("li",[t("code",[e._v("uint8")]),e._v(" - "),t("code",[e._v("uint256")]),e._v(" 之间转换的原理")]),e._v(" "),t("li",[t("code",[e._v("bytes1")]),e._v(" - "),t("code",[e._v("bytes32")]),e._v(" 之间转换的原理")]),e._v(" "),t("li",[e._v("整型加大数据位置是从左侧增加，减小数据位置也是从左侧移除；（整型是右对齐）")]),e._v(" "),t("li",[e._v("字节加大数据位置是从右侧增加，减小数据位置也是从右侧移除；（字节是左对齐）")])])]),e._v(" "),t("li",[e._v("聊一聊 int/uint 类型之间的转换\n"),t("ul",[t("li",[e._v("因为整型加大数据位置是从左侧增加，减小数据位置也是从左侧移除；（"),t("strong",[e._v("整型是右对齐")]),e._v("）")]),e._v(" "),t("li",[e._v("整型转换成更大的类型，从左侧添加填充位。")]),e._v(" "),t("li",[e._v("整型转换成更小的类型，会丢失左侧数据。")])])]),e._v(" "),t("li",[e._v("聊一聊 bytes 字节类型之间的转换\n"),t("ul",[t("li",[e._v("因为字节加大数据位置是从右侧增加，减小数据位置也是从右侧移除；（"),t("strong",[e._v("字节是左对齐")]),e._v("）")]),e._v(" "),t("li",[e._v("字节转换为更大的类型时，从右侧添加填充位。")]),e._v(" "),t("li",[e._v("字节转换到更小的类型时，丢失右侧数据。")])])]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(" 与 "),t("code",[e._v("uint")]),e._v(" 转换\n"),t("ul",[t("li",[e._v("bytes 转换成 uint: 先转类型，再转大小")]),e._v(" "),t("li",[e._v("uint 转换成 bytes: 先转大小，再转类型")])])]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(" 与 "),t("code",[e._v("address")]),e._v(" 转换\n"),t("ul",[t("li",[e._v("address 的格式是 "),t("code",[e._v("0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac")]),e._v("，是一个 "),t("strong",[e._v("bytes20")]),e._v(" 的数据.")]),e._v(" "),t("li",[e._v("而由字符串生成 bytes 的方式是 "),t("code",[e._v("keccak256(abi.encodePacked())")]),e._v("，返回的是 "),t("code",[e._v("bytes32")]),e._v(" 类型。地址是取 "),t("code",[e._v("bytes32")]),e._v(" 数据中的后 20 位。如果删除前面的 12 位数据，可以使用 solidity assembly (内联汇编) 来截取，也可以借助 "),t("code",[e._v("uint")]),e._v(" 转换成更小的类型，会丢失左侧数据的特性来完成。")])])]),e._v(" "),t("li",[t("code",[e._v("uint")]),e._v(" 与 "),t("code",[e._v("address")]),e._v(" 转换")]),e._v(" "),t("li",[t("code",[e._v("bytes")]),e._v(" 与 "),t("code",[e._v("bytes32")]),e._v(" 之间的转换\n"),t("ul",[t("li",[e._v("创建长度，for 循环")])])])]),e._v(" "),t("p",[t("strong",[e._v("字面常量与基本类型的转换")])]),e._v(" "),t("ul",[t("li",[e._v("十进制和十六进制字面常量之间的转换需要注意什么问题？\n"),t("ul",[t("li",[e._v("只有在匹配数据范围时，才能进行隐形转换，如果超出，不会截断，而是报错。")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);