(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{434:function(e,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_01-初识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_01-初识"}},[e._v("#")]),e._v(" 01.初识")]),e._v(" "),t("p",[e._v("本章目录")]),e._v(" "),t("ul",[t("li",[e._v("1️⃣ 区块链基础")]),e._v(" "),t("li",[e._v("2️⃣ Hello World")]),e._v(" "),t("li",[e._v("3️⃣ 合约代码中的三种注释")]),e._v(" "),t("li",[e._v("4️⃣ 合约结构介绍")]),e._v(" "),t("li",[e._v("5️⃣ 全局的以太币单位")]),e._v(" "),t("li",[e._v("6️⃣ 接收 ETH")]),e._v(" "),t("li",[e._v("7️⃣ selfdestruct:合约自毁")]),e._v(" "),t("li",[e._v("🆗 实战 1: 同志们好")]),e._v(" "),t("li",[e._v("🆗 实战 2: 存钱罐合约")]),e._v(" "),t("li",[e._v("🆗 实战 3: WETH 合约")]),e._v(" "),t("li",[e._v("#️⃣ 问答题")])]),e._v(" "),t("h2",{attrs:{id:"_1️⃣-区块链基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-区块链基础"}},[e._v("#")]),e._v(" 1️⃣ 区块链基础")]),e._v(" "),t("p",[e._v("Solidity 是在兼容 EVM 的区块链上开发智能合约的语言，我们不需要关心所在区块链底层逻辑，只要是兼容 EVM 的公链，我们都可以使用 Solidity 进行智能合约的编码。简单了解以下的区块链概念：")]),e._v(" "),t("ul",[t("li",[e._v("事务")]),e._v(" "),t("li",[e._v("交易")]),e._v(" "),t("li",[e._v("地址")]),e._v(" "),t("li",[e._v("区块")]),e._v(" "),t("li",[e._v("存储/内存/栈")])]),e._v(" "),t("h3",{attrs:{id:"本节配套视频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=1",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 1 节: 区块链基础")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=ao5nkAgx7kU&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=1",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 1 节: 区块链基础")])])]),e._v(" "),t("h3",{attrs:{id:"_1-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务"}},[e._v("#")]),e._v(" 1.事务")]),e._v(" "),t("p",[e._v("事务意味着你想做的事情，要么一点没做，要么全部完成。具有原子性，不存在修改一半的情况。")]),e._v(" "),t("p",[e._v("比如从 A 地址向 B 地址转账 100 元，那么数据库里 A 减 100 元，B 加 100 元。如果因为某些原因导致 A 已经减了 100 元，但是 B 加 100 元中间出现了异常。因为事务的原子性，发生失败后 A/B 地址都不会发生任何修改。这种场景在合约中经常发生，会经常看到 "),t("em",[t("a",{attrs:{href:"https://etherscan.io/tx/0xda8c0b80d8e240a83c8f6b067c4656babeb13e8e0ece4fd4292aa06252f1285c",target:"_blank",rel:"noopener noreferrer"}},[e._v("out of gas"),t("OutboundLink")],1)]),e._v(" 异常，这是因为 gas 被耗尽。此时合约中做的所有修改都会被回滚。")]),e._v(" "),t("p",[e._v("gas:合约的手续费；是作为用户为当前交易支付的手续费，每一笔交易都会收取 gas 费，目的是限制交易需要做的工作量，需要做的事情越多，所花费的 gas 也就越多；gas 会按照特定规则进行逐渐消耗，如果执行完成后还有剩余，gas 会在当前交易内原路返回到交易发起者的地址中。")]),e._v(" "),t("h3",{attrs:{id:"_2-交易"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-交易"}},[e._v("#")]),e._v(" 2.交易")]),e._v(" "),t("p",[e._v("交易可以看作一个地址发送到另外一个地址的消息，可能包含一个二进制数据和以太币。")]),e._v(" "),t("ul",[t("li",[e._v("如果目标地址含有代码，则此代码会被执行，并以 payload 作为入参。")]),e._v(" "),t("li",[e._v("如果目标地址是零地址，此交易将创建一个新合约。\n"),t("ul",[t("li",[e._v("这时候用来创建合约的 payload 会被"),t("strong",[e._v("转为 EVM 字节码")]),e._v("并"),t("strong",[e._v("执行")]),e._v("，执行的输出作为合约代码永久存在区块链上。")]),e._v(" "),t("li",[e._v("所以如果创建一个合约，并不需要向链上发送实际的合约代码，只需发送能够产生合约代码的代码就可以。")])])])]),e._v(" "),t("p",[e._v("区块链中的交易遵守事务的特性。交易总是由发送人（创建交易的地址）进行签名。区块链底层会确保只有持有该地址密钥才能发起交易。正因为这个特性，所以才能为区块链上特定状态的修改增加保护机制。")]),e._v(" "),t("p",[e._v('比如在合约中指定某一个方法只有"管理员"账号可以用，我们只需要验证调用者是否为管理员地址就可以了，至于地址权限的保护事情并不需要关心，只要是该账号发起的交易，就认为是管理员在操作。安全方面我们需要考虑的是，如果某一个地址被盗了怎么样，通常这些是业务逻辑决定，比如多签钱包的业务。')]),e._v(" "),t("h3",{attrs:{id:"_3-地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-地址"}},[e._v("#")]),e._v(" 3.地址")]),e._v(" "),t("p",[e._v("地址很多时候也被称为账户，EVM 中有两类地址，一类是外部地址，一类是合约地址。")]),e._v(" "),t("ul",[t("li",[e._v("外部地址：由"),t("strong",[e._v("公钥-私钥对")]),e._v("控制\n"),t("ul",[t("li",[e._v("常用的助记词，keystore 文件等只是方便用户储存，底层还是会转成私钥。")]),e._v(" "),t("li",[e._v("一般是钱包应用创建的地址。公钥就是"),t("code",[e._v("0xABC")]),e._v("的这种以太坊收款地址，私钥可能是助记词生成，可能是 keystore 文件生成，也可能是用户直接保存的。")])])]),e._v(" "),t("li",[e._v("合约地址：由地址一起存储的代码控制。")])]),e._v(" "),t("p",[e._v("无论外部地址，还是合约地址，对于 EVM 来说，都是一样的。每个地址都有一个键值对形式的持久化存储。其中 key 和 value 都是 256 位，我们称为存储。此外每个地址都会有一个以太币的余额，合约地址也是如此；余额会因为发送包含以太币的交易而改变。")]),e._v(" "),t("h3",{attrs:{id:"_4-区块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-区块"}},[e._v("#")]),e._v(" 4.区块")]),e._v(" "),t("p",[e._v("你可能听过区块链的双花攻击，女巫攻击等作恶方式。如果你没有听过也没有关系，因为它们对于智能合约开发来说并不重要，我们编写的 Solidity 代码能运行在以太坊网络，也可以运行在 BSC， Matic，Eos EVM 网络等，就像前文说的那样，无论他们采用什么底层逻辑，只要它们支持 EVM 就足够了，底层逻辑不用关心。")]),e._v(" "),t("p",[e._v("我们需要关心的是，"),t("strong",[e._v("区块可能被回滚，交易可能被作废")]),e._v("，所以会出现你发起的交易被回滚甚至从区块链中抹除掉的可能。区块链不能保证当前的交易一定包含在下一个区块中。如果你开发的合约有顺序关系，要注意这个特性。合约内的逻辑，不能将某一个块作为依赖。")]),e._v(" "),t("h3",{attrs:{id:"_5-存储-内存-栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-存储-内存-栈"}},[e._v("#")]),e._v(" 5.存储/内存/栈")]),e._v(" "),t("p",[t("strong",[e._v("存储")]),e._v("：每一个地址都有一个持久化的内存，存储是将 256 位字映射到 256 位字的键值存储区。所以数据类型的最大值是 "),t("code",[e._v("uint256")]),e._v("/"),t("code",[e._v("int256")]),e._v("/"),t("code",[e._v("bytes32")]),e._v("，合约只能读写存储区内属于自己的部分。")]),e._v(" "),t("p",[t("strong",[e._v("内存")]),e._v("：合约会试图为每一次消息调用获取一块被重新擦拭干净的内存实例。所以储存在内存中的数据，在函数执行完以后就会被销毁。内存是线性的，可按字节级寻址，但读的长度被限制为 256 位，而写的长度可以是 8 位或 256 位。")]),e._v(" "),t("p",[t("strong",[e._v("栈")]),e._v("：合约的所有计算都在一个被称为栈（stack）的区域执行，栈最大有 1024 个元素，每一个元素长度是 256 bit；所以调用深度被限制为 1024 ，对复杂的操作，推荐使用循环而不是递归。")]),e._v(" "),t("h2",{attrs:{id:"_2️⃣-hello-world"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-hello-world"}},[e._v("#")]),e._v(" 2️⃣ Hello World")]),e._v(" "),t("p",[e._v("Solidity 合约类似于面向对象语言中的类。合约中有用于数据持久化的状态变量，和可以修改状态变量的函数。 调用另一个合约实例中函数时，会切换执行时的上下文，此时前一个合约的状态变量就不能访问了。后面会逐步展开介绍，国际惯例，使用当前语言的 Hello World 作为第一个例子。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-2"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=2",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 2 节: Hello World")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=MP25t3nKSZM&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=2",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 2 节: Hello World")])])]),e._v(" "),t("h3",{attrs:{id:"_1-例子代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-例子代码"}},[e._v("#")]),e._v(" 1.例子代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Hello {\n    // 24509 gas\n    string public message = "Hello World!"; // 状态变量\n\n    // 24473\n    function fn1() public view returns (string memory) {\n        return message;\n    }\n\n    // 21801. 内存中直接返回\n    function fn2() public pure returns(string memory){\n        return "Hello World!";\n    }\n\n    // 21880\n    function fn3() public pure returns(string memory){\n        return fn2(); // 使用方法；函数调用函数，没有this。直接调用\n    }\n}\n')])])]),t("h3",{attrs:{id:"_2-remix-编译-部署-运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-remix-编译-部署-运行"}},[e._v("#")]),e._v(" 2.remix 编译，部署，运行")]),e._v(" "),t("p",[e._v("Remix IDE 是学习合约的好帮手，即开即用，无需各种依赖，让我们可以专注于合约的学习和开发。我们需要了解基本的 Remix 部署和代码测试。")]),e._v(" "),t("p",[t("strong",[e._v("1.编写代码")]),e._v("：点击左侧 "),t("strong",[e._v("File explorer")]),e._v("，然后点击 "),t("em",[e._v("Create new file")]),e._v(" 图标，创建 "),t("code",[e._v("helloword.sol")]),e._v(" 文件，文件内容就是 Hello World 例子。")]),e._v(" "),t("p",[t("strong",[e._v("2.编译代码")]),e._v("：点击左侧 "),t("strong",[e._v("Solidity compile")]),e._v("，然后点击 "),t("code",[e._v("Compile helloword.sol")]),e._v('，出现绿色的"对号"就是 compilation successful 了。（小技巧：选中此页面的 '),t("em",[e._v("Auto compile")]),e._v(" 可以自动编译最新修改保存后的代码，推荐选中此选项。）")]),e._v(" "),t("p",[t("strong",[e._v("3.部署合约")]),e._v("：点击左侧 "),t("strong",[e._v("Deploy & run transactions")]),e._v(" 页面，点击黄色按钮 「Depoly」，此时按钮下方区域会出现"),t("strong",[e._v("Deployed Contracts")]),e._v("，这里就是刚刚部署出来的合约地址。")]),e._v(" "),t("p",[t("strong",[e._v("4.运行合约")]),e._v("：展开"),t("strong",[e._v("Deployed Contracts")]),e._v("中刚部署的合约，找到刚刚部署的 Hello 合约，点击 "),t("code",[e._v("message")]),e._v("/"),t("code",[e._v("fn1")]),e._v("/"),t("code",[e._v("fn2")]),e._v("/"),t("code",[e._v("fn3")]),e._v(" 按钮都可以读取到"),t("code",[e._v('"Hello World!"')]),e._v("内容。")]),e._v(" "),t("h3",{attrs:{id:"_3-hello-world-例子分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-hello-world-例子分析"}},[e._v("#")]),e._v(" 3.Hello World 例子分析")]),e._v(" "),t("p",[e._v("上面的代码获取 message 可以得到 "),t("code",[e._v('"Hello World!"')]),e._v(",调用 "),t("code",[e._v("fn1()")]),e._v("函数，也可以得到 "),t("code",[e._v('"Hello World!"')]),e._v("; 这是因为 "),t("code",[e._v("fn1")]),e._v(" 里面的逻辑是返回 message。通过这个例子可以发现，合约内调用变量并不需要使用 "),t("code",[e._v("this")]),e._v(" 之类的关键字，直接使用即可，调用函数也是如此，直接 "),t("code",[e._v("fnName([x])")]),e._v(" 就可以。")]),e._v(" "),t("p",[e._v("通过 Remix 调用详情我们可以发现，他们消耗的 gas 不相同。通常直接获取 "),t("code",[e._v("message")]),e._v(" 更省钱，因为"),t("code",[e._v("message")]),e._v("储存在状态变量中，而函数"),t("code",[e._v("helloWorld")]),e._v("是读取了状态变量然后再返回出去。但是在 Remix 中有时候得到的结果却并不相同，不用太相信 Remix 内的 gas。在 Remix 中，代码顺序，变量名/函数名长短的修改都可以大大影响 gas 消耗，不要太相信 Remix 的 ga 消耗。")]),e._v(" "),t("p",[e._v("在编写 solidity 代码时，保证安全的前提下，让合约消耗更少的 gas 是一个重要的优化方向。后面会有专门的一章进行 gas 优化的探讨，这里不再多展开。")]),e._v(" "),t("h2",{attrs:{id:"_3️⃣-合约代码中的三种注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-合约代码中的三种注释"}},[e._v("#")]),e._v(" 3️⃣ 合约代码中的三种注释")]),e._v(" "),t("p",[e._v("我们看到第一行的代码是 "),t("code",[e._v("// SPDX-License-Identifier: MIT")]),e._v(" 这里面的 "),t("code",[e._v("//")]),e._v(" 符号，是注释符。用来标记和记录代码开发相关的事情，注释的内容是不会被程序运行，Solidity 支持单行注释和块注释，注释是为了更好的解释代码。"),t("strong",[e._v("请不要相信好的代码不需要注释这种鬼言论")]),e._v("。代码中加入注释可以更好的团队协作，让自己更好的进行代码开发，以及让阅读者更快捷的理解代码逻辑。在实际工作中经常会出现自己写的代码一年半载之后再看，复杂些的逻辑可能需要浪费很多时间在代码理解上，如果再没有设计图和代码注释，简直想骂人。")]),e._v(" "),t("p",[e._v("Solidity 支持 3 种注释方式；")]),e._v(" "),t("ul",[t("li",[e._v("单行注释")]),e._v(" "),t("li",[e._v("块注释")]),e._v(" "),t("li",[e._v("NatSpec 描述注释")])]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-3"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=3",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 3 节: 合约代码中的三种注释")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=QZ-1r4rjlyQ&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=3",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 3 节: 合约代码中的三种注释")])])]),e._v(" "),t("h3",{attrs:{id:"_1-单行注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-单行注释"}},[e._v("#")]),e._v(" 1.单行注释")]),e._v(" "),t("p",[e._v("格式: "),t("code",[e._v("// 注释内容")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('string message = "Hello World!"; // 这是单行注释\n')])])]),t("p",[e._v("如上，"),t("code",[e._v("//")]),e._v(" 后面的内容都会被编译器忽略，为了可读性，一般会在"),t("code",[e._v("//")]),e._v("后面加一个空格。")]),e._v(" "),t("h3",{attrs:{id:"_2-块注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-块注释"}},[e._v("#")]),e._v(" 2.块注释")]),e._v(" "),t("p",[e._v("格式如下，在 "),t("code",[e._v("/*")]),e._v(" 与 "),t("code",[e._v("*/")]),e._v(" 之间的内容，都被编译器忽略")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    /*\n    这是块注释\n    */\n")])])]),t("p",[e._v("为了可读性，一般块注释的行首都加 "),t("code",[e._v("*")]),e._v(" 和空格，如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    /**\n     * 这是块注释\n     * 这是块注释\n     */\n")])])]),t("h3",{attrs:{id:"_3-natspec-描述注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-natspec-描述注释"}},[e._v("#")]),e._v(" 3.NatSpec 描述注释")]),e._v(" "),t("p",[e._v("单行使用 "),t("code",[e._v("///")]),e._v(" 开始，多行使用 "),t("code",[e._v("/**")]),e._v(" 开头以 "),t("code",[e._v("*/")]),e._v(" 结尾。NatSpec 描述注释的作用非常重要，它是为函数、返回变量等提供丰富的文档。在编写合约的时候，强烈推荐使用 "),t("code",[e._v("NatSpec")]),e._v(" 为所有的开放接口（只要是在 "),t("code",[e._v("ABI")]),e._v(" 里呈现的内容）进行完整的注释。")]),e._v(" "),t("h4",{attrs:{id:"⓵-简单演示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-简单演示"}},[e._v("#")]),e._v(" ⓵ 简单演示")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/// @title  一个简单的数据存储演示\n/// @author Anbang\n/// @notice 您智能将此合约用于最基本的演示\n/// @dev    提供了存储方法/获取方法\n/// @custom:xx    自定义的描述/这个是实验的测试合约\ncontract  TinyStorage {\n    // data\n    uint256 storedData;\n\n    /// @notice 储存 x\n    /// @param _x: storedData 将要修改的值\n    /// @dev   将数字存储在状态变量 storedData 中\n    function set(uint256 _x) public{\n        storedData = _x;\n    }\n\n    /// @notice 返回存储的值\n    /// @return 储存值\n    /// @dev   检索状态变量 storedData 的值\n    function get() public view returns(uint256){\n        return storedData;\n    }\n\n\n    /**\n     * @notice 第二种写法\n     * @param _x: XXXXX\n     * @dev   XXXXX\n     * @return XXXXX\n     * @inheritdoc :\n     */\n}\n")])])]),t("p",[e._v("上面所有标签都是可选的。下表解释了每个 NatSpec 标记的用途以及可以使用在哪些位置。我们可以选择合适的标记进行记录")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("标签")]),e._v(" "),t("th",[e._v("说明")]),e._v(" "),t("th",[e._v("语境")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("@title")])]),e._v(" "),t("td",[e._v("描述 contract/interface 的标题")]),e._v(" "),t("td",[e._v("contract, interface, library")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@author")])]),e._v(" "),t("td",[e._v("作者姓名")]),e._v(" "),t("td",[e._v("contract, interface, library")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@notice")])]),e._v(" "),t("td",[e._v("向最终用户解释这是做什么的")]),e._v(" "),t("td",[e._v("contract, interface, library,"),t("br"),e._v("function, 公共状态变量"),t("br"),e._v("event")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@dev")])]),e._v(" "),t("td",[e._v("向开发人员解释任何额外的细节")]),e._v(" "),t("td",[e._v("contract, interface, library,"),t("br"),e._v("function, 状态变量, event")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@param")])]),e._v(" "),t("td",[e._v("记录参数（后面必须跟参数名称）")]),e._v(" "),t("td",[e._v("function, event,"),t("br"),e._v("自定义错误")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@return")])]),e._v(" "),t("td",[e._v("函数的返回变量")]),e._v(" "),t("td",[e._v("function, 公共状态变量")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@inheritdoc")])]),e._v(" "),t("td",[e._v("从基本函数中复制所有缺失的标签（必须后跟合约名称）")]),e._v(" "),t("td",[e._v("function, 公共状态变量")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("@custom:...")])]),e._v(" "),t("td",[e._v("自定义标签，语义由应用程序定义")]),e._v(" "),t("td",[e._v("所有位置均可以")])])])]),e._v(" "),t("h4",{attrs:{id:"⓶-文档输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-文档输出"}},[e._v("#")]),e._v(" ⓶ 文档输出")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("NatSpec")]),e._v(" 描述注释的另一个好处是，当被编译器解析时，上面示例中的代码将生成两个不同的 JSON 文件。")]),e._v(" "),t("ul",[t("li",[e._v("User Documentation：供最终用户在执行功能时作为通知使用的")]),e._v(" "),t("li",[e._v("Developer Documentation：供开发人员使用的。")])]),e._v(" "),t("p",[e._v("如果将上述合约另存为，"),t("code",[e._v("a.sol")]),e._v(" 则您可以使用以下命令生成文档：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("solc --userdoc --devdoc a.sol\n")])])]),t("h4",{attrs:{id:"⓷-继承说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-继承说明"}},[e._v("#")]),e._v(" ⓷ 继承说明")]),e._v(" "),t("p",[e._v("TODO: 在后面合约继承的时候再演示使用。")]),e._v(" "),t("p",[e._v("如果函数是继承别的合约，没有 NatSpec 的函数将自动继承其基本函数的文档。但是下面三种情况是例外的：")]),e._v(" "),t("ul",[t("li",[e._v("当参数名称不同时。\n"),t("ul",[t("li",[e._v("这时候是函数的重载，函数签名已经发生了改变。")])])]),e._v(" "),t("li",[e._v("当有多个基本功能时。\n"),t("ul",[t("li",[e._v("这时候因为发生了冲突，supper 中有多个父级")])])]),e._v(" "),t("li",[e._v("当有一个明确的 "),t("code",[e._v("@inheritdoc")]),e._v(" 标签指定应该使用哪个合约来继承时。")])]),e._v(" "),t("p",[e._v("更多 NatSpec 请参考: "),t("a",{attrs:{href:"https://github.com/aragon/radspec",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/aragon/radspec"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"_4️⃣-合约结构介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-合约结构介绍"}},[e._v("#")]),e._v(" 4️⃣ 合约结构介绍")]),e._v(" "),t("ol",[t("li",[e._v("SPDX 版权声明\n"),t("ul",[t("li",[e._v("https://spdx.org/licenses/")])])]),e._v(" "),t("li",[e._v("pragma solidity 版本限制")]),e._v(" "),t("li",[e._v("contract 关键字")]),e._v(" "),t("li",[e._v("import 导入声明")]),e._v(" "),t("li",[e._v("interface: 接口")]),e._v(" "),t("li",[e._v("library:库合约")])]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-4"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=4",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 4 节: 合约结构介绍 1")])]),e._v(" "),t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=5",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 4 节: 合约结构介绍 2")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=9qICkLTA6iA&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=4",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 4 节: 合约结构介绍 1")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=n0kX_EfhobI&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=5",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 4 节: 合约结构介绍 2")])])]),e._v(" "),t("h3",{attrs:{id:"_1-spdx-版权声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-spdx-版权声明"}},[e._v("#")]),e._v(" 1.SPDX 版权声明")]),e._v(" "),t("p",[e._v("第 1 行 "),t("code",[e._v("// SPDX-License-Identifier: MIT")]),e._v(" 就是合约的版权声明。其中 "),t("strong",[e._v("SPDX-License-Identifier")]),e._v("(SPDX 许可标示) 是标注当前的智能合约采用什么样的对外开放标准，该标准规定了别人是否拥有商业开发，学习使用等权利。代码中使用的 "),t("code",[e._v("MIT")]),e._v(" 规定了其他人随便用该代码，但出问题不负责。"),t("a",{attrs:{href:"https://spdx.org/licenses/MIT.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("MIT 详细解释"),t("OutboundLink")],1),e._v("；SPDX 许可标示的注释在文件的任何位置都可以被编译器识别到的，按照规范建议把它放在文件的顶部第一行。")]),e._v(" "),t("p",[e._v("如果一个项目开源了智能合约的源代码，可以更好地建立社区信任。但是由于提供源代码就不可避免的涉及到版权或者法律问题。所以 solidity 鼓励开源，但是开源并不等于放弃版权。如果你不想指定任何许可证，或者代码就是不想开源，Solidity 推荐使用 "),t("code",[e._v("UNLICENSED")]),e._v(" ;"),t("code",[e._v("UNLICENSED")]),e._v(" 不存在于 SPDX 许可证列表中,与 UNLICENSE （授予所有人所有权利）不同，它比 "),t("code",[e._v("UNLICENSE")]),e._v(" 多一个 "),t("code",[e._v("D")]),e._v(" 字母。")]),e._v(" "),t("p",[e._v("需要注意: 源代码这里，编译器不会验证 SPDX 许可标示是否符合规范，比如我可以写为 "),t("code",[e._v("// SPDX-License-Identifier: ANBANG")]),e._v(" ，并不会影响代码的运行。但是这里的标示会被打包在 "),t("code",[e._v("bytecode metadata")]),e._v(" 里。")]),e._v(" "),t("h4",{attrs:{id:"⓵-bytecode-metadata-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-bytecode-metadata-介绍"}},[e._v("#")]),e._v(" ⓵ bytecode metadata 介绍")]),e._v(" "),t("p",[e._v("当我们使用 "),t("code",[e._v("remix")]),e._v(" 编译合约的时候，会在根目录创建 "),t("code",[e._v("artifacts")]),e._v(" 文件夹，其中包含 "),t("code",[e._v("build-info")]),e._v(" 记录构建信息的文件夹，以及每个合约名字作为文件名的文件夹，比如 "),t("code",[e._v("contract Hello")]),e._v(" 将生成")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Hello.json")]),e._v(" 文件")]),e._v(" "),t("li",[t("code",[e._v("Hello_metadata.json")]),e._v(" 文件")])]),e._v(" "),t("h4",{attrs:{id:"⓶-hello-json-文件结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-hello-json-文件结构"}},[e._v("#")]),e._v(" ⓶ "),t("code",[e._v("Hello.json")]),e._v(" 文件结构")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  deploy: {},\n  data: {\n    bytecode: {},\n    deployedBytecode: {},\n    gasEstimates: {},\n    methodIdentifiers: {},\n  },\n  abi: [],\n};\n")])])]),t("h4",{attrs:{id:"⓷-hello-metadata-json-文件结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-hello-metadata-json-文件结构"}},[e._v("#")]),e._v(" ⓷ "),t("code",[e._v("Hello_metadata.json")]),e._v(" 文件结构")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  compiler: {\n    version: "0.8.17+commit.xxx",\n  },\n  language: "Solidity",\n  output: {\n    abi: [],\n    devdoc: {},\n    userdoc: {},\n  },\n  settings: {},\n  sources: {\n    "aaa.sol": {\n      keccak256:\n        "0x637c141739144cd991b9350336a1f8c3b948811d7ed743fefb4aad99d7bb362f",\n      license: "ANBANG",\n      urls: [\n        "bzz-raw://9eea517225b90242d6e3761046f5f5a8f0a2393747c89f3af01f34ad00764dc4",\n        "dweb:/ipfs/QmXp5wap9ZNC9fihdA7aLMe7bKWBjeAuv7khEuvKrgp9Bx",\n      ],\n    },\n  },\n  version: 1,\n};\n')])])]),t("p",[t("code",[e._v("// SPDX-License-Identifier: ANBANG")]),e._v(" 中的 "),t("code",[e._v("ANBANG")]),e._v(" 就是在 "),t("code",[e._v("sources -> filename.sol -> license")]),e._v(" 中")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("总结:")]),e._v(" "),t("ol",[t("li",[e._v("根据自己的合约情况，选择合适的版权声明可以避免很多不必要的版权麻烦。")])])]),e._v(" "),t("li",[t("strong",[e._v("扩展:")]),e._v(" "),t("ol",[t("li",[e._v("更多的 SPDX-License-Identifier 类型介绍，参照文章 "),t("a",{attrs:{href:"https://spdx.org/licenses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SPDX License List"),t("OutboundLink")],1),e._v(" 详细阅读。")]),e._v(" "),t("li",[e._v("Solidity 遵循 "),t("a",{attrs:{href:"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#license",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm 的 license 建议"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("更多的 bytecode metadata 参照文章 "),t("a",{attrs:{href:"#"}},[e._v("合约的 metadata")])])])])]),e._v(" "),t("h3",{attrs:{id:"_2-pragma-solidity-版本限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-pragma-solidity-版本限制"}},[e._v("#")]),e._v(" 2.pragma solidity 版本限制")]),e._v(" "),t("p",[e._v("第 2 行 "),t("code",[e._v("pragma solidity ^0.8.17;")]),e._v(" 指令，它是告诉编译器，我当前的合约代码采用的是 Solidity 0.8.17 这个版本为基础编写的，解析部署时需要在匹配的版本下进行，在区块链浏览器上进行合约验证时，也需要选择匹配的版本。")]),e._v(" "),t("h4",{attrs:{id:"⓵-使用-的意义和优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-使用-的意义和优点"}},[e._v("#")]),e._v(" ⓵ 使用 "),t("code",[e._v("^")]),e._v(" 的意义和优点")]),e._v(" "),t("p",[e._v("而 "),t("code",[e._v("^0.8.17")]),e._v(" 中的 "),t("code",[e._v("^")]),e._v(" 表示小版本兼容，大版本不兼容，相当于 "),t("code",[e._v("pragma solidity >= 0.8.17 < 0.9.0;")]),e._v("。他既不允许低于"),t("code",[e._v("0.8.17")]),e._v("的编译器编译，也不允许大于等于 "),t("code",[e._v("0.9.0")]),e._v(" 版本的编译器进行编译。之所以这么写，不写死 "),t("code",[e._v("pragma solidity 0.8.17;")]),e._v(" 是为了可以享受到编译器的补丁版，比如以后出来了 "),t("code",[e._v("0.8.40")]),e._v(" 版本，那么当前合约是可以运行在未来的 "),t("code",[e._v("0.8.40")]),e._v(" 这个新版本的编译器。但是如果是大版本升级到了 "),t("code",[e._v("0.9.0")]),e._v("，那么编译器不会用新版的"),t("code",[e._v("0.9.x")]),e._v("解析，会使用 0.8 的最后一个稳定版本来进行解析编译。这里如果不加 "),t("code",[e._v("^")]),e._v(",直接写"),t("code",[e._v("pragma solidity 0.8.17;")]),e._v(",就是告诉编译器，当前合约只选择在 "),t("code",[e._v("0.8.17")]),e._v(" 版本来编译和部署；这样做的缺点就是享受不到以后出的补丁版的编译器。")]),e._v(" "),t("h4",{attrs:{id:"⓶-跨大版本的合约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-跨大版本的合约"}},[e._v("#")]),e._v(" ⓶ 跨大版本的合约")]),e._v(" "),t("p",[e._v("如果你打算跨大版本的合约，可以使用"),t("code",[e._v(">")]),e._v(" /"),t("code",[e._v(">=")]),e._v("/"),t("code",[e._v("<")]),e._v("/"),t("code",[e._v("<=")]),e._v("来操作，比如 "),t("code",[e._v("pragma solidity >=0.7.0 <0.9.0;")]),e._v("。")]),e._v(" "),t("p",[e._v("注意："),t("code",[e._v("pragma")]),e._v(" 指令只对当前的源文件起作用，如果把文件 "),t("code",[e._v("B")]),e._v(" 导入到文件 "),t("code",[e._v("A")]),e._v("，文件 B 的 pragma 将不会自动应用于文件 A。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("总结:")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("pragma solidity ^0.8.17;")]),e._v(" 是用来告诉编译器应该选择什么版本来解析编译当前代码。")]),e._v(" "),t("li",[t("code",[e._v("pragma")]),e._v(" 指令只对当前的源文件起作用。")])])])]),e._v(" "),t("p",[e._v("注：一份源文件可以包含"),t("strong",[e._v("多个版本声明")]),e._v("、多个导入声明和多个合约声明。")]),e._v(" "),t("h3",{attrs:{id:"_3-contract-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-contract-关键字"}},[e._v("#")]),e._v(" 3.contract 关键字")]),e._v(" "),t("p",[e._v("第 3 行的 "),t("code",[e._v("contract Hello {}")]),e._v(" 是合约的基本结构；其中 "),t("code",[e._v("contract")]),e._v(" 声明了当前代码块内是一个完整的合约。而 "),t("code",[e._v("Hello")]),e._v(" 是当前合约的名字，合约名称是必须的，首字母一般采用大写字母开头。")]),e._v(" "),t("p",[t("code",[e._v("contract")]),e._v(" 代表特殊的意义，这种有特殊意义的词，在编程界里一般被称为 "),t("code",[e._v("保留关键字")]),e._v("；保留关键字是现在或者将来被用到的特殊代指，都有固定意义，所以保留关键字不能作为变量名和函数名字。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("总结:")]),e._v(" "),t("ol",[t("li",[e._v("contract 基本结构是 "),t("code",[e._v("contract ContractName {}")])]),e._v(" "),t("li",[e._v("Solidity 合约中，合约的名字是必须的。")]),e._v(" "),t("li",[e._v("合约的名称，一般约定为 大驼峰命名方式")]),e._v(" "),t("li",[e._v("contract 是保留关键字")]),e._v(" "),t("li",[e._v("保留关键字不能作为变量名和函数名")])])]),e._v(" "),t("li",[t("strong",[e._v("扩展:")]),e._v(" "),t("ol",[t("li",[e._v("合约的编写规范，参照 "),t("RouterLink",{attrs:{to:"/forever/903.styleguide.html"}},[e._v("合约编码规范")])],1),e._v(" "),t("li",[e._v("更多保留关键字，参照 "),t("RouterLink",{attrs:{to:"/source/03.variable.html#id11"}},[e._v("变量名命名规则")]),e._v(" 详细阅读。")],1)])])]),e._v(" "),t("p",[e._v("注：一份源文件可以包含多个版本声明、多个导入声明和"),t("strong",[e._v("多个合约声明")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"⓵-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-变量"}},[e._v("#")]),e._v(" ⓵ 变量")]),e._v(" "),t("p",[e._v("合约内的 "),t("code",[e._v("message")]),e._v(" 叫做状态变量，状态变量是永久地存储在合约存储中的值。关于变量的更多信息，会在后续 "),t("RouterLink",{attrs:{to:"/source/03.variable.html"}},[e._v("变量")]),e._v(" 那一章详细介绍")],1),e._v(" "),t("h4",{attrs:{id:"⓶-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-函数"}},[e._v("#")]),e._v(" ⓶ 函数")]),e._v(" "),t("p",[e._v("函数是代码的可执行单元，是一组逻辑的集合。关于变量的更多信息，会在后续 "),t("RouterLink",{attrs:{to:"/source/04.function.html"}},[e._v("函数")]),e._v(" 那一章详细介绍")],1),e._v(" "),t("h4",{attrs:{id:"⓷-this-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-this-关键字"}},[e._v("#")]),e._v(" ⓷ this 关键字")]),e._v(" "),t("p",[e._v("Solidity 中 "),t("code",[e._v("this")]),e._v(" 代表合约对象本身；")]),e._v(" "),t("ul",[t("li",[e._v("可以通过 "),t("code",[e._v("address(this)")]),e._v(" 获取合约地址。")]),e._v(" "),t("li",[e._v("可以通过 "),t("code",[e._v("this.fnName")]),e._v(" 获取 external 函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    function contractAds() external view returns (address) {\n        return address(this);\n    }\n\n    function testExternal() external view returns (address) {\n        return this.contractAds();\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓸-合约地址-合约创建者地-合约调用者地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓸-合约地址-合约创建者地-合约调用者地址"}},[e._v("#")]),e._v(" ⓸ 合约地址/合约创建者地/合约调用者地址")]),e._v(" "),t("p",[e._v("这三个地址概念一定要完全理解。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 这三个地址的概念一定要理解清楚\ncontract Demo {\n    address public owner;\n\n    constructor() {\n        // 可以用在 constructor 内获取当前合约地址\n        owner = address(this);\n\n        // 不可以在构造函数内调用函数，因为此时合约还没有完成构建好。\n        // this.caller(); 相当于从外部调用 caller 方法\n        // owner = this.caller();\n    }\n\n    function caller() external view returns (address) {\n        return this.contractAds(); // 内部调用 external 可见性的函数\n    }\n\n    function contractAds() external view returns (address) {\n        return address(this);\n    }\n}\n")])])]),t("h4",{attrs:{id:"⓹-合约属性-type-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓹-合约属性-type-关键字"}},[e._v("#")]),e._v(" ⓹ 合约属性:type 关键字")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("type(C).name")]),e._v(":获得合约名")]),e._v(" "),t("li",[t("code",[e._v("type(C).creationCode")]),e._v(":获得包含创建合约字节码的内存字节数组。它可以在内联汇编中构建自定义创建例程，尤其是使用 create2 操作码。 不能在合约本身或派生的合约访问此属性。 因为会引起循环引用。")]),e._v(" "),t("li",[t("code",[e._v("type(C).runtimeCode")]),e._v(":获得合约的运行时字节码的内存字节数组。这是通常由 C 的构造函数部署的代码。 如果 C 有一个使用内联汇编的构造函数，那么可能与实际部署的字节码不同。 还要注意库在部署时修改其运行时字节码以防范定期调用（guard against regular calls）。 与 .creationCode 有相同的限制，不能在合约本身或派生的合约访问此属性。 因为会引起循环引用。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Hello {\n    string public message = "Hello World!";\n}\n\ncontract Demo {\n    function name() external pure returns (string memory) {\n        return type(Hello).name;\n    }\n\n    function creationCode() external pure returns (bytes memory) {\n        return type(Hello).creationCode;\n    }\n    function runtimeCode() external pure returns (bytes memory) {\n        return type(Hello).runtimeCode;\n    }\n}\n')])])]),t("p",[e._v("除了上面介绍的版权声明，版本限制，contract 外，合约文件还包括 "),t("code",[e._v("import")]),e._v(", "),t("code",[e._v("interface")]),e._v(","),t("code",[e._v("library")]),e._v("，一起展开介绍下")]),e._v(" "),t("h3",{attrs:{id:"_4-import-导入声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-import-导入声明"}},[e._v("#")]),e._v(" 4.import 导入声明")]),e._v(" "),t("p",[e._v("功能：从其他文件内倒入需要的变量或者函数。")]),e._v(" "),t("h4",{attrs:{id:"⓵-导入方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-导入方式"}},[e._v("#")]),e._v(" ⓵ 导入方式")]),e._v(" "),t("p",[e._v("既可以导入"),t("strong",[e._v("本地文件")]),e._v("，也可以导入 "),t("strong",[e._v("url")]),e._v("(网络上的 ipfs，http 或者 git 文件)")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("导入所有的全局标志")]),e._v(" "),t("code",[e._v('import "filename";')]),e._v(" 到当前全局范围\n"),t("ol",[t("li",[e._v("导入本地文件:"),t("code",[e._v('import "./ERC20.sol";')]),e._v("，其中"),t("code",[e._v("./")]),e._v("表示当前目录，查找路径参考")]),e._v(" "),t("li",[e._v("导入网络文件:"),t("code",[e._v('import "https://github.com/aaa/.../tools.sol";')])]),e._v(" "),t("li",[e._v("导入本地 NPM 库:\n"),t("ol",[t("li",[t("code",[e._v("$ npm install @openzeppelin/contracts")])]),e._v(" "),t("li",[t("code",[e._v('import "@openzeppelin/contracts/token/ERC721/ERC721.sol";')])])])])])]),e._v(" "),t("li",[t("strong",[e._v("导入所有的全局标志，并创建新的全局符号")]),e._v(" "),t("ol",[t("li",[e._v("方式一: "),t("code",[e._v('import * as symbolName from "filename";')])]),e._v(" "),t("li",[e._v("方式二: "),t("code",[e._v('import "filename" as symbolName;')])])])]),e._v(" "),t("li",[e._v("按需导入，按需修改名称\n"),t("ol",[t("li",[t("code",[e._v('import {symbol1 as aliasName, symbol2} from "filename";')])])])])]),e._v(" "),t("p",[e._v("不推荐导入变量标示名到当前全局范围的方式，因为不可控，容易污染当前的命名空间。如果全局导入，推荐使用 "),t("code",[e._v('import "filename" as symbolName;')])]),e._v(" "),t("p",[e._v("注：一份源文件可以包含多个版本声明、多"),t("strong",[e._v("个导入声明")]),e._v("和多个合约声明。")]),e._v(" "),t("h4",{attrs:{id:"⓶-导入时候的本地路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-导入时候的本地路径"}},[e._v("#")]),e._v(" ⓶ 导入时候的本地路径")]),e._v(" "),t("p",[e._v("上文中的 filename 总是会按路径来处理，以 "),t("code",[e._v("/")]),e._v(" 作为目录分割符、以 "),t("code",[e._v(".")]),e._v(" 标示当前目录、以 "),t("code",[e._v("..")]),e._v(" 表示父目录。 当 "),t("code",[e._v(".")]),e._v(" 或 "),t("code",[e._v("..")]),e._v(" 后面跟随的字符是 "),t("code",[e._v("/")]),e._v(" 时，它们才能被当做当前目录或父目录。 只有路径以当前目录 "),t("code",[e._v(".")]),e._v(" 或父目录 "),t("code",[e._v("..")]),e._v(" 开头时，才能被视为相对路径。")]),e._v(" "),t("p",[e._v("用 "),t("code",[e._v('import "./x.sol" as x;')]),e._v(" 语句导入当前源文件同目录下的文件 "),t("code",[e._v("x.sol")]),e._v(" 。 如果用"),t("code",[e._v('import "x.sol" as x;')]),e._v(" 代替，可能会引入不同的文件（在全局 "),t("code",[e._v("include directory")]),e._v(" 中）。")]),e._v(" "),t("p",[e._v("最终导入哪个文件取决于编译器（见下文）到底是怎样解析路径的。 通常，目录层次不必严格映射到本地文件系统， 它也可以映射到能通过诸如 ipfs，http 或者 git 发现的资源。")]),e._v(" "),t("h3",{attrs:{id:"_5-interface-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-interface-接口"}},[e._v("#")]),e._v(" 5.interface: 接口")]),e._v(" "),t("h4",{attrs:{id:"⓵-接口使用案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-接口使用案例"}},[e._v("#")]),e._v(" ⓵ 接口使用案例")]),e._v(" "),t("p",[e._v("在下面的例子中，定义了 cat 合约以及 dog 合约。他们都有 "),t("code",[e._v("eat")]),e._v(" 方法.以此他们都可以被上面的 "),t("code",[e._v("animalEat")]),e._v(" 接口所接收。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Cat {\n    uint256 public age;\n\n    function eat() public returns (string memory) {\n        age++;\n        return "cat eat fish";\n    }\n\n    function sleep1() public pure returns (string memory) {\n        return "sleep1";\n    }\n}\n\ncontract Dog {\n    uint256 public age;\n\n    function eat() public returns (string memory) {\n        age += 2;\n        return "dog miss you";\n    }\n\n    function sleep2() public pure returns (string memory) {\n        return "sleep2";\n    }\n}\n\ninterface AnimalEat {\n    function eat() external returns (string memory);\n}\n\ncontract Animal {\n    function test(address _addr) external returns (string memory) {\n        AnimalEat general = AnimalEat(_addr);\n        return general.eat();\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓶-type-i-interfaceid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-type-i-interfaceid"}},[e._v("#")]),e._v(" ⓶ "),t("code",[e._v("type(I).interfaceId")])]),e._v(" "),t("p",[e._v("返回接口"),t("code",[e._v("I")]),e._v(" 的 "),t("code",[e._v("bytes4")]),e._v(" 类型的接口 ID，接口 ID 参考： "),t("a",{attrs:{href:"https://learnblockchain.cn/docs/eips/eip-165.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP-165"),t("OutboundLink")],1),e._v(" 定义的， 接口 ID 被定义为 XOR （异或） 接口内所有的函数的函数选择器（除继承的函数。")]),e._v(" "),t("p",[e._v("上面的代码种，可以增加如下的函数来查看 "),t("code",[e._v("interfaceId")]),e._v(";")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("contract Animal {\n    // ...\n    function interfaceId() external pure returns (bytes4) {\n        return type(AnimalEat).interfaceId;\n    }\n}\n")])])]),t("p",[e._v("更多内容在 "),t("RouterLink",{attrs:{to:"/source/13.interface.html"}},[e._v("interface:接口")]),e._v(" 那一章详细介绍。")],1),e._v(" "),t("h3",{attrs:{id:"_6-library-库合约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-library-库合约"}},[e._v("#")]),e._v(" 6.library:库合约")]),e._v(" "),t("p",[e._v("库与合约类似，但它的目的是在一个指定的地址，且仅部署一次，然后通过 EVM 的特性来复用代码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("library Set {\n    struct Data { mapping(uint => bool) flags; }\n    function test(){\n    }\n}\n")])])]),t("p",[e._v("其他合约调用库文件的内容直接通过库文件名.方法名例如："),t("code",[e._v("Set.test()")]),e._v("。")]),e._v(" "),t("p",[e._v("更多内容在 "),t("RouterLink",{attrs:{to:"/source/14.library.html"}},[e._v("Library:库")]),e._v(" 那一章详细介绍。")],1),e._v(" "),t("h2",{attrs:{id:"_5️⃣-全局的以太币单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-全局的以太币单位"}},[e._v("#")]),e._v(" 5️⃣ 全局的以太币单位")]),e._v(" "),t("p",[e._v("现实生活中经常会听说，提现 1.5 个以太币，或者某笔交易手续费花了 0.02 个以太坊等。这些带有小数点的数字是日常交流使用的。但是在合约内，却没有这种小数概念的货币金额。比如 1 个 ETH 的金额是 "),t("code",[e._v("10**18 wei")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-5"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=6",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 5 节: 全局的以太币单位")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=QgZfwI_fVEg&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=6",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 5 节: 全局的以太币单位")])])]),e._v(" "),t("h3",{attrs:{id:"_1-基础单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础单位"}},[e._v("#")]),e._v(" 1.基础单位")]),e._v(" "),t("p",[e._v("为了方便合约开发者操作，也提供如下这种便捷的换算方式。")]),e._v(" "),t("p",[e._v("以太币单位之间的换算就是在数字后边加上 "),t("code",[e._v("wei")]),e._v("、 "),t("code",[e._v("gwei")]),e._v("、 "),t("code",[e._v("ether")]),e._v(" 来实现的，如果后面没有单位，缺省为 "),t("code",[e._v("wei")]),e._v("。例如 "),t("code",[e._v("1 ether == 1e18")]),e._v(" 的逻辑判断值为 true。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("1 ether = 1 * 10^18 wei")])]),e._v(" "),t("li",[t("code",[e._v("1 ether = 1 * 10^9 gwei")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // 返回 true\n    function test() public pure returns (bool a,bool b,bool c) {\n        a = 1 wei == 1;\n        b = 1 gwei == 1e9;\n        c = 1 ether == 1e18;\n    }\n}\n")])])]),t("h3",{attrs:{id:"_2-变量使用以太币单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量使用以太币单位"}},[e._v("#")]),e._v(" 2.变量使用以太币单位")]),e._v(" "),t("p",[t("strong",[e._v("注意: 这些后缀不能直接用在变量后边")]),e._v("。如果想用以太币单位来计算输入参数，你可以使用乘法来转换: "),t("code",[e._v("amountEth * 1 ether")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256 public amount;\n\n    constructor() {\n        amount = 1;\n    }\n\n    function fnEth() public view returns (uint256) {\n        return amount + 1 ether; // 1000000000000000001\n    }\n\n    function fnGwei() public view returns (uint256) {\n        return amount + 1 gwei; // 1000000001\n    }\n\n    // 这些后缀不能直接用在变量后边。如果想用以太币单位来计算输入参数，你可以用如下方式来完成：\n    function testVar(uint256 amountEth) public view returns (uint256) {\n        return amount + amountEth * 1 ether;\n    }\n}\n")])])]),t("h2",{attrs:{id:"_6️⃣-接收-eth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-接收-eth"}},[e._v("#")]),e._v(" 6️⃣ 接收 ETH")]),e._v(" "),t("p",[e._v("三个关键字")]),e._v(" "),t("ul",[t("li",[e._v("payable\n"),t("ul",[t("li",[e._v("使用 payable 标记的"),t("strong",[e._v("函数")]),e._v("可以用于发送和接收 Eth。")]),e._v(" "),t("li",[e._v("使用 payable 标记的 "),t("strong",[e._v("地址变量")]),e._v("，允许发送和接收 Eth。")])])]),e._v(" "),t("li",[e._v("fallback\n"),t("ul",[t("li",[e._v("一个合约可以最多有一个回退函数。")])])]),e._v(" "),t("li",[e._v("receive\n"),t("ul",[t("li",[e._v("一个合约最多有一个 "),t("code",[e._v("receive")]),e._v(" 函数")])])])]),e._v(" "),t("p",[e._v("fallback 和 receive 不是普通函数，而是新的函数类型，有特别的含义，它们前面不需要加 "),t("code",[e._v("function")]),e._v(" 这个关键字。加上 "),t("code",[e._v("function")]),e._v(" 之后，它们就变成了一般的函数，只能按一般函数来去调用。同时 "),t("code",[e._v("receive")]),e._v(" 和 "),t("code",[e._v("fallback")]),e._v(" 需要注意 gas 消耗。")]),e._v(" "),t("p",[e._v("本节介绍的是合约如何接收 ETH，至于合约如何发送 ETH，请阅读 "),t("RouterLink",{attrs:{to:"/source/02.type-of-data.html#id24"}},[e._v("两种形式的地址")]),e._v(" 这一节。")],1),e._v(" "),t("h3",{attrs:{id:"本节配套视频-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-6"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=7",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 6 节: 接收 ETH")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=DkKdLwIL3-Y&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=7",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 6 节: 接收 ETH")])])]),e._v(" "),t("h3",{attrs:{id:"_1-payable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-payable"}},[e._v("#")]),e._v(" 1.payable")]),e._v(" "),t("ul",[t("li",[e._v("使用 payable 标记的"),t("strong",[e._v("函数")]),e._v("可以用于发送和接收 Eth。\n"),t("ul",[t("li",[e._v("payable 意味着在调用这个函数的消息中可以附带 Eth。")])])]),e._v(" "),t("li",[e._v("使用 payable 标记的 "),t("strong",[e._v("地址变量")]),e._v("，允许发送和接收 Eth。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Payable {\n    // payable 标记函数\n    function deposit1() external payable {}\n\n    function deposit2() external {}\n\n    // payable 标记地址\n    function withdraw() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    // 通过 balance 属性，来查看余额。\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n")])])]),t("p",[e._v("可以使用 deposit 存款，但是如果使用 calldata 转账，则会失败，报错 "),t("em",[e._v("In order to receive Ether transfer the contract should have either 'receive' or payable 'fallback' function")])]),e._v(" "),t("h3",{attrs:{id:"_2-fallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-fallback"}},[e._v("#")]),e._v(" 2.fallback")]),e._v(" "),t("p",[e._v("fallback 函数是调用合约没有的方法时候执行，同时也可以设置为允许接收网络主币。")]),e._v(" "),t("ul",[t("li",[e._v("语法\n"),t("ul",[t("li",[e._v("不带参数: "),t("code",[e._v("fallback () external [payable]")])]),e._v(" "),t("li",[e._v("带参数: "),t("code",[e._v("fallback (bytes calldata input) external [payable] returns (bytes memory output)")])]),e._v(" "),t("li",[e._v("没有"),t("code",[e._v("function")]),e._v("关键字。必须是"),t("code",[e._v("external")]),e._v("可见性，")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// function fallback() external payable {}\n// 正确写法不带 function，直接写 fallback，fallback 如果使用 function 修饰，则有警告\n// This function is named "fallback" but is not the fallback function of the contract.\n// If you intend this to be a fallback function, use  "fallback(...) { ... }" without\n// the "function" keyword to define it.\n')])])])]),e._v(" "),t("li",[e._v("fallback 函数类型可以是 "),t("code",[e._v("payable")]),e._v("，也可以不是 "),t("code",[e._v("payable")]),e._v(" 的;\n"),t("ul",[t("li",[e._v("如果不是 "),t("code",[e._v("payable")]),e._v(" 的，可以往合约发送非转账交易，如果交易里带有转账信息，交易会被 revert；")]),e._v(" "),t("li",[e._v("如果是 "),t("code",[e._v("payable")]),e._v(" 的，自然也就可以接受转账了。")])])]),e._v(" "),t("li",[e._v("尽管 "),t("code",[e._v("fallback")]),e._v(" 可以是 payable 的，但并不建议这么做，声明为 "),t("code",[e._v("payable")]),e._v(" 之后，其所消耗的 gas 最大量就会被限定在 2300。")]),e._v(" "),t("li",[e._v("它可以是"),t("code",[e._v("virtual")]),e._v("的，可以被重载也可以有修改器（modifier）。")])]),e._v(" "),t("p",[t("strong",[e._v("回退函数在两种情况被调用")]),e._v("：")]),e._v(" "),t("ul",[t("li",[e._v("向合约转账；\n"),t("ul",[t("li",[e._v("如果使用 call 转账，会执行 fallback。")]),e._v(" "),t("li",[e._v("如果使用合约内已有的 "),t("code",[e._v("deposit")]),e._v(" 转账，不会执行 fallback")])])]),e._v(" "),t("li",[e._v("执行合约不存在的方法\n"),t("ul",[t("li",[e._v("就会执行 fallback 函数。（执行合约不存在的方法时执行）")])])])]),e._v(" "),t("h4",{attrs:{id:"⓵-向合约转账"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-向合约转账"}},[e._v("#")]),e._v(" ⓵ 向合约转账")]),e._v(" "),t("p",[e._v("fallback 函数始终会接收数据，但为了同时接收以太时，必须标记为　"),t("code",[e._v("payable")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Payable {\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    function deposit() external payable {}\n\n    // 通过 balance 属性，来查看余额。\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    fallback() external payable {\n        emit Log("fallback", msg.sender, msg.value, msg.data);\n    }\n}\n')])])]),t("h4",{attrs:{id:"⓶-执行合约不存在的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-执行合约不存在的方法"}},[e._v("#")]),e._v(" ⓶ 执行合约不存在的方法")]),e._v(" "),t("p",[e._v("如果在一个对合约调用中，没有其他函数与给定的函数标识符匹配 fallback 会被调用．或者在没有 receive 函数时，而没有提供附加数据对合约调用，那么 fallback 函数会被执行。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract StoneCat {\n    uint256 public age = 0;\n    event eventFallback(string);\n\n    // 发送到这个合约的所有消息都会调用此函数（因为该合约没有其它函数）。\n    // 向这个合约发送以太币会导致异常，因为 fallback 函数没有 `payable` 修饰符\n    fallback() external {\n        age++;\n        emit eventFallback("fallbak");\n    }\n}\n\ninterface AnimalEat {\n    function eat() external returns (string memory);\n}\n\ncontract Animal {\n    function test1(address _addr) external returns (string memory) {\n        AnimalEat general = AnimalEat(_addr);\n        return general.eat();\n    }\n    function test2(address _addr) external returns (bool success) {\n        AnimalEat general = AnimalEat(_addr);\n        (success,) = address(general).call(abi.encodeWithSignature("eat()"));\n        require(success);\n    }\n}\n')])])]),t("p",[e._v("上面例子种，执行 StoneCat 合约 calldata，参数 "),t("code",[e._v("0x00")]),e._v(" 可以成功，但是如果发送了以太币，则会失败，因为没有 paybale。")]),e._v(" "),t("p",[e._v("直接使用方法是不行的，但是可以通过 call 调用，因为 call 不检查，这也官方是不推荐使用 call 的原因。")]),e._v(" "),t("h4",{attrs:{id:"⓷-带参数的-fallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓷-带参数的-fallback"}},[e._v("#")]),e._v(" ⓷ 带参数的 fallback")]),e._v(" "),t("p",[e._v("fallback 可以有输入值和输出值，都是 "),t("code",[e._v("bytes")]),e._v(" 类型的数据。如果使用了带参数的版本，"),t("code",[e._v("input")]),e._v(" 将包含发送到合约的完整数据，参数 input 等于"),t("code",[e._v("msg.data")]),e._v("，可以省略，并且通过 "),t("code",[e._v("output")]),e._v(" 返回数据。 返回数据不是 ABI 编码过的数据，相反，它返回不经过修改的数据。与任何其他函数一样，只要有足够的 gas 传递给它，回退函数就可以执行复杂的操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bytes public inputData1;\n    bytes public inputData2;\n\n    fallback (bytes calldata input) external  returns (bytes memory output){\n        inputData1 = input;\n        inputData2 = msg.data; // input 等于 msg.data\n        return input;\n    }\n}\n")])])]),t("p",[e._v("⚠️ 如果想要解码输入数据，那么前四个字节用作函数选择器，然后用"),t("code",[e._v("abi.decode")]),e._v(" 与数组切片语法一起使用来解码 ABI 编码的数据：\n"),t("code",[e._v("(c, d) = abi.decode(_input[4:], (uint256, uint256));")]),e._v("请注意，这仅应作为最后的手段，而应使用对应的函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract StoneCat {\n    uint256 public age = 0;\n    bytes public inputData1;\n    bytes public inputData2;\n    uint256 public c;\n    uint256 public d;\n\n    event eventFallback(string);\n\n    fallback (bytes calldata input) external  returns (bytes memory output){\n        age++;\n        inputData1 = input;\n        inputData2 = msg.data;\n        (c, d) = abi.decode(msg.data[4:], (uint256, uint256));\n        emit eventFallback("fallbak");\n        return input;\n    }\n}\n\ninterface AnimalEat {\n    function eat() external returns (string memory);\n}\n\ncontract Animal {\n    function test2(address _addr) external returns (bool success) {\n        AnimalEat general = AnimalEat(_addr);\n        (success, ) = address(general).call(abi.encodeWithSignature("eat()",123,456));\n        require(success);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_3-receive-以太函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-receive-以太函数"}},[e._v("#")]),e._v(" 3.receive 以太函数")]),e._v(" "),t("p",[e._v("receive 只负责接收主币,一个合约最多有一个 "),t("code",[e._v("receive")]),e._v(" 函数")]),e._v(" "),t("ul",[t("li",[e._v("语法 "),t("code",[e._v("receive() external payable {}")]),e._v(" "),t("ul",[t("li",[e._v("没有 "),t("code",[e._v("function")]),e._v(" 关键字")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  // function receive() external payable {}\n  // receive 如果使用 function 修饰，则有如下警告\n  // This function is named "receive" but is not the receive function of\n  // the contract. If you intend this to be a receive function,\n  // use "receive(...) { ... }" without the "function" keyword to define it.\n')])])])]),e._v(" "),t("li",[e._v("没有参数、没有返回值。")]),e._v(" "),t("li",[t("code",[e._v("external payable")]),e._v(" 是必须的\n"),t("ul",[t("li",[e._v("receive 函数类型必须是 "),t("code",[e._v("payable")]),e._v(" 的，并且里面的语句只有在通过外部地址往合约里转账的时候执行。")])])]),e._v(" "),t("li",[e._v("它可以是 "),t("code",[e._v("virtual")]),e._v(" 的，可以被重载也可以有 修改器(modifier) 。")]),e._v(" "),t("li",[e._v("如果没有定义 "),t("code",[e._v("接收函数 receive")]),e._v("，就会执行 "),t("code",[e._v("fallback")]),e._v(" 函数。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    receive() external payable {\n        // receive 被调用的时候不存在 msg.data，所以不使用这个，直接用空字符串\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),t("p",[e._v("上面例子通过 calldata 执行转账，无参数时候会触发 receive 函数。但是如果有参数，比如"),t("code",[e._v("0x00")]),e._v(",则会报错 "),t("em",[e._v("'Fallback' function is not defined")])]),e._v(" "),t("p",[e._v("在对合约没有任何附加数据调用（通常是对合约转账）是会执行 "),t("code",[e._v("receive")]),e._v("函数．例如　通过 "),t("code",[e._v(".send()")]),e._v(" or "),t("code",[e._v(".transfer()")]),e._v("。")]),e._v(" "),t("p",[e._v("声明为 payable 之后，其所消耗的 gas 最大量就会被限定在 2300。除了基础的日志输出之外，进行其他操作的余地很小。下面的操作消耗会操作 2300 gas :")]),e._v(" "),t("ul",[t("li",[e._v("写入存储")]),e._v(" "),t("li",[e._v("创建合约")]),e._v(" "),t("li",[e._v("调用消耗大量 gas 的外部函数")]),e._v(" "),t("li",[e._v("发送以太币")])]),e._v(" "),t("p",[e._v("扩展阅读 ⚠️: 一个没有 receive 函数的合约，可以作为 "),t("em",[e._v("coinbase 交易")]),e._v(" （又名"),t("em",[e._v("矿工区块回报")]),e._v(" ）的接收者或者作为 "),t("code",[e._v("selfdestruct")]),e._v(" 的目标来接收以太币。一个合约不能对这种以太币转移做出反应，因此也不能拒绝它们。这是 EVM 在设计时就决定好的，而且 Solidity 无法绕过这个问题。这也意味着 "),t("code",[e._v("address(this).balance")]),e._v(" 可以高于合约中实现的一些手工记帐的总和（例如在 receive 函数中更新的累加器记帐）。")]),e._v(" "),t("h3",{attrs:{id:"_4-receive-和-fallback-共存的调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-receive-和-fallback-共存的调用"}},[e._v("#")]),e._v(" 4.receive 和 fallback 共存的调用")]),e._v(" "),t("p",[e._v("注意：这里 fallback 需要是 "),t("code",[e._v("payable")]),e._v(" 类型的。如下图:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n\n    调用时发送了ETH\n            |\n判断 msg.data 是否为空\n          /     \\\n        是       否\n是否存在 receive   fallbak()\n      /   \\\n    存在   不存在\n    /        \\\nreceive()   fallbak()\n\n */\n")])])]),t("p",[t("strong",[e._v("总结")]),e._v(": 只有 "),t("code",[e._v("msg.data")]),e._v(" 为空，并且存在 "),t("code",[e._v("receive")]),e._v(" 的时候，才会运行 "),t("code",[e._v("receive")]),e._v("。")]),e._v(" "),t("p",[e._v("如果不存在 "),t("code",[e._v("receive")]),e._v(" 以太函数，"),t("code",[e._v("payable")]),e._v(" 的 "),t("code",[e._v("fallback")]),e._v(" 函数也可以在纯以太转账的时候执行。但是推荐总是定义一个 receive 函数，而不是定义一个 payable 的 fallback 函数。否则会报警告 ⚠️:"),t("em",[e._v("Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 这个合约会保留所有发送给它的以太币，没有办法返还。\ncontract Demo {\n    uint256 public x;\n    uint256 public y;\n\n    event Log(string funName, address from, uint256 value, bytes data);\n\n    // 纯转账调用这个函数，例如对每个空empty calldata的调用\n    receive() external payable {\n        x = 1;\n        y = msg.value;\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    // 除了纯转账外，所有的调用都会调用这个函数．\n    // (因为除了 receive 函数外，没有其他的函数).\n    // 任何对合约非空calldata 调用会执行回退函数(即使是调用函数附加以太).\n    fallback() external payable {\n        x = 2;\n        y = msg.value;\n        emit Log("fallback", msg.sender, msg.value, msg.data);\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),t("ul",[t("li",[e._v("输入以太币，然后无参数 calldata 调用")]),e._v(" "),t("li",[e._v("输入以太币，然后参数"),t("code",[e._v("0x00")]),e._v(" 进行 calldata 调用")])]),e._v(" "),t("p",[e._v("如果 "),t("code",[e._v("receive")]),e._v("函数不存在，但是有 "),t("code",[e._v("payable")]),e._v(" 的 fallback 回退函数 那么在进行纯以太转账时，fallback 函数会调用.如果两个函数都没有，这个合约就没法通过常规的转账交易接收以太（会抛出异常）。")]),e._v(" "),t("p",[e._v("注意："),t("code",[e._v("receive")]),e._v(" 函数可能只有 2300 gas 可以使用（如，当使用 "),t("code",[e._v("send")]),e._v(" 或"),t("code",[e._v("transfer")]),e._v(" 时），")]),e._v(" "),t("p",[e._v("⚠️: 一个没有定义 "),t("code",[e._v("fallback")]),e._v(" 函数或 "),t("code",[e._v("receive")]),e._v(" 函数的合约，直接接收以太币（没有函数调用，使用 "),t("code",[e._v("send")]),e._v(" 或 "),t("code",[e._v("transfer")]),e._v("）会抛出一个异常， 并返还以太币。所以如果你想让你的合约在任何情况下都可以接收以太币，必须实现 "),t("code",[e._v("receive")]),e._v(" 函数（使用 "),t("code",[e._v("payable fallback")]),e._v(" 函数不再推荐，因为它会让借口混淆）。")]),e._v(" "),t("h2",{attrs:{id:"_7️⃣-selfdestruct-合约自毁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7️⃣-selfdestruct-合约自毁"}},[e._v("#")]),e._v(" 7️⃣ selfdestruct:合约自毁")]),e._v(" "),t("p",[e._v("合约代码从区块链上移除的唯一方式是合约在合约地址上的执行自毁操作 "),t("code",[e._v("selfdestruct")]),e._v(" 。"),t("code",[e._v("selfdestruct")]),e._v(" 作用是 "),t("strong",[e._v("销毁合约")]),e._v("，并"),t("strong",[e._v("把余额发送到指定地址类型 Address")]),e._v("。")]),e._v(" "),t("p",[e._v("做了两件事：")]),e._v(" "),t("ul",[t("li",[e._v("销毁合约:它使合约变为无效，删除该地址地字节码。")]),e._v(" "),t("li",[e._v("它把合约的所有资金强制发送到目标地址。\n"),t("ul",[t("li",[e._v("如果接受的地址是合约，即使里面没有 "),t("code",[e._v("fallback")]),e._v(" 和 "),t("code",[e._v("receive")]),e._v(" 也会发送过去")])])]),e._v(" "),t("li",[e._v("除非必要，不建议销毁合约。\n"),t("ul",[t("li",[e._v("如果有人发送以太币到移除的合约，这些以太币可能将永远丢失")]),e._v(" "),t("li",[e._v("如果要禁用合约，可以通过修改某个内部状态让所有函数无法执行，这样也可以达到目的。")])])]),e._v(" "),t("li",[e._v("即便一个合约的代码中没有显式地调用 "),t("code",[e._v("selfdestruct")]),e._v("，它仍然有可能通过 "),t("code",[e._v("delegatecall")]),e._v(" 或 "),t("code",[e._v("callcode")]),e._v(" 执行自毁操作。")])]),e._v(" "),t("p",[e._v("⚠️：即使一个合约被 "),t("code",[e._v("selfdestruct")]),e._v(" 删除，它仍然是区块链历史的一部分，区块链的链条中不可能无缘无故消失一个块，这样他们就没办法做校验了。 因此，使用 "),t("code",[e._v("selfdestruct")]),e._v(" 与从硬盘上删除数据是不同的。")]),e._v(" "),t("p",[e._v("请注意 "),t("code",[e._v("selfdestruct")]),e._v(" 具有从 EVM 继承的一些特性：")]),e._v(" "),t("ul",[t("li",[e._v("接收合约的 "),t("code",[e._v("receive")]),e._v(" 函数 不会执行。")]),e._v(" "),t("li",[e._v("合约仅在交易结束时才真正被销毁，并且 "),t("code",[e._v("revert")]),e._v(" 可能会“撤消”销毁。此外，当前合约内的所有函数都可以被直接调用，包括当前函数。")])]),e._v(" "),t("blockquote",[t("p",[e._v("在 0.5.0 之前, 还有一个 "),t("code",[e._v("suicide")]),e._v(" ，它和 "),t("code",[e._v("selfdestruct")]),e._v(" 语义是一样的。")])]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-7"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=8",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 7 节: selfdestruct:合约自毁")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=YgUdGXM-tcw&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=8",target:"_blank",rel:"noreferrer"}},[e._v("第一章第 7 节: selfdestruct:合约自毁")])])]),e._v(" "),t("h3",{attrs:{id:"⓵-自我毁灭"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓵-自我毁灭"}},[e._v("#")]),e._v(" ⓵ 自我毁灭")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Kill {\n    uint256 public aaa = 123;\n\n    constructor() payable {}\n\n    function kill() external{\n        selfdestruct(payable(msg.sender));\n    }\n\n    function bbb() external pure returns(uint256){\n        return 1;\n    }\n\n    fallback() external {}\n\n    receive() external payable {}\n}\n")])])]),t("ol",[t("li",[e._v("先调用 "),t("code",[e._v("aaa")]),e._v("/"),t("code",[e._v("bbb")]),e._v("，查看输出值")]),e._v(" "),t("li",[e._v("calldata 形式进行转账")]),e._v(" "),t("li",[e._v("kill 销毁合约")]),e._v(" "),t("li",[e._v("查看收到的金额")]),e._v(" "),t("li",[e._v("查看 aaa 的值")])]),e._v(" "),t("h3",{attrs:{id:"⓶-通过合约调用毁灭"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⓶-通过合约调用毁灭"}},[e._v("#")]),e._v(" ⓶ 通过合约调用毁灭")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Kill {\n    uint256 public aaa = 123;\n\n    constructor() payable {}\n\n    function kill() external {\n        selfdestruct(payable(msg.sender));\n    }\n\n    function bbb() external pure returns(uint256){\n        return 1;\n    }\n\n    fallback() external {}\n\n    receive() external payable {}\n}\n\ncontract Helper {\n    // 没有 `fallback` 和 `receive`，正常没办法接受ETH主币\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // kill 后，此时 Helper 余额就会强制收到ETH主币\n    function kill(Kill _kill) external {\n        _kill.kill();\n    }\n}\n")])])]),t("ol",[t("li",[e._v("部署 Kill")]),e._v(" "),t("li",[e._v("先调用 "),t("code",[e._v("Kill.aaa")]),e._v("，查看输出值")]),e._v(" "),t("li",[e._v("calldata 形式进行转账，查看余额")]),e._v(" "),t("li",[e._v("部署 Helper")]),e._v(" "),t("li",[e._v("查看 "),t("code",[e._v("Helper.getBalance")]),e._v(" 返回值")]),e._v(" "),t("li",[e._v("calldata 形式进行转账，此时会失败")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("Helper.kill")])]),e._v(" "),t("li",[e._v("查看 "),t("code",[e._v("Helper.getBalance")]),e._v(" 返回值")]),e._v(" "),t("li",[e._v("查看 "),t("code",[e._v("Kill.aaa")]),e._v(" 的值")])]),e._v(" "),t("h2",{attrs:{id:"🆗-实战-1-同志们好"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-1-同志们好"}},[e._v("#")]),e._v(" 🆗 实战 1: 同志们好")]),e._v(" "),t("p",[e._v("为了让学习的内容，可以更好的使用，每一章后面都会最少有一个实战练习。当前是第一章，学习的内容比较简单和浅显，所以做一个简单的小联系就可以了。")]),e._v(" "),t("p",[e._v("为此我写了这个阅兵式里"),t("code",[e._v("同志们好")]),e._v("的场景合约，用于能力自检，相当于加强版的 Hello World。再次提醒，本教程默认读者已经掌握了 Solidity 基本语言的使用方法。这并不是针对初次学习 Solidity 的教程。")]),e._v(" "),t("p",[e._v("同志们好的场景：")]),e._v(" "),t("ul",[t("li",[e._v("领导说“同志们好”，回复“领导好”")]),e._v(" "),t("li",[e._v("领导说“同志们辛苦了”，回复“为人民服务”")])]),e._v(" "),t("h3",{attrs:{id:"_1-合约代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-合约代码"}},[e._v("#")]),e._v(" 1.合约代码")]),e._v(" "),t("p",[e._v("个人习惯是将代码按照功能进行区域划分，每一个区域使用如下注释标记。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/*\n * ========================================\n * State Variables\n * ========================================\n */\n")])])]),t("p",[e._v("废话不多说，直接上代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/// @title 一个模拟同志们好的简单演示\n/// @author Anbang\n/// @notice 您只能将此合约用于最基本的模拟演示\n/// @dev 本章主要内容的实战练习\n/// @custom:experimental 这是实验的合约。\ncontract HelloComrades {\n    /*\n     * ========================================\n     * State Variables\n     * ========================================\n     */\n\n    /// @notice 用于标记当前进度\n    /// @dev 0:等待领导说"同志们好"，\n    /// @dev 1:等待同志们说"领导好"，\n    /// @dev 2:等待领导说"同志们辛苦了"\n    /// @dev 3:等待同志们说"为人民服务"\n    /// @dev 4:等待销毁。\n    /// @return 当前进度\n    uint8 public step = 0;\n\n    /// @notice 用于标记领导地址\n    /// @dev 不可变量，需要在构造函数内指定，以后就不能修改了\n    /// @return 当前领导的地址\n    address public immutable leader;\n\n    /// @notice 用于遇到错误时的无脑复读机式回复\n    string internal constant UNKNOWN =\n        unicode"我不知道如何处理它,你找相关部门吧!";\n\n    /*\n     * ========================================\n     * Events\n     * ========================================\n     */\n\n    /// @notice 用于对当前 step 被修改时的信息通知\n    /// @dev 只要发生 step 修改，都需要抛出此事件\n    /// @param 当前修改的最新 step\n    event Step(uint8);\n\n    /// @notice 用于对当前合约的金额变动通知\n    /// @dev 只要发生金额修改，都需要抛出此事件\n    /// @param tag: 标记内容\n    /// @param from: 当前地址\n    /// @param value: 当前发送金额\n    /// @param data: 当前调用的data内容\n    event Log(string tag, address from, uint256 value, bytes data);\n\n    /*\n     * ========================================\n     * Modifier\n     * ========================================\n     */\n\n    /// @notice 检查只能领导调用\n    /// @dev 用于领导专用函数\n    modifier onlyLeader() {\n        require(msg.sender == leader, unicode"必须领导才能说");\n        _;\n    }\n\n    /// @notice 检查只能非领导调用\n    /// @dev 用于非领导地址检测\n    modifier notLeader() {\n        require(\n            msg.sender != leader,\n            unicode"不需要领导回答，需要同志们来回答"\n        );\n        _;\n    }\n\n    /*\n     * ========================================\n     * Errors\n     * ========================================\n     */\n\n    /// @notice 自定义的错误，这种注释内容会在错误时显示出来\n    /// @dev 用于所有未知错误\n    /// This is a message des info.需要上方空一行，才可以显示出来\n    error MyError(string msg);\n\n    /*\n     * ========================================\n     * Constructor\n     * ========================================\n     */\n\n    /// @dev 用于领导地址的指定，后续不可修改\n    constructor(address _leader) {\n        require(_leader != address(0), "invalid address");\n        leader = _leader;\n    }\n\n    /*\n     * ========================================\n     * Functions\n     * ========================================\n     */\n\n    /// @notice 用于领导说"同志们好"\n    /// @dev 只能在 step 为 0 时调用，只能领导调用，并且只能说"同志们好"\n    /// @param content: 当前领导说的内容\n    /// @return 当前调用的状态，true 代表成功\n    function hello(string calldata content) external onlyLeader returns (bool) {\n        if (step != 0) {\n            revert(UNKNOWN);\n        }\n        if (!review(content, unicode"同志们好")) {\n            revert MyError(unicode"必须说:同志们好");\n        }\n        step = 1;\n        emit Step(step);\n        return true;\n    }\n\n    /// @notice 用于同志们说"领导好"\n    /// @dev 只能在 step 为 1 时调用，只能非领导调用，并且只能说"领导好"\n    /// @param content: 当前同志们说的内容\n    /// @return 当前调用的状态，true 代表成功\n    function helloRes(string calldata content)\n        external\n        notLeader\n        returns (bool)\n    {\n        if (step != 1) {\n            revert(UNKNOWN);\n        }\n        if (!review(content, unicode"领导好")) {\n            revert MyError(unicode"必须说:领导好");\n        }\n        step = 2;\n        emit Step(step);\n        return true;\n    }\n\n    /// @notice 用于领导说"同志们辛苦了"\n    /// @dev 只能在 step 为 2 时调用，只能领导调用，并且只能说"同志们辛苦了",还需给钱\n    /// @param content: 当前领导说的内容\n    /// @return 当前调用的状态，true 代表成功\n    function comfort(string calldata content)\n        external\n        payable\n        onlyLeader\n        returns (bool)\n    {\n        if (step != 2) {\n            revert(UNKNOWN);\n        }\n        if (!review(content, unicode"同志们辛苦了")) {\n            revert MyError(unicode"必须说:同志们辛苦了");\n        }\n        if (msg.value < 2 ether) {\n            revert MyError(unicode"给钱！！！最少2个以太币");\n        }\n        step = 3;\n        emit Step(step);\n        emit Log("comfort", msg.sender, msg.value, msg.data);\n        return true;\n    }\n\n    /// @notice 用于同志们说"为人民服务"\n    /// @dev 只能在 step 为 3 时调用，只能非领导调用，并且只能说"为人民服务"\n    /// @param content: 当前同志们说的内容\n    /// @return 当前调用的状态，true 代表成功\n    function comfortRes(string calldata content)\n        external\n        notLeader\n        returns (bool)\n    {\n        if (step != 3) {\n            revert(UNKNOWN);\n        }\n        if (!review(content, unicode"为人民服务")) {\n            revert MyError(unicode"必须说:为人民服务");\n        }\n        step = 4;\n        emit Step(step);\n        return true;\n    }\n\n    /// @notice 用于领导对\n    /// @dev 只能在 step 为 4 时调用，只能领导调用\n    /// @return 当前调用的状态，true 代表成功\n    function destruct() external onlyLeader returns (bool) {\n        if (step != 4) {\n            revert(UNKNOWN);\n        }\n        emit Log("selfdestruct", msg.sender, address(this).balance, "");\n        selfdestruct(payable(msg.sender));\n        return true;\n    }\n\n    /*\n     * ========================================\n     * Helper\n     * ========================================\n     */\n\n    /// @notice 用于检查调用者说的话\n    /// @dev 重复检测内容的代码抽出\n    /// @param content: 当前内容\n    /// @param correctContent: 正确内容\n    /// @return 当前调用的状态，true 代表内容相同，通过检测\n     function review(string calldata content, string memory correctContent)\n     private\n     pure\n     returns(bool){\n         return keccak256(abi.encodePacked(content)) == keccak256(abi.encodePacked(correctContent));\n     }\n\n    receive() external payable {\n        emit Log("receive", msg.sender, msg.value, "");\n    }\n\n    fallback() external payable {\n        emit Log("fallback", msg.sender, msg.value, msg.data);\n    }\n\n    /// @notice 用于获取当前合约内的余额\n    /// @dev 一个获取当前合约金额的辅助函数\n    /// @return 当前合约的余额\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),t("h3",{attrs:{id:"_2-remix-部署测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-remix-部署测试"}},[e._v("#")]),e._v(" 2.Remix 部署测试")]),e._v(" "),t("ul",[t("li",[e._v("部署合约\n"),t("ul",[t("li",[e._v("需要输入 Leader 地址作为参数")])])]),e._v(" "),t("li",[e._v("点击 【leader】 查看信息")]),e._v(" "),t("li",[e._v("点击 【destruct】 进行销毁\n"),t("ul",[t("li",[e._v("此时报错，因为步骤不对")])])]),e._v(" "),t("li",[e._v("【hello】\n"),t("ul",[t("li",[e._v("输入错的内容")]),e._v(" "),t("li",[e._v("输入"),t("em",[e._v("同志们好")])]),e._v(" "),t("li",[e._v("查看 step 值")])])]),e._v(" "),t("li",[e._v("【helloRes】\n"),t("ul",[t("li",[e._v("输入错的内容，此时提示，账号不对。")]),e._v(" "),t("li",[e._v("切换账号后输入错的内容，提示"),t("em",[e._v("必须说:领导好")])]),e._v(" "),t("li",[e._v("输入"),t("em",[e._v("领导好")])]),e._v(" "),t("li",[e._v("查看 step 值")])])]),e._v(" "),t("li",[e._v("【comfort】\n"),t("ul",[t("li",[e._v("输入错的内容，此时提示账号权限不对")]),e._v(" "),t("li",[e._v("切换账号后，输入错的内容，提示"),t("em",[e._v("必须说:同志们辛苦了")])]),e._v(" "),t("li",[e._v("点击【hello】，此时说提示"),t("em",[e._v("我不知道如何处理它,你找相关部门吧!")]),e._v("，因为 step 不对。")]),e._v(" "),t("li",[e._v("输入"),t("em",[e._v("同志们辛苦了")]),e._v("，此时提示必须给钱；（只有给了 2 个以上的以太币，才能说同志们辛苦了。）")]),e._v(" "),t("li",[e._v("我们给 2 个 wei，假装是 2 个 ETH，看能否通过。（结果还是不能通过）")]),e._v(" "),t("li",[e._v("给 2 个以太，并输入"),t("em",[e._v("同志们辛苦了")]),e._v("。此时可以通过了")]),e._v(" "),t("li",[e._v("点击【getBalance】查看合约的余额")]),e._v(" "),t("li",[e._v("查看 step 值")])])]),e._v(" "),t("li",[e._v("【comfortRes】\n"),t("ul",[t("li",[e._v("点击【helloRes】，此时说提示"),t("em",[e._v("我不知道如何处理它,你找相关部门吧!")]),e._v("，因为 step 不对。")]),e._v(" "),t("li",[e._v("切换账号后，输入错的内容，提示"),t("em",[e._v("必须说:为人民服务")])]),e._v(" "),t("li",[e._v("输入"),t("em",[e._v("为人民服务")])])])]),e._v(" "),t("li",[e._v("【calldata】调用\n"),t("ul",[t("li",[e._v("输入 1wei ，无参数直接调用；查看交易详情内的 logs，此时是 "),t("strong",[e._v("receive")]),e._v("，余额变化多 1wei")]),e._v(" "),t("li",[e._v("输入 2wei，参数使用"),t("code",[e._v("0x00")]),e._v("调用，查看交易详情内的 logs，此时是 "),t("strong",[e._v("fallback")]),e._v("，余额变化多 2wei")])])]),e._v(" "),t("li",[e._v("【destruct】调用，注意查看余额变化。\n"),t("ul",[t("li",[e._v("注意查看当前 leader 地址的余额")]),e._v(" "),t("li",[e._v("先使用非 leader 地址触发【destruct】，提示错误")]),e._v(" "),t("li",[e._v("然后是 leader 地址触发。查看交易详情种的 logs")]),e._v(" "),t("li",[e._v("查看 leader 地址/ balance/step，都已经是默认值")]),e._v(" "),t("li",[e._v("触发所有函数，此时函数都可以使用，但是都是默认值。")])])])]),e._v(" "),t("h3",{attrs:{id:"_3-案例知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例知识点"}},[e._v("#")]),e._v(" 3.案例知识点")]),e._v(" "),t("ul",[t("li",[e._v("合约的基本用法")]),e._v(" "),t("li",[e._v("合约的构造函数使用")]),e._v(" "),t("li",[e._v("函数的基本用法\n"),t("ul",[t("li",[e._v("函数中条件判断和错误输出")])])]),e._v(" "),t("li",[e._v("事件和事件触发")]),e._v(" "),t("li",[e._v("NatSpec 用法演示\n"),t("ul",[t("li",[e._v("自定错误使用和触发，以及结合 "),t("code",[e._v("NatSpec")]),e._v(" 抛出错误")])])]),e._v(" "),t("li",[t("code",[e._v("fallback")]),e._v(" 和 "),t("code",[e._v("receive")]),e._v(" 的使用和不同之处")]),e._v(" "),t("li",[t("code",[e._v("immutable")]),e._v(" 不可变量的使用")]),e._v(" "),t("li",[t("code",[e._v("constant")]),e._v(" 常量的使用")]),e._v(" "),t("li",[e._v("unicode 字面常量")]),e._v(" "),t("li",[e._v("modifier 使用")]),e._v(" "),t("li",[t("code",[e._v("keccak256")]),e._v(" 结合 "),t("code",[e._v("abi.encodePacked")]),e._v(" 判断字符串是否相同")])]),e._v(" "),t("h3",{attrs:{id:"_4-生成文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-生成文档"}},[e._v("#")]),e._v(" 4.生成文档")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("solc --userdoc --devdoc a.sol\n")])])]),t("h3",{attrs:{id:"_5-实战作业"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-实战作业"}},[e._v("#")]),e._v(" 5.实战作业")]),e._v(" "),t("p",[e._v("这个例子中 step，因为只有几个选择，尝试将 step 改为 enum 类型。")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-8"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=9",target:"_blank",rel:"noreferrer"}},[e._v("第一章: 实战 1: 同志们好")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=wJpmy1umX-k&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=9",target:"_blank",rel:"noreferrer"}},[e._v("第一章: 实战 1: 同志们好")])])]),e._v(" "),t("h2",{attrs:{id:"🆗-实战-2-存钱罐合约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-2-存钱罐合约"}},[e._v("#")]),e._v(" 🆗 实战 2: 存钱罐合约")]),e._v(" "),t("ul",[t("li",[e._v("所有人都可以存钱\n"),t("ul",[t("li",[e._v("ETH")])])]),e._v(" "),t("li",[e._v("只有合约 owner 才可以取钱")]),e._v(" "),t("li",[e._v("只要取钱，合约就销毁掉 "),t("code",[e._v("selfdestruct")])]),e._v(" "),t("li",[e._v("扩展：支持主币以外的资产\n"),t("ul",[t("li",[e._v("ERC20")]),e._v(" "),t("li",[e._v("ERC721")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Bank {\n    // 状态变量\n    address public immutable owner;\n\n    // 事件\n    event Deposit(address _ads, uint256 amount);\n    event Withdraw(uint256 amount);\n\n    // receive\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // 构造函数\n    constructor() payable {\n        owner = msg.sender;\n    }\n\n    // 方法\n    function withdraw() external {\n        require(msg.sender == owner, "Not Owner");\n        emit Withdraw(address(this).balance);\n        selfdestruct(payable(msg.sender));\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')])])]),t("h3",{attrs:{id:"本节配套视频-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-9"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=10",target:"_blank",rel:"noreferrer"}},[e._v("第一章: 实战 2: 存钱罐合约")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=yA8IMHdLq54&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=10",target:"_blank",rel:"noreferrer"}},[e._v("第一章: 实战 2: 存钱罐合约")])])]),e._v(" "),t("h2",{attrs:{id:"🆗-实战-3-weth-合约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战-3-weth-合约"}},[e._v("#")]),e._v(" 🆗 实战 3: WETH 合约")]),e._v(" "),t("p",[e._v("WETH 是包装 ETH 主币，作为 ERC20 的合约。")]),e._v(" "),t("p",[e._v("标准的 ERC20 合约包括如下几个")]),e._v(" "),t("ul",[t("li",[e._v("3 个查询\n"),t("ul",[t("li",[t("code",[e._v("balanceOf")]),e._v(": 查询指定地址的 Token 数量")]),e._v(" "),t("li",[t("code",[e._v("allowance")]),e._v(": 查询指定地址对另外一个地址的剩余授权额度")]),e._v(" "),t("li",[t("code",[e._v("totalSupply")]),e._v(": 查询当前合约的 Token 总量")])])]),e._v(" "),t("li",[e._v("2 个交易\n"),t("ul",[t("li",[t("code",[e._v("transfer")]),e._v(": 从当前调用者地址发送指定数量的 Token 到指定地址。\n"),t("ul",[t("li",[e._v("这是一个写入方法，所以还会抛出一个 "),t("code",[e._v("Transfer")]),e._v(" 事件。")])])]),e._v(" "),t("li",[t("code",[e._v("transferFrom")]),e._v(": 当向另外一个合约地址存款时，对方合约必须调用 transferFrom 才可以把 Token 拿到它自己的合约中。")])])]),e._v(" "),t("li",[e._v("2 个事件\n"),t("ul",[t("li",[t("code",[e._v("Transfer")])]),e._v(" "),t("li",[t("code",[e._v("Approval")])])])]),e._v(" "),t("li",[e._v("1 个授权\n"),t("ul",[t("li",[t("code",[e._v("approve")]),e._v(": 授权指定地址可以操作调用者的最大 Token 数量。")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract WETH {\n    string public name = "Wrapped Ether";\n    string public symbol = "WETH";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed delegateAds, uint256 amount);\n    event Transfer(address indexed src, address indexed toAds, uint256 amount);\n    event Deposit(address indexed toAds, uint256 amount);\n    event Withdraw(address indexed src, uint256 amount);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 amount) public {\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[msg.sender] -= amount;\n        payable(msg.sender).transfer(amount);\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address delegateAds, uint256 amount) public returns (bool) {\n        allowance[msg.sender][delegateAds] = amount;\n        emit Approval(msg.sender, delegateAds, amount);\n        return true;\n    }\n\n    function transfer(address toAds, uint256 amount) public returns (bool) {\n        return transferFrom(msg.sender, toAds, amount);\n    }\n\n    function transferFrom(\n        address src,\n        address toAds,\n        uint256 amount\n    ) public returns (bool) {\n        require(balanceOf[src] >= amount);\n\n        if (src != msg.sender) {\n            require(allowance[src][msg.sender] >= amount);\n            allowance[src][msg.sender] -= amount;\n        }\n\n        balanceOf[src] -= amount;\n        balanceOf[toAds] += amount;\n\n        emit Transfer(src, toAds, amount);\n\n        return true;\n    }\n\n    fallback() external payable {\n        deposit();\n    }\n\n    receive() external payable {\n        deposit();\n    }\n\n}\n')])])]),t("p",[e._v("ETH 上的 WETH 合约参考:\nhttps://cn.etherscan.com/address/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2#code")]),e._v(" "),t("h3",{attrs:{id:"本节配套视频-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-10"}},[e._v("#")]),e._v(" 本节配套视频")]),e._v(" "),t("ul",[t("li",[e._v("BiliBili: "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=11",target:"_blank",rel:"noreferrer"}},[e._v("第一章: 实战 3: WETH 合约")])]),e._v(" "),t("li",[e._v("Youtube: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=qXkC3VIFyp0&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=11",target:"_blank",rel:"noreferrer"}},[e._v("第一章: 实战 3: WETH 合约")])])]),e._v(" "),t("h2",{attrs:{id:"️⃣-问答题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#️⃣-问答题"}},[e._v("#")]),e._v(" #️⃣ 问答题")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("因为区块可以被撤回，编码时候有些需要注意的？")]),e._v(" "),t("ul",[t("li",[e._v("会出现你发起的交易被回滚甚至从区块链中抹除掉的可能。区块链不能保证当前的交易一定包含在下一个区块中。如果你开发的合约有顺序关系，要注意这个特性。合约内的逻辑，不能将某一个块作为依赖。")])])]),e._v(" "),t("li",[t("p",[e._v("标记版本号有哪些方法？")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("^0.8.17")])]),e._v(" "),t("li",[t("code",[e._v("0.8.17")])]),e._v(" "),t("li",[t("code",[e._v("pragma solidity >=0.7.0 <0.9.0;")])])])]),e._v(" "),t("li",[t("p",[e._v("常用的版权声明有哪些，分别什么区别？")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("MIT")]),e._v("/"),t("code",[e._v("BUSL")])])])]),e._v(" "),t("li",[t("p",[e._v("聊一聊 NatSpec 注释")]),e._v(" "),t("ul",[t("li",[e._v("单行使用 "),t("code",[e._v("///")]),e._v(" 开始，多行使用 "),t("code",[e._v("/**")]),e._v(" 开头以 "),t("code",[e._v("*/")]),e._v(" 结尾。NatSpec 描述注释的作用非常重要，它是为函数、返回变量等提供丰富的文档。在编写合约的时候，强烈推荐使用 "),t("code",[e._v("NatSpec")]),e._v(" 为所有的开放接口（只要是在 "),t("code",[e._v("ABI")]),e._v(" 里呈现的内容）进行完整的注释。")]),e._v(" "),t("li",[e._v("可以输出错误，而不消耗 gas")])])]),e._v(" "),t("li",[t("p",[e._v("聊一聊存储，内存，栈的内容")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("存储")]),e._v("：每一个地址都有一个持久化的内存，存储是将 256 位字映射到 256 位字的键值存储区。所以数据类型的最大值是 "),t("code",[e._v("uint256")]),e._v("/"),t("code",[e._v("int256")]),e._v("/"),t("code",[e._v("bytes32")]),e._v("，合约只能读写存储区内属于自己的部分。")]),e._v(" "),t("li",[t("strong",[e._v("内存")]),e._v("：合约会试图为每一次消息调用获取一块被重新擦拭干净的内存实例。所以储存在内存中的数据，在函数执行完以后就会被销毁。内存是线性的，可按字节级寻址，但读的长度被限制为 256 位，而写的长度可以是 8 位或 256 位。")]),e._v(" "),t("li",[t("strong",[e._v("栈")]),e._v("：合约的所有计算都在一个被称为栈（stack）的区域执行，栈最大有 1024 个元素，每一个元素长度是 256 bit；所以调用深度被限制为 1024 ，对复杂的操作，推荐使用循环而不是递归。")])])]),e._v(" "),t("li",[t("p",[e._v("interface 如何使用")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("定义一个拥有某个方法的接口，传入地址后，调用地址。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface AnimalEat {\n    function eat() external returns (string memory);\n}\n\ncontract Animal {\n    function test(address _addr) external returns (string memory) {\n        AnimalEat general = AnimalEat(_addr);\n        return general.eat();\n    }\n}\n")])])])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v('string message = "Hello World!";')]),e._v(" 这种没有明确标注可视范围的情况下，"),t("code",[e._v("message")]),e._v(" 的可视范围是什么? 是 "),t("code",[e._v("internal")]),e._v(" 还是 "),t("code",[e._v("private")]),e._v("?")]),e._v(" "),t("ul",[t("li",[e._v("private")])])]),e._v(" "),t("li",[t("p",[e._v("变量如何使用以太币单位？")]),e._v(" "),t("ul",[t("li",[e._v("如果想用以太币单位来计算输入参数，你可以使用乘法来转换: "),t("code",[e._v("amountEth * 1 ether")])])])]),e._v(" "),t("li",[t("p",[e._v("receive 和 fallback 共存的调用？")]),e._v(" "),t("ul",[t("li",[e._v("只有 msg.data 为空，并且存在 receive 的时候，才会运行 receive。")])])]),e._v(" "),t("li",[t("p",[e._v("receive 和 fallback 区别？")]),e._v(" "),t("ul",[t("li",[e._v("receive 只负责接收主币")]),e._v(" "),t("li",[e._v("调用没有的方法时候执行,因为可以设置 payable，可以接收网络主币。尽管 fallback 可以是 payable 的，但并不建议这么做，声明为 payable 之后，其所消耗的 gas 最大量就会被限定在 2300。")])])]),e._v(" "),t("li",[t("p",[e._v("合约没有 receive 和 fallback 可以接受以太币么？")]),e._v(" "),t("ul",[t("li",[e._v("可以接受，可以方法标记 payable 进行转账")])])]),e._v(" "),t("li",[t("p",[e._v("聊一聊合约自毁 "),t("code",[e._v("selfdestruct")]),e._v("。")]),e._v(" "),t("ul",[t("li",[e._v("合约代码从区块链上移除的唯一方式是合约在合约地址上的执行自毁操作 selfdestruct 。selfdestruct 作用是 销毁合约，并把余额发送到指定地址类型 Address。")]),e._v(" "),t("li",[e._v("销毁合约:它使合约变为无效，删除该地址地字节码。")]),e._v(" "),t("li",[e._v("它把合约的所有资金强制发送到目标地址。\n"),t("ul",[t("li",[e._v("如果接受的地址是合约，即使里面没有 "),t("code",[e._v("fallback")]),e._v(" 和 "),t("code",[e._v("receive")]),e._v(" 也会发送过去")])])]),e._v(" "),t("li",[e._v("除非必要，不建议销毁合约。\n"),t("ul",[t("li",[e._v("如果有人发送以太币到移除的合约，这些以太币可能将永远丢失")]),e._v(" "),t("li",[e._v("如果要禁用合约，可以通过修改某个内部状态让所有函数无法执行，这样也可以达到目的。")])])]),e._v(" "),t("li",[e._v("即便一个合约的代码中没有显式地调用 "),t("code",[e._v("selfdestruct")]),e._v("，它仍然有可能通过 "),t("code",[e._v("delegatecall")]),e._v(" 或 "),t("code",[e._v("callcode")]),e._v(" 执行自毁操作。")]),e._v(" "),t("li",[e._v("即使一个合约被 "),t("code",[e._v("selfdestruct")]),e._v(" 删除，它仍然是区块链历史的一部分，区块链的链条中不可能无缘无故消失一个块，这样他们就没办法做校验了。 因此，使用 "),t("code",[e._v("selfdestruct")]),e._v(" 与从硬盘上删除数据是不同的。")])])]),e._v(" "),t("li",[t("p",[e._v("合约进行"),t("code",[e._v("selfdestruct")]),e._v("后，还可以调用状态变量和函数么？")]),e._v(" "),t("ul",[t("li",[e._v("可以调用，但是返回默认值。如果想调用，也可以在存档节点里指定未删除的高度进行调用。")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);