(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{435:function(e,n,t){"use strict";t.r(n);var a=t(2),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_04-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_04-函数"}},[e._v("#")]),e._v(" 04.函数")]),e._v(" "),n("p",[e._v("函数是一组可重用代码的包装，可接受参数作为输入，可返回输出。函数也被称为代码的可执行单元。")]),e._v(" "),n("h2",{attrs:{id:"_1️⃣-函数的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-函数的定义"}},[e._v("#")]),e._v(" 1️⃣ 函数的定义")]),e._v(" "),n("p",[e._v("函数由关键字 "),n("code",[e._v("function")]),e._v(" 声明，后面跟"),n("strong",[e._v("函数名")]),e._v("、"),n("strong",[e._v("参数")]),e._v("、"),n("strong",[e._v("可视范围")]),e._v("、"),n("strong",[e._v("状态可变性")]),e._v("、"),n("strong",[e._v("返回值")]),e._v("的定义。函数可以定义在合约内部，也可以定义在合约外部。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function fnName(<parameter list>)\n    <visibility>\n    <state mutability>\n    [returns(<return type>)] {\n    //语句\n}\n\nfunction fnName(<parameter types>)\n    {internal|external}\n    [pure|view|payable]\n    [returns (<return types>)]{\n        //...\n}\n")])])]),n("ul",[n("li",[e._v("function: 声明函数的固定关键字")]),e._v(" "),n("li",[e._v("fnName : 函数名，推荐小驼峰写法,更多参考: 合约编码规范 ("),n("code",[e._v("TODO:")]),e._v(")")]),e._v(" "),n("li",[n("code",[e._v("<parameter list>")]),e._v(" : 参数列表(参数类型 + 参数名字)")]),e._v(" "),n("li",[n("code",[e._v("<visibility>")]),e._v(": 可见性\n"),n("ul",[n("li",[e._v("public")]),e._v(" "),n("li",[e._v("external")]),e._v(" "),n("li",[e._v("internal")]),e._v(" "),n("li",[e._v("private")])])]),e._v(" "),n("li",[n("code",[e._v("<state mutability>")]),e._v(": 状态可变性\n"),n("ul",[n("li",[e._v("pure")]),e._v(" "),n("li",[e._v("view")]),e._v(" "),n("li",[e._v("payable")]),e._v(" "),n("li",[e._v("不写 "),n("code",[e._v("pure/view/payable")]),e._v(" 中任何一个，代表，函数既可以读取也可以写入状态变量。")])])]),e._v(" "),n("li",[n("code",[e._v("returns (<return types>)")]),e._v(":返回值和返回参数类型")])]),e._v(" "),n("h3",{attrs:{id:"合约内的函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合约内的函数"}},[e._v("#")]),e._v(" 合约内的函数")]),e._v(" "),n("p",[e._v("注意：可以在合约内部或外部定义函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Fun {\n    function add(uint256 x, uint256 y) external pure returns (uint256) {\n        return x + y;\n    }\n\n    function minus(uint256 x, uint256 y) external pure returns (uint256) {\n        return x - y;\n    }\n}\n")])])]),n("h3",{attrs:{id:"合约外的函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合约外的函数"}},[e._v("#")]),e._v(" 合约外的函数")]),e._v(" "),n("p",[e._v("合约之外的函数（也称为“自由函数”）始终具有隐式的 "),n("code",[e._v("internal")]),e._v(" 可见性。 它们的代码包含在所有调用它们合约中，类似于内部库函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nfunction sum(uint256[] memory arr) pure returns (uint256 s) {\n    for (uint256 i = 0; i < arr.length; i++) {\n        s += arr[i];\n    }\n}\n\ncontract ArrayExample {\n    bool public found;\n\n    function f(uint256[] memory arr) public {\n        // 在内部调用 free 函数。编译器会将其代码添加到合约中。\n        uint256 s = sum(arr);\n        found = s >= 10 ? true :false;\n    }\n}\n")])])]),n("p",[e._v("在合约之外定义的函数仍然在合约的上下文内执行。他们仍然可以访问变量 "),n("code",[e._v("this")]),e._v(" ，也可以调用其他合约，将其发送以太币或销毁调用它们合约等其他事情。")]),e._v(" "),n("p",[e._v("与在合约中定义的函数的主要区别为：自由函数不能直接访问存储变量和不在他们的作用域范围内函数。")]),e._v(" "),n("h3",{attrs:{id:"函数的输入参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数的输入参数"}},[e._v("#")]),e._v(" 函数的输入参数")]),e._v(" "),n("p",[e._v("函数参数的声明方式与变量相同。不过未使用的参数可以省略参数名。")]),e._v(" "),n("p",[e._v("例如，如果我们希望合约接受有两个整数形参的函数的外部调用，可以像下面这样写：")]),e._v(" "),n("h4",{attrs:{id:"普通用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#普通用法"}},[e._v("#")]),e._v(" 普通用法")]),e._v(" "),n("p",[e._v("函数参数可以当作为本地变量")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Simple {\n    uint256 sum;\n\n    function add(uint256 a, uint256 b) public {\n        sum = a + b;\n    }\n}\n")])])]),n("h4",{attrs:{id:"函数参数可用在等号左边被赋值。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数可用在等号左边被赋值。"}},[e._v("#")]),e._v(" 函数参数可用在等号左边被赋值。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Simple {\n    function demo(uint256 _a) public pure returns (uint256) {\n        _a = 22;\n        return _a;\n    }\n}\n\n")])])]),n("h4",{attrs:{id:"可以使用数组作为函数参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可以使用数组作为函数参数"}},[e._v("#")]),e._v(" 可以使用数组作为函数参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Simple {\n    uint256[] a;\n\n    function demo(uint256[] memory _a) public returns (uint256[] memory) {\n        a = _a;\n        return _a;\n    }\n}\n")])])]),n("p",[n("strong",[e._v("不同版本的对比:二维数组")])]),e._v(" "),n("p",[e._v("注解:0.8.0 之前外部函数不可以接受多维数组作为参数 如果原文件加入 "),n("code",[e._v("pragma abicoder v2;")]),e._v(" 可以启用 ABI v2 版编码功能，这此功能可用。（注：在 0.7.0 之前是使用 "),n("code",[e._v("pragma experimental ABIEncoderV2;")]),e._v(" ）")]),e._v(" "),n("p",[e._v("内部函数 则不需要启用 ABI v2 就接受多维数组作为参数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\ncontract Simple {\n    uint256[][2] a = [[1, 2], [3, 4]];\n\n    function demo() public view returns (uint256[][2] memory) {\n        return a;\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Simple {\n    uint256[][2] a = [[1, 2], [3, 4]];\n\n    function demo() public view returns (uint256[][2] memory) {\n        return a;\n    }\n}\n")])])]),n("p",[n("strong",[e._v("不同版本的对比:自定义结构")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\ncontract Simple {\n    struct BillType {\n        uint256 duration;\n        uint256 multiplier;\n    }\n    BillType[] public allBillTypes;\n\n    // constructor() public {\n    //     allBillTypes.push(BillType({duration: 1, multiplier: 1}));\n    // }\n\n    function getAllBillType() public view returns (BillType[] memory) {\n        return allBillTypes;\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Simple {\n    struct BillType {\n        uint256 duration;\n        uint256 multiplier;\n    }\n    BillType[] public allBillTypes;\n\n    constructor() {\n        allBillTypes.push(BillType({duration: 1, multiplier: 1}));\n    }\n\n    function getAllBillType() public view returns (BillType[] memory) {\n        return allBillTypes;\n    }\n}\n")])])]),n("p",[e._v("在 0.8.X 版本已经没有问题了。")]),e._v(" "),n("h2",{attrs:{id:"_2️⃣-函数的调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-函数的调用"}},[e._v("#")]),e._v(" 2️⃣ 函数的调用")]),e._v(" "),n("p",[e._v("要调用函数，只需使用函数名，并传入参数即可。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    mapping(address => uint256) public balances;\n\n    event WithdrawAll(uint256 amount);\n\n    //  存款\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    // 取款\n    function withdrawAll() public {\n        uint256 amountBalance = amountAvailable();\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call{value: amountBalance}("");\n        require(success, "Failed to send");\n        emit WithdrawAll(amountBalance);\n    }\n\n    // 扣除 1000 wei 作为合约的使用手续费\n    function amountAvailable() public view returns (uint256) {\n        require(balances[msg.sender] > 1000, "must > 1000");\n        return balances[msg.sender] - 1000;\n    }\n}\n')])])]),n("p",[e._v("上面合约种的 "),n("code",[e._v("amountAvailable")]),e._v(" 既可以在合约外，用户直接调用，也可以在合约内部 "),n("code",[e._v("withdrawAll")]),e._v(" 中使用。")]),e._v(" "),n("h2",{attrs:{id:"_3️⃣-构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-构造函数"}},[e._v("#")]),e._v(" 3️⃣ 构造函数")]),e._v(" "),n("p",[e._v("构造函数关键字 "),n("code",[e._v("constructor")]),e._v("，Solidity 构造函数是一个特殊函数，它仅能在智能合约部署的时候调用一次，创建之后就不能再次被调用。")]),e._v(" "),n("p",[e._v("构造函数是可选的，只允许有一个构造函数，这意味着不支持重载。")]),e._v(" "),n("p",[n("strong",[e._v("用处")]),e._v(": "),n("strong",[e._v("Solidity 构造函数常用来进行状态变量的初始化工作。")])]),e._v(" "),n("ul",[n("li",[e._v("比如设置合约的 owner 权限")]),e._v(" "),n("li",[e._v("设置状态变量的初始值")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorModifier{\n     address public owner;\n    uint public count = 0;\n\n     constructor(uint _x){\n         owner = msg.sender;\n         count = _x;\n     }\n}\n")])])]),n("p",[n("strong",[e._v("需要注意的是")]),e._v("：在合约创建的过程中，它的代码还是空的，所以直到构造函数执行结束，我们都不应该在其中调用合约自己的函数。(我们可以调用，但是不推荐调用)")]),e._v(" "),n("p",[n("strong",[e._v("请注意")]),e._v("：不可以在构造函数中通过 this 来调用函数，因为此时真实的合约实例还没有被创建。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract ErrorModifier {\n    address public owner;\n    uint256 public count = 0;\n\n    constructor(uint256 _x) {\n        owner = msg.sender;\n        count = _x;\n        test();\n    }\n\n    function test() public returns (uint256) {\n        count = 1;\n        return count;\n    }\n}\n")])])]),n("h2",{attrs:{id:"_4️⃣-visibility-可见性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-visibility-可见性"}},[e._v("#")]),e._v(" 4️⃣ visibility:可见性")]),e._v(" "),n("p",[e._v("可见性标识符的定义位置，对于状态变量来说是在类型后面，对于函数是在参数列表和返回关键字中间。")]),e._v(" "),n("p",[e._v("函数对不同的合约有不同的可见性。visibility 又称为:"),n("strong",[e._v("可视范围")]),e._v("/"),n("strong",[e._v("可见性")]),e._v("/"),n("strong",[e._v("作用域")]),e._v(",函数的可视范围有四种：")]),e._v(" "),n("ul",[n("li",[e._v("Private（私有）：函数只能在所定义的智能合约内部调用。\n"),n("ul",[n("li",[e._v("在继承的合约内不可访问。")])])]),e._v(" "),n("li",[e._v("Internal（内部）：可以在所定义智能合约内部调用该函数，也可以从继承合约中调用该函数。\n"),n("ul",[n("li",[e._v("internal 函数和状态变量可以在当前合约或继承合约里调用。需要注意的是不能加前缀 this，前缀 this 是表示通过外部方式访问。")])])]),e._v(" "),n("li",[e._v("External（外部）：只能从智能合约外部调用。 如果要从智能合约中调用它，则必须使用 "),n("code",[e._v("this")]),e._v("。\n"),n("ul",[n("li",[e._v("外部函数是合约接口的一部分，所以我们可以从其它合约或通过交易来发起调用。一个外部函数 f，不能通过内部的方式来发起调用，如 f()不可以调用，但可以通过 this.f()。")]),e._v(" "),n("li",[e._v("外部函数在接收大的数组数据时更加有效。")])])]),e._v(" "),n("li",[e._v("Public（公开）：可以从任何地方调用。")])]),e._v(" "),n("p",[e._v("内部函数只能在当前合约内被调用（更具体来说，在当前代码块内，包括内部库函数和继承的函数中），因为它们不能在当前合约上下文的外部被执行。")]),e._v(" "),n("ul",[n("li",[e._v("调用一个内部函数是通过跳转到它的入口标签来实现的，就像在当前合约的内部调用一个函数。")]),e._v(" "),n("li",[e._v("外部函数由"),n("strong",[e._v("一个地址")]),e._v("和"),n("strong",[e._v("一个函数签名")]),e._v("组成，可以通过外部函数调用传递或者返回。")])]),e._v(" "),n("p",[e._v("函数类型默认是内部函数，因此不需要声明 "),n("code",[e._v("internal")]),e._v(" 关键字。请注意，这仅适用于函数类型，合约中定义的函数明确指定可见性，它们没有默认值。")]),e._v(" "),n("p",[e._v("更多内容参考 "),n("RouterLink",{attrs:{to:"/source/03.variable.html#id12"}},[e._v("变量的作用域&可视范围")])],1),e._v(" "),n("h3",{attrs:{id:"private"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[e._v("#")]),e._v(" private")]),e._v(" "),n("p",[e._v("private 函数和状态变量仅在当前定义它们的合约中使用，并且不能被派生合约使用。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\ncontract C {\n    function f(uint a) private pure returns (uint b) { return a + 1; }\n    function setData(uint a) internal { data = a; }\n    uint public data;\n}\n")])])]),n("p",[e._v("在下面的例子中，"),n("code",[e._v("D")]),e._v(" 可以调用 "),n("code",[e._v("c.getData（）")]),e._v(" 来获取状态存储中 "),n("code",[e._v("data")]),e._v("\n的值，但不能调用 "),n("code",[e._v("f")]),e._v(" 。 合约 "),n("code",[e._v("E")]),e._v(" 继承自 "),n("code",[e._v("C")]),e._v(" ，因此可以调用 "),n("code",[e._v("compute")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pragma solidity >=0.4.16 <0.9.0;\n\ncontract C {\n    uint private data;\n\n    function f(uint a) private returns(uint b) { return a + 1; }\n    function setData(uint a) public { data = a; }\n    function getData() public returns(uint) { return data; }\n    function compute(uint a, uint b) internal returns (uint) { return a+b; }\n}\n\n// 下面代码编译错误\ncontract D {\n    function readData() public {\n        C c = new C();\n        uint local = c.f(7); // 错误：成员 `f` 不可见\n        c.setData(3);\n        local = c.getData();\n        local = c.compute(3, 5); // 错误：成员 `compute` 不可见\n    }\n}\n\ncontract E is C {\n    function g() public {\n        C c = new C();\n        uint val = compute(3, 5); // 访问内部成员（从继承合约访问父合约成员）\n    }\n}\n")])])]),n("p",[e._v("警告: 设置为 "),n("code",[e._v("private")]),e._v("或 "),n("code",[e._v("internal")]),e._v("，只能防止其他合约读取或修改信息，但它仍然可以在链外查看到。")]),e._v(" "),n("h3",{attrs:{id:"internal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#internal"}},[e._v("#")]),e._v(" internal")]),e._v(" "),n("p",[e._v("一个内部函数可以被分配给一个内部函数类型的变量，无论定义在哪里，包括合约和库的私有、内部和 public 函数，以及自由函数。")]),e._v(" "),n("p",[e._v("另一方面，外部函数类型只与 public 和外部合约函数兼容。库是不可以的，因为库使用 delegatecall，并且 他们的函数选择器有不同的 ABI 转换 。 接口中声明的函数没有定义，所以指向它们也没有意义。")]),e._v(" "),n("p",[e._v("内部可见性函数访问可以在当前合约或派生的合约访问，不可以外部访问。 由于它们没有通过合约的 ABI 向外部公开，它们可以接受内部可见性类型的参数：比如映射或存储引用。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary ArrayUtils {\n    // 内部函数可以在内部库函数中使用，\n    // 因为它们会成为同一代码上下文的一部分\n    function map(\n        uint256[] memory self,\n        function(uint256) pure returns (uint256) f\n    ) internal pure returns (uint256[] memory r) {\n        r = new uint256[](self.length);\n        for (uint256 i = 0; i < self.length; i++) {\n            r[i] = f(self[i]);\n        }\n    }\n\n    function reduce(\n        uint256[] memory self,\n        function(uint256, uint256) pure returns (uint256) f\n    ) internal pure returns (uint256 r) {\n        r = self[0];\n        for (uint256 i = 1; i < self.length; i++) {\n            r = f(r, self[i]);\n        }\n    }\n\n    function range(uint256 length) internal pure returns (uint256[] memory r) {\n        r = new uint256[](length);\n        for (uint256 i = 0; i < r.length; i++) {\n            r[i] = i;\n        }\n    }\n}\n\ncontract Pyramid {\n    using ArrayUtils for *;\n\n    function pyramid(uint256 l) public pure returns (uint256) {\n        return ArrayUtils.range(l).map(square).reduce(sum);\n    }\n\n    function square(uint256 x) internal pure returns (uint256) {\n        return x * x;\n    }\n\n    function sum(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x + y;\n    }\n}\n")])])]),n("p",[e._v("当前合约中的函数可以直接（“从内部”）调用，也可以递归调用，就像下边这个无意义的例子一样。（输出"),n("code",[e._v('"uint256: ret 0"')]),e._v("）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// 编译器会有警告提示\ncontract C {\n    function g(uint256 a) public pure returns (uint256 ret) {\n        return f();\n    }\n\n    function f() internal pure returns (uint256 ret) {\n        return g(7) + f();\n    }\n}\n")])])]),n("p",[e._v("这些函数调用在 EVM 中被解释为简单的跳转。这样做的效果就是当前内存不会被清除，例如，函数之间通过传递内存引用进行内部调用是非常高效的。 只能在同一合约实例的函数，可以进行内部调用。")]),e._v(" "),n("p",[e._v("只有在同一合约的函数可以内部调用。仍然应该避免过多的递归调用, 因为每个内部函数调用至少使用一个堆栈槽, 并且最多有 1024 堆栈槽可用。")]),e._v(" "),n("h3",{attrs:{id:"external"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#external"}},[e._v("#")]),e._v(" external")]),e._v(" "),n("p",[e._v("external 外部可见性函数作为合约接口的一部分，意味着我们可以从其他合约和交易中调用。 一个外部函数 "),n("code",[e._v("f")]),e._v(" 不能从内部调用（即 "),n("code",[e._v("f")]),e._v(" 不起作用，但 "),n("code",[e._v("this.f()")]),e._v(" 可以）。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Oracle {\n    struct Request {\n        bytes data;\n        function(uint256) external callback;\n    }\n    Request[] private requests;\n    event NewRequest(uint256);\n\n    function query(bytes memory data, function(uint256) external callback)\n        public\n    {\n        requests.push(Request(data, callback));\n        emit NewRequest(requests.length - 1);\n    }\n\n    function reply(uint256 requestID, uint256 response) public {\n        // 这里检查回复来自可信来源\n        requests[requestID].callback(response);\n    }\n}\n\ncontract OracleUser {\n    Oracle private constant ORACLE_CONST =\n        Oracle(address(0x00000000219ab540356cBB839Cbe05303d7705Fa)); // known contract\n    uint256 private exchangeRate;\n\n    function buySomething() public {\n        ORACLE_CONST.query("USD", this.oracleResponse);\n    }\n\n    function oracleResponse(uint256 response) public {\n        require(\n            msg.sender == address(ORACLE_CONST),\n            "Only oracle can call this."\n        );\n        exchangeRate = response;\n    }\n}\n')])])]),n("p",[e._v("方式也可以使用表达式 "),n("code",[e._v("this.g(8)")]),e._v("; 和 "),n("code",[e._v("c.g(2)")]),e._v("; 进行调用，其中 c 是合约实例， g 合约内实现的函数，但是这两种方式调用函数，称为“外部调用”，"),n("strong",[e._v("它是通过消息调用来进行，而不是直接的代码跳转")]),e._v("。请注意，不可以在构造函数中通过 "),n("code",[e._v("this")]),e._v(" 来调用函数，因为此时真实的合约实例还没有被创建。")]),e._v(" "),n("p",[e._v("如果想要调用其他合约的函数，需要外部调用。对于一个外部调用，所有的函数参数都需要被复制到内存。")]),e._v(" "),n("blockquote",[n("p",[e._v("从一个合约到另一个合约的函数调用不会创建自己的交易, 它是作为整个交易的一部分的消息调用。")])]),e._v(" "),n("h4",{attrs:{id:"调用函数并转账"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用函数并转账"}},[e._v("#")]),e._v(" 调用函数并转账")]),e._v(" "),n("p",[e._v("当调用其他合约的函数时，需要在函数调用是指定发送的 Wei 和 gas 数量，可以使用特定选项　"),n("code",[e._v("{value: 10, gas: 10000}")]),e._v(",请注意，不建议明确指定 gas，因为操作码的 gas 消耗将来可能会发生变化。 任何发送给合约 Wei 将被添加到目标合约的总余额中：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract InfoFeed {\n    function info() external payable returns (uint256 ret) {\n        return 42;\n    }\n}\n\ncontract Consumer {\n    InfoFeed feed;\n\n    function setFeed(InfoFeed addr) public {\n        feed = addr;\n    }\n\n    function callFeed() public payable{\n        feed.info{value: 10, gas: 800}();\n    }\n}\n")])])]),n("p",[e._v("payable 修饰符要用于修饰 info 函数，否则， value 选项将不可用。")]),e._v(" "),n("p",[e._v("注意 "),n("code",[e._v("feed.info{value: 10, gas: 800}")]),e._v(" 仅（局部地）设置了与函数调用一起发送的 Wei 值和 gas 的数量，只有最后的小括号才执行了真正的调用。 因此， "),n("code",[e._v("feed.info{value: 10, gas: 800}")]),e._v(" 是没有调用函数的， "),n("code",[e._v("value")]),e._v(" 和 "),n("code",[e._v("gas")]),e._v(" 设置是无效的。")]),e._v(" "),n("h4",{attrs:{id:"extcodesize-操作码来检查要调用的合约是否确实存在"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extcodesize-操作码来检查要调用的合约是否确实存在"}},[e._v("#")]),e._v(" extcodesize 操作码来检查要调用的合约是否确实存在")]),e._v(" "),n("p",[e._v("由于 EVM 认为可以调用不存在的合约的调用，因此在 Solidity 语言层面里会使用 extcodesize 操作码来检查要调用的合约是否确实存在（包含代码），如果不存在该合约，则抛出异常。如果返回数据在调用后被解码，则跳过这个检查，因此 ABI 解码器将捕捉到不存在的合约的情况。")]),e._v(" "),n("p",[e._v("请注意，这个检查在 "),n("strong",[e._v("低级 call")]),e._v(" 时不被执行，这些调用是对地址而不是合约实例进行操作。")]),e._v(" "),n("p",[e._v("当使用高级别的方式调用 预编译合约时 需要注意，因为因为根据上面的逻辑，编译器认为它们不存在，即使它们执行代码并返回数据。")]),e._v(" "),n("p",[e._v("如果被调用合约本身抛出异常或者 gas 用完等，函数调用也会抛出异常。")]),e._v(" "),n("h4",{attrs:{id:"与其他合约交互时候有什么需要注意的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与其他合约交互时候有什么需要注意的"}},[e._v("#")]),e._v(" 与其他合约交互时候有什么需要注意的？")]),e._v(" "),n("blockquote",[n("p",[e._v("任何与其他合约的交互都会产生潜在危险，尤其是在不能预先知道合约代码的情况下。 交互时当前合约会将控制权移交给被调用合约，而被调用合约可能做任何事。即使被调用合约从一个已知父合约继承，继承的合约也只需要有一个正确的接口就可以了。 被调用合约的实现可以完全任意的实现，因此会带来危险。 此外，请小心这个交互调用在返回之前再回调我们的合约，这意味着被调用合约可以通过它自己的函数改变调用合约的状态变量。 一个建议的函数写法是，例如，在合约中状态变量进行各种变化后再调用外部函数，这样，你的合约就不会轻易被滥用的重入攻击 (reentrancy) 所影响")])]),e._v(" "),n("h3",{attrs:{id:"public"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[e._v("#")]),e._v(" public")]),e._v(" "),n("p",[e._v("请注意，当前合约的 public 函数既可以被当作内部函数也可以被当作外部函数使用。 如果想将一个函数当作内部函数使用，就用 "),n("code",[e._v("f")]),e._v(" 调用，如果想将其当作外部函数，使用 "),n("code",[e._v("this.f")]),e._v(" 。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Example {\n  function f() public payable returns (bytes4) {\n    assert(this.f.address == address(this));\n    return this.f.selector;\n  }\n  function g() public {\n    this.f{gas: 10, value: 800}();\n  }\n}\n")])])]),n("h3",{attrs:{id:"public-external-函数的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#public-external-函数的属性"}},[e._v("#")]),e._v(" public & external 函数的属性")]),e._v(" "),n("p",[e._v("public（或 external）函数都有下面的成员：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v(".address")]),e._v(" 返回函数的合约地址。")]),e._v(" "),n("li",[n("code",[e._v(".selector")]),e._v(" 返回 ABI 函数选择器")])]),e._v(" "),n("p",[e._v("由于 Solidity 有两种函数调用：外部调用则会产生一个 EVM 调用，而内部调用不会。")]),e._v(" "),n("h3",{attrs:{id:"例子-internal-和-external-搭配做-dao-的管理员的小案例。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-internal-和-external-搭配做-dao-的管理员的小案例。"}},[e._v("#")]),e._v(" 例子: "),n("code",[e._v("internal")]),e._v(" 和 "),n("code",[e._v("external")]),e._v(" 搭配做 DAO 的管理员的小案例。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DAO {\n    // 状态变量\n    mapping(address => bool) public admins;\n\n    // 事件\n    event AddAdmin(address indexed ads);\n\n    // 函数修改器\n    modifier onlyRole() {\n        require(admins[msg.sender], "Not Authorized");\n        _;\n    }\n\n    constructor() {\n        _addAdmin(msg.sender);\n    }\n\n    function _addAdmin(address _ads) internal {\n        admins[_ads] = true;\n        emit AddAdmin(_ads);\n    }\n\n    function addAdmin(address _ads) external onlyRole {\n        _addAdmin(_ads);\n    }\n}\n')])])]),n("p",[e._v("例子小结:")]),e._v(" "),n("ul",[n("li",[e._v("该特性常用于权限的区分；\n"),n("ul",[n("li",[e._v("比如 "),n("code",[e._v("internal _fn")]),e._v(" 用于在 "),n("code",[e._v("constructor")]),e._v(" 内使用。而 "),n("code",[e._v("external fn")]),e._v(" 用于外部带验证使用，并且在 "),n("code",[e._v("fn")]),e._v(" 内部调用 "),n("code",[e._v("_fn")]),e._v(";")])])])]),e._v(" "),n("h3",{attrs:{id:"例子-合约继承的例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-合约继承的例子"}},[e._v("#")]),e._v(" 例子:合约继承的例子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract A {\n    uint256 private varPrivate = 0;\n    uint256 internal varInternal = 1;\n    // 不能声明 external 可见性的状态变量\n    // uint256 external varExternal = 2; // Expected identifier but got 'external'\n    uint256 public varPublic = 3;\n\n    function testPrivate() private pure returns (uint256) {\n        return 0;\n    }\n\n    function testInternal() internal pure returns (uint256) {\n        return 1;\n    }\n\n    function testExternal() external pure returns (uint256) {\n        return 2;\n    }\n\n    function testPublic() public pure returns (uint256) {\n        return 3;\n    }\n}\n\ncontract B is A {\n    function getVal() external view returns (uint256, uint256) {\n        // return varPrivate; // private 仅在A内，不能被继承,无法访问\n        return (varInternal, varPublic);\n    }\n\n    function getFn()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        // uint256 p = testPrivate(); // private 仅在A内，不能被继承,无法访问\n        uint256 i = testInternal(); // 可访问 internal 函数\n\n        // external 只能在外部访问，不能直接访问 external 函数\n        // uint256 e = testExternal();\n        // 虽然不能直接访问，但是可以使用 this 代表合约外部，\n        // 然后调用外部函数；该方法不推荐。\n        uint256 e2 = this.testExternal();\n\n        uint256 p2 = this.testPublic();\n        return (i, e2, p2);\n    }\n}\n")])])]),n("p",[n("strong",[e._v("总结:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n -----------------------\n| contract A            |\n|                       |\n| 有效变量类型:           |\n| varPrivate            |\n| varInternal           |\n| varPublic             | <------------ 外部\n| 不存在external变量      |     变量: varPublic\n|                       |     方法: testPublic / testExternal\n| 有效函数类型:           |\n| testPrivate           |\n| testInternal          |\n| testExternal          |\n| testPublic            |\n -----------------------\n\n -----------------------\n| contract B            |\n|                       |\n| 有效变量类型:           |\n| varInternal           |\n| varPublic             | <------------ 外部\n|                       |     变量: varPublic\n|                       |     方法: testPublic / testExternal\n| 有效函数类型:           |\n| testInternal          |\n| testPublic            |\n -----------------------\n */\n")])])]),n("h2",{attrs:{id:"_5️⃣-mutability-状态可变性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-mutability-状态可变性"}},[e._v("#")]),e._v(" 5️⃣ mutability:状态可变性")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("pure")]),e._v(": 既不读取也不修改状态变量\n"),n("ul",[n("li",[e._v("这种函数被称为"),n("strong",[e._v("纯函数")])])])]),e._v(" "),n("li",[n("code",[e._v("view")]),e._v(": 读取状态变量，但是不修改状态变量\n"),n("ul",[n("li",[e._v("这种函数被称为"),n("strong",[e._v("视图函数")])]),e._v(" "),n("li",[e._v("状态变量的 Getter 方法默认是 view 函数。")])])]),e._v(" "),n("li",[n("code",[e._v("payable")]),e._v("：用 payable 声明的函数可以接受发送给合约的以太币.\n"),n("ul",[n("li",[e._v("如果未指定，该函数将自动拒绝所有发送给它的以太币")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ViewAndPure{\n    uint public num ;\n\n    function viewFn() external view returns(uint){\n        return num;\n    }\n    function pureFn(uint x) external pure returns(uint){\n        return x + 1;\n    }\n\n}\n")])])]),n("h3",{attrs:{id:"_1-pure-不允许的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-pure-不允许的操作"}},[e._v("#")]),e._v(" 1.pure 不允许的操作")]),e._v(" "),n("p",[e._v("声明为 pure 函数，可以在函数声明里，添加 pure 关键字。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract C {\n    function f(uint256 a, uint256 b) public pure returns (uint256) {\n        return a * (b + 42);\n    }\n}\n")])])]),n("p",[e._v("如果函数中存在以下语句，则被视为读取状态，编译器将抛出警告。")]),e._v(" "),n("ul",[n("li",[e._v("读取状态变量。\n"),n("ul",[n("li",[e._v("这也意味着读取 "),n("code",[e._v("immutable")]),e._v(" 变量也不是一个 "),n("code",[e._v("pure")]),e._v(" 操作。")])])]),e._v(" "),n("li",[e._v("访问 "),n("code",[e._v("address(this).balance")]),e._v(" 或 "),n("code",[e._v("<address>.balance")])]),e._v(" "),n("li",[e._v("访问 "),n("code",[e._v("block")]),e._v("，"),n("code",[e._v("tx")]),e._v("， "),n("code",[e._v("msg")]),e._v(" 中任意成员 （除 "),n("code",[e._v("msg.sig")]),e._v(" 和 "),n("code",[e._v("msg.data")]),e._v(" 之外）。")]),e._v(" "),n("li",[e._v("调用任何未标记为 "),n("code",[e._v("pure")]),e._v(" 的函数。")]),e._v(" "),n("li",[n("strong",[e._v("使用包含特定操作码的内联汇编。")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("TODO:")]),e._v(" 这个不了解，需要用例子加深印象。")])])]),e._v(" "),n("li",[e._v("使用操作码 "),n("code",[e._v("STATICCALL")]),e._v(" , 这并不保证状态未被读取, 但至少不被修改。")])]),e._v(" "),n("p",[e._v("如果发生错误，"),n("code",[e._v("pure")]),e._v(" 函数可以使用 "),n("code",[e._v("revert()")]),e._v("和 "),n("code",[e._v("require()")]),e._v(" 函数来还原潜在的状态更改。还原状态更改不被视为 "),n("strong",[e._v("状态修改")]),e._v(", 因为它只还原以前在没有"),n("code",[e._v("view")]),e._v(" 或 "),n("code",[e._v("pure")]),e._v(" 限制的代码中所做的状态更改, 并且代码可以选择捕获 revert 并不传递还原。这种行为也符合 STATICCALL 操作码。")]),e._v(" "),n("p",[n("strong",[e._v("警告")]),e._v(":不可能在 EVM 级别阻止函数读取状态, 只能阻止它们写入状态 (即只能在 EVM 级别强制执行 "),n("code",[e._v("view")]),e._v(" , 而 "),n("code",[e._v("pure")]),e._v(" 不能强制)。")]),e._v(" "),n("blockquote",[n("p",[e._v("在 0.5.0 版本之前, 编译器没有对 pure 函数使用 STATICCALL 操作码。这样通过使用无效的显式类型转换启用 pure 函数中的状态修改。 通过对 pure 函数使用 STATICCALL , 可以防止在 EVM 级别上对状态进行修改。")])]),e._v(" "),n("blockquote",[n("p",[e._v("在 0.4.17 版本之前，编译器不会强制 pure 函数不读取状态。它是一个编译时类型检查, 可以避免在合约类型之间进行无效的显式转换, 因为编译器可以验证合约类型没有状态更改操作, 但它不会在运行时能检查调用实际的类型。")])]),e._v(" "),n("h3",{attrs:{id:"_2-view-不允许的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-view-不允许的操作"}},[e._v("#")]),e._v(" 2.view 不允许的操作")]),e._v(" "),n("p",[e._v("可以将函数声明为 view 类型，这种情况下要保证不修改状态。声明为 view 图函数，可以在函数声明里，添加 view 关键字。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract C {\n    function f(uint256 a, uint256 b) public view returns (uint256) {\n        return a * (b + 42) + block.timestamp;\n    }\n}\n")])])]),n("p",[n("strong",[e._v("注解")]),e._v(": Getter 方法自动被标记为 view。")]),e._v(" "),n("p",[e._v("如果函数中存在以下语句，则被视为修改状态，编译器将抛出警告。")]),e._v(" "),n("ul",[n("li",[e._v("修改状态变量。")]),e._v(" "),n("li",[e._v("触发事件。")]),e._v(" "),n("li",[e._v("创建其它合约。")]),e._v(" "),n("li",[e._v("使用 "),n("code",[e._v("selfdestruct")]),e._v("。")]),e._v(" "),n("li",[e._v("通过调用发送以太币。")]),e._v(" "),n("li",[e._v("调用任何没有标记为 view 或者 pure 的函数。")]),e._v(" "),n("li",[e._v("使用底层调用\n"),n("ul",[n("li",[e._v("(TODO:这里是 call 操作么？)")])])]),e._v(" "),n("li",[e._v("使用包含某些操作码的内联程序集。")])]),e._v(" "),n("h3",{attrs:{id:"payable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#payable"}},[e._v("#")]),e._v(" payable")]),e._v(" "),n("h3",{attrs:{id:"一个加和减的-demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个加和减的-demo"}},[e._v("#")]),e._v(" 一个加和减的 DEMO")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Counter{\n    uint public count ;\n\n    function add() external {\n        count+=1;\n    }\n\n    function minus() external {\n        count-=1;\n    }\n}\n")])])]),n("h3",{attrs:{id:"状态可变性的类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态可变性的类型转换"}},[e._v("#")]),e._v(" 状态可变性的类型转换")]),e._v(" "),n("p",[e._v("如果满足下列条件，函数类型 A 可以隐式转换为函数类型:")]),e._v(" "),n("ul",[n("li",[e._v("它们的参数类型相同，返回类型相同，它们的内部/外部属性是相同的，并且 A 的状态可变性比 B 的状态可变性更具限制性")])]),e._v(" "),n("p",[e._v("比如：")]),e._v(" "),n("ul",[n("li",[e._v("pure 函数可以转换为 view 和 non-payable 函数")]),e._v(" "),n("li",[e._v("view 函数可以转换为 non-payable 函数")]),e._v(" "),n("li",[e._v("payable 函数可以转换为 non-payable 函数")]),e._v(" "),n("li",[e._v("其他的转换则不可以。")])]),e._v(" "),n("p",[e._v("关于 "),n("code",[e._v("payable")]),e._v(" 和 "),n("code",[e._v("non-payable")]),e._v(" 的规则可能有点令人困惑，但实质上，如果一个函数是 "),n("code",[e._v("payable")]),e._v(" ，这意味着它 也接受零以太的支付，因此它也是 "),n("code",[e._v("non-payable")]),e._v(" 。 另一方面，"),n("code",[e._v("non-payable")]),e._v(" 函数将拒绝发送给它的 以太币 Ether ， 所以 "),n("code",[e._v("non-payable")]),e._v(" 函数不能转换为 "),n("code",[e._v("payable")]),e._v(" 函数。")]),e._v(" "),n("h2",{attrs:{id:"_6️⃣-函数的返回值-returns-return"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-函数的返回值-returns-return"}},[e._v("#")]),e._v(" 6️⃣ 函数的返回值 returns/return")]),e._v(" "),n("p",[e._v("函数返回类型不能为空 —— 如果函数类型不需要返回，则需要删除整个 "),n("code",[e._v("returns (<return types>)")]),e._v(" 部分。")]),e._v(" "),n("p",[e._v("函数可能返回任意数量的参数作为输出。函数的返回值有两个关键字，一个是"),n("code",[e._v("returns")]),e._v(",一个是 "),n("code",[e._v("return")]),e._v(";")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("returns")]),e._v(" 是在函数名后面的，用来标示返回值的数量，类型，名字信息。")]),e._v(" "),n("li",[n("code",[e._v("return")]),e._v(" 是在函数主体内，用于返回 "),n("code",[e._v("returns")]),e._v(" 指定的数据信息")])]),e._v(" "),n("h3",{attrs:{id:"多种返回值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多种返回值"}},[e._v("#")]),e._v(" 多种返回值")]),e._v(" "),n("p",[e._v("函数返回变量的声明方式在关键词 "),n("code",[e._v("returns")]),e._v(" 之后，与参数的声明方式相同。函数有以下几个返回值。")]),e._v(" "),n("ol",[n("li",[e._v("单个返回值")]),e._v(" "),n("li",[e._v("多个返回值")]),e._v(" "),n("li",[e._v("带有名字的返回值")]),e._v(" "),n("li",[e._v("隐式返回")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    // 单个返回值\n    function returnSingle() public pure returns (uint256) {\n        return 1;\n    }\n\n    // 多个返回值\n    function returnMultiple() public pure returns (uint256, bool) {\n        return (1, true);\n    }\n\n    // 带有名字的返回值\n    // 这个形式等同于赋值给返回参数，然后用 return; 退出。\n    function returnName() public pure returns (uint256 u, bool b) {\n        return (1, true);\n    }\n\n    // 隐式返回\n    function returnAssigned() public pure returns (uint256 u, bool b) {\n        u = 1;\n        b = true;\n    }\n}\n")])])]),n("p",[n("strong",[e._v("返回变量名可以被省略")]),e._v("。 返回变量可以当作为函数中的本地变量，没有显式设置的话，会使用 :默认值。返回变量可以显式给它附一个值")]),e._v(" "),n("p",[e._v("如果使用 return 提前退出有返回值的函数， 必须在用 return 时提供返回值。")]),e._v(" "),n("p",[n("strong",[e._v("注解")]),e._v("：非内部函数有些类型没法返回，比如限制的类型有：多维动态数组、结构体等。如果添加 "),n("code",[e._v("pragma abicoder v2;")]),e._v(" 启用 ABI V2 编码器，则是可以的返回更多类型，不过 mapping 仍然是受限的。")]),e._v(" "),n("h3",{attrs:{id:"小测试-如下合约-test-调用后返回什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小测试-如下合约-test-调用后返回什么"}},[e._v("#")]),e._v(" 小测试:如下合约，test 调用后返回什么")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    //当给返回值赋值后，并且有个return，以最后的return为主\n    function test() public pure returns (uint256 mul) {\n        uint256 a = 10;\n        mul = 100;\n        return a;\n    }\n}\n")])])]),n("p",[e._v("答案: 返回结果是: "),n("code",[e._v("0:uint256: mul 10")])]),e._v(" "),n("h3",{attrs:{id:"合约内函数返回值的接收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合约内函数返回值的接收"}},[e._v("#")]),e._v(" 合约内函数返回值的接收")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionOutputs {\n    // 多个返回值\n    function returnMultiple() public pure returns (uint256, bool) {\n        return (1, true);\n    }\n\n    function a() external pure returns (uint256 u, bool b) {\n        // 接收返回值\n        (uint256 uu, bool bb) = returnMultiple();\n\n        // 只接受一个返回值\n        (, bool bbb) = returnMultiple();\n\n        // 接收并返回\n        (u, b) = returnMultiple();\n    }\n}\n")])])]),n("h3",{attrs:{id:"解构赋值和返回多值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值和返回多值"}},[e._v("#")]),e._v(" 解构赋值和返回多值")]),e._v(" "),n("p",[e._v("Solidity 内部允许元组 (tuple) 类型，也就是一个在编译时元素数量固定的对象列表，列表中的元素可以是不同类型的对象。这些元组可以用来同时返回多个数值，也可以用它们来同时给多个新声明的变量或者既存的变量（或通常的 LValues）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pragma solidity >=0.5.0 <0.9.0;\n\ncontract C {\n    uint index;\n\n    function f() public pure returns (uint, bool, uint) {\n        return (7, true, 2);\n    }\n\n    function g() public {\n        //基于返回的元组来声明变量并赋值\n        (uint x, bool b, uint y) = f();\n        //交换两个值的通用窍门——但不适用于非值类型的存储 (storage) 变量。\n        (x, y) = (y, x);\n        //元组的末尾元素可以省略（这也适用于变量声明）。\n        (index,,) = f(); // 设置 index 为 7\n    }\n}\n")])])]),n("p",[e._v("不可能混合变量声明和非声明变量复制, 即以下是无效的: "),n("code",[e._v("(x, uint y) = (1, 2);")])]),e._v(" "),n("p",[e._v("在 0.5.0 版本之前，给具有更少的元素数的元组赋值都可以可能的，无论是在左边还是右边（比如在最后空出若干元素）。现在，这已经不允许了，赋值操作的两边应该具有相同个数的组成元素。")]),e._v(" "),n("p",[e._v("当涉及引用类型时，在同时分配给多个变量时要小心, 因为这可能会导致意外的复制行为。")]),e._v(" "),n("h3",{attrs:{id:"数组和结构体的复杂性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组和结构体的复杂性"}},[e._v("#")]),e._v(" 数组和结构体的复杂性")]),e._v(" "),n("p",[n("code",[e._v("TODO:")]),e._v(" 赋值语义对于像数组和结构体(包括 bytes 和 string) 这样的非值类型来说会有些复杂。参考 数据位置及赋值行为 了解更多 。")]),e._v(" "),n("p",[e._v("在下面的示例中, 对 "),n("code",[e._v("g(x)")]),e._v(" 的调用对 "),n("code",[e._v("x")]),e._v(" 没有影响, 因为它在内存中创建了存储值独立副本。但是, "),n("code",[e._v("h(x)")]),e._v(" 成功修改 "),n("code",[e._v("x")]),e._v(" , 因为只传递引用而不传递副本。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n contract C {\n    uint[20] public x;\n\n     function f() public {\n        g(x);\n        h(x);\n    }\n\n     function g(uint[20] memory y) internal pure {\n        y[2] = 3;\n    }\n\n     function h(uint[20] storage y) internal {\n        y[3] = 4;\n    }\n}\n")])])]),n("h2",{attrs:{id:"_7️⃣-函数的签名-函数标识符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7️⃣-函数的签名-函数标识符"}},[e._v("#")]),e._v(" 7️⃣ 函数的签名/函数标识符")]),e._v(" "),n("p",[e._v("在变量的全局变量那一章，我们介绍了 "),n("code",[e._v("msg.data")]),e._v(" "),n("code",[e._v("msg.sig")]),e._v(",分别是调用合约的完整的 calldata，以及"),n("strong",[e._v("函数标识符")]),e._v("（calldata 的前四个字节）")]),e._v(" "),n("h3",{attrs:{id:"查看-msg-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看-msg-data"}},[e._v("#")]),e._v(" 查看 msg.data")]),e._v(" "),n("p",[e._v("代码如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Receiver {\n    event Log(bytes data1, bytes4 data2);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        payable\n        returns (address, uint256)\n    {\n        emit Log(msg.data, msg.sig);\n        return (msg.sender, msg.value);\n    }\n}\n")])])]),n("ul",[n("li",[n("strong",[e._v("输入")]),e._v(":\n"),n("ul",[n("li",[n("code",[e._v("0x5B38Da6a701c568545dCfcB03FcB875f56beddC4")])]),e._v(" "),n("li",[n("code",[e._v("1")])])])]),e._v(" "),n("li",[n("strong",[e._v("logs 结果")]),e._v(":\n"),n("ul",[n("li",[n("strong",[e._v("data1")]),e._v(" （为了方便阅读，我拆分成如下）"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("0xa9059cbb\n0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4\n0000000000000000000000000000000000000000000000000000000000000001\n")])])])]),e._v(" "),n("li",[n("strong",[e._v("data2")]),e._v(" 结果如下\n"),n("ul",[n("li",[n("code",[e._v("0xa9059cbb")])])])])])]),e._v(" "),n("li",[n("strong",[e._v("output 结果")]),e._v(":\n"),n("ul",[n("li",[n("code",[e._v("0x5B38Da6a701c568545dCfcB03FcB875f56beddC4")])]),e._v(" "),n("li",[n("code",[e._v("2")])])])])]),e._v(" "),n("h3",{attrs:{id:"msg-data-中函数标识符的实现逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#msg-data-中函数标识符的实现逻辑"}},[e._v("#")]),e._v(" msg.data 中"),n("strong",[e._v("函数标识符")]),e._v("的实现逻辑")]),e._v(" "),n("p",[e._v("核心: "),n("code",[e._v('bytes4(keccak256(bytes("transfer(address,uint256)")))')])]),e._v(" "),n("p",[e._v("一个函数调用数据的前 4 字节，指定了要调用的函数。这就是某个函数签名的 Keccak 哈希的前 4 字节（bytes32 类型是从左取值）。")]),e._v(" "),n("p",[e._v("函数签名被定义为基础原型的规范表达，而基础原型是"),n("strong",[e._v("函数名称加上由括号括起来的参数类型列表，参数类型间由一个逗号分隔开，且没有空格。")]),e._v(".")]),e._v(" "),n("p",[e._v("代码如下，获取 Hash 后的值，和截取后的值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FunctionSelector {\n    function getSelector(string calldata _func)\n        external\n        pure\n        returns (bytes32, bytes4)\n    {\n        // _func 字符串通过 bytes 转为 bytes\n        // 使用 keccak256 进行 Hash值运算\n        // 使用 bytes4 截取 keccak256 返回的32位数据\n        return (keccak256(bytes(_func)), bytes4(keccak256(bytes(_func))));\n    }\n}\n")])])]),n("p",[n("strong",[e._v("测试：")])]),e._v(" "),n("ol",[n("li",[e._v("部署")]),e._v(" "),n("li",[e._v("输入 "),n("code",[e._v('"transfer(address,uint256)"')])]),e._v(" "),n("li",[e._v("获取结构\n"),n("ol",[n("li",[n("code",[e._v("0xa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b")])]),e._v(" "),n("li",[n("code",[e._v("0xa9059cbb")])])])])]),e._v(" "),n("p",[e._v("注意：以上仅仅是背后的原理展示，如果想要获取值，可以通过"),n("code",[e._v(".selector")]),e._v(" 返回 ABI 函数选择器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary L {\n    function f(uint256) external {}\n}\n\ncontract C {\n    function g() public pure returns (bytes4) {\n        return L.f.selector;\n    }\n}\n")])])]),n("p",[e._v("尽管可以对 public 或 external 的库函数进行外部调用，但此类调用会被视为 Solidity 的内部调用，与常规的 contract ABI 规则不同。外部库函数比外部合约函数支持更多的参数类型，例如递归结构和指向存储的指针。")]),e._v(" "),n("p",[e._v("因此，计算用于计算 4 字节选择器的函数签名遵循内部命名模式以及可对合约 ABI 中不支持的类型的参数使用内部编码。")]),e._v(" "),n("p",[e._v("以下标识符可以作为函数签名中的类型：")]),e._v(" "),n("ul",[n("li",[e._v("值类型, 非存储的（non-storage） "),n("code",[e._v("string")]),e._v(" 及非存储的 "),n("code",[e._v("bytes")]),e._v("\n使用和合约 ABI 中同样的标识符。")]),e._v(" "),n("li",[e._v("非存储的数组类型遵循合约 ABI 中同样的规则，例如 "),n("code",[e._v("<type>[]")]),e._v("\n为动态数组以及 "),n("code",[e._v("<type>[M]")]),e._v(" 为 "),n("code",[e._v("M")]),e._v(" 个元素的动态数组。")]),e._v(" "),n("li",[e._v("非存储的结构体使用完整的命名引用，例如 "),n("code",[e._v("C.S")]),e._v(" 用于\n"),n("code",[e._v("contract C { struct S { ... } }")]),e._v(".")]),e._v(" "),n("li",[e._v("存储的映射指针使用 "),n("code",[e._v("mapping(<keyType> => <valueType>) storage")]),e._v(" 当\n"),n("code",[e._v("<keyType>")]),e._v(" 和 "),n("code",[e._v("<valueType>")]),e._v(" 是映射的键和值类型。")]),e._v(" "),n("li",[e._v("其他的存储的指针类型使用其对应的非存储类型的类型标识符，但在其后面附加一个空格及\n"),n("code",[e._v("storage")]),e._v(" 。")])]),e._v(" "),n("h2",{attrs:{id:"_8️⃣-函数的重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8️⃣-函数的重载"}},[e._v("#")]),e._v(" 8️⃣ 函数的重载")]),e._v(" "),n("p",[e._v("Solidity 的函数重载，是指同一个作用域内，相同函数名可以定义多个函数。")]),e._v(" "),n("p",[n("strong",[e._v("这些相同函数名的函数，参数(参数类型或参数数量)必须不一样。")]),e._v("，因为只有这样上一节介绍的函数签名中，才能签出来不同的函数选择器。")]),e._v(" "),n("p",[e._v("合约可以具有多个不同参数的同名函数，称为”重载”（overloading），这也适用于继承函数。")]),e._v(" "),n("p",[e._v("下面是两种 sum 方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function sum(uint256 a, uint256 b) public pure returns (uint256) {\n        return a + b;\n    }\n\n    function sum(uint256[] memory _arr) public pure returns (uint256 temp) {\n        for (uint256 index = 0; index < _arr.length; index++) {\n            temp += _arr[index];\n        }\n    }\n\n    function callSum1() public pure returns (uint256) {\n        return sum(1, 2);\n    }\n\n    function callSum2() public pure returns (uint256) {\n        // 下面 nums1 这种动态创建数组的方法是不对的，会报错\n        // uint256[] memory nums1 = [1, 2, 3];\n        uint256[] memory nums = new uint256[](5);\n        nums[0] = 1;\n        nums[1] = 2;\n        nums[2] = 3;\n        nums[3] = 4;\n        nums[4] = 5;\n        return sum(nums);\n    }\n}\n")])])]),n("p",[e._v("重载函数也存在于外部接口中。如果两个外部可见函数仅区别于 Solidity\n内的类型，而不是它们的外部类型则会导致错误。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Function overload clash during conversion to external types for arguments.Ï\ncontract A {\n    function f(B value) public pure returns (B out) {\n        out = value;\n    }\n\n    function f(address value) public pure returns (address out) {\n        out = value;\n    }\n}\n\ncontract B {}\n")])])]),n("p",[e._v("以上两个 "),n("code",[e._v("f")]),e._v(" 函数重载都接受了 ABI 的地址类型，虽然它们在 Solidity\n中被认为是不同的。")]),e._v(" "),n("h4",{attrs:{id:"选择重载函数-参数匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择重载函数-参数匹配"}},[e._v("#")]),e._v(" 选择重载函数 & 参数匹配")]),e._v(" "),n("p",[e._v("选择重载函数：通过将当前范围内的函数声明与函数调用中提供的参数相匹配，这样就可以选择重载函数。")]),e._v(" "),n("p",[e._v("如果所有参数都可以隐式地转换为预期类型，则该函数作为重载候选项。如果一个匹配的都没有，解析失败。")]),e._v(" "),n("p",[e._v("⚠️：返回参数不作为重载解析的依据。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract A {\n    function f(uint8 val) public pure returns (uint8 out) {\n        out = val;\n    }\n\n    function f(uint256 val) public pure returns (uint256 out) {\n        out = val;\n    }\n}\n\ncontract B {\n    A a;\n\n    // Member "f" not unique after argument-dependent lookup in contract A.\n    // function test1() public view returns (uint256) {\n    //     uint256 tar = a.f(8);\n    //     return tar;\n    // }\n\n    function test2() public view returns (uint256) {\n        uint256 tar = a.f(256);\n        return tar;\n    }\n}\n')])])]),n("p",[e._v("在 Remix 里,部署 A 合约，会将两个方法都渲染出来，调用 "),n("code",[e._v("f(50)")]),e._v("/"),n("code",[e._v("f(256)")]),e._v(" 都可以。")]),e._v(" "),n("p",[e._v("但是实际调用里，在其他合约内调用 "),n("code",[e._v("f(50)")]),e._v(" 会导致类型错误，因为 "),n("code",[e._v("50")]),e._v(" 既可以被隐式转换为 "),n("code",[e._v("uint8")]),e._v("也可以被隐式转换为 "),n("code",[e._v("uint256")]),e._v("。 另一方面，调用 "),n("code",[e._v("f(256)")]),e._v(" 则会解析为"),n("code",[e._v("f(uint256)")]),e._v(" 重载，因为 "),n("code",[e._v("256")]),e._v(" 不能隐式转换为 "),n("code",[e._v("uint8")]),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"_9️⃣-modifier-函数修改器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9️⃣-modifier-函数修改器"}},[e._v("#")]),e._v(" 9️⃣ modifier:函数修改器")]),e._v(" "),n("p",[e._v("Solidity 中关键字 "),n("code",[e._v("modifier")]),e._v(" 用于声明一个函数修改器。")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("意义")]),e._v(":我们可以将一些通用的操作提取出来，包装为函数修改器，来提高代码的复用性，改善编码效率。是函数高内聚，低耦合的延伸。")]),e._v(" "),n("li",[n("strong",[e._v("作用")]),e._v(": "),n("code",[e._v("modifier")]),e._v(" 常用于在函数执行前检查某种前置条件。\n"),n("ul",[n("li",[e._v("比如地址对不对，余额是否充足，参数值是否允许等")]),e._v(" "),n("li",[e._v("修改器内可以写逻辑")])])]),e._v(" "),n("li",[n("strong",[e._v("特点")]),e._v(": "),n("code",[e._v("modifier")]),e._v(" 是一种合约属性，可被继承，同时还可被派生的合约重写(override)。（修改器 modifier 是合约的可继承属性，并可能被派生合约覆盖 , 但前提是它们被标记为 virtual）。\n"),n("ul",[n("li",[n("code",[e._v("_")]),e._v(" 符号可以在修改器中出现多次，每处都会替换为函数体。")])])])]),e._v(" "),n("h3",{attrs:{id:"正常的判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正常的判断"}},[e._v("#")]),e._v(" 正常的判断")]),e._v(" "),n("p",[e._v("下面是正常的前置判断，非常的啰嗦。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorModifier{\n     address public owner;\n    uint public count = 0;\n     constructor(){\n         owner = msg.sender;\n     }\n     function add() external{\n         require(msg.sender==owner,"must owner address");\n         count++;\n     }\n     function minus() external{\n         require(msg.sender==owner,"must owner address");\n         count--;\n     }\n}\n')])])]),n("h3",{attrs:{id:"函数修改器-普通"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数修改器-普通"}},[e._v("#")]),e._v(" 函数修改器:普通")]),e._v(" "),n("p",[e._v("将通用的判断抽出为函数修改器。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorModifier{\n     address public owner;\n     uint public count = 0;\n\n     constructor(){\n         owner = msg.sender;\n     }\n\n    // 下面就是函数修改器\n     modifier onlyOwner(){\n         require(msg.sender==owner,"must owner address");\n         _;\n     }\n     function add() external onlyOwner{\n         count++;\n     }\n     function minus() external onlyOwner{\n         count--;\n     }\n\n}\n')])])]),n("h3",{attrs:{id:"函数修改器-带参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数修改器-带参数"}},[e._v("#")]),e._v(" 函数修改器:带参数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ErrorModifier{\n     address public owner;\n    uint public count = 0;\n     constructor(){\n         owner = msg.sender;\n     }\n\n    // 下面就是函数修改器\n     modifier onlyOwner(){\n         require(msg.sender==owner,"must owner address");\n         _;\n     }\n\n     modifier greaterThan(uint _x){\n         require(_x > 10,"must be greater than 10");\n         _;\n     }\n\n     function fnA(uint _x) external onlyOwner greaterThan( _x){\n         count=_x;\n     }\n\n}\n')])])]),n("h3",{attrs:{id:"函数修改器-修改器内写逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数修改器-修改器内写逻辑"}},[e._v("#")]),e._v(" 函数修改器:修改器内写逻辑")]),e._v(" "),n("p",[e._v("下面是一个防重载的函数修改器，这种使用方法，在低版本的 solidity 中可以防止重入攻击。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    bool internal locked;\n\n    modifier noReentrant() {\n        require(!locked, "no reentrant");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function test() public noReentrant returns (bool) {\n        return locked;\n    }\n}\n')])])]),n("p",[n("strong",[e._v("扩展:"),n("code",[e._v("TODO:")])])]),e._v(" "),n("ul",[n("li",[e._v("重入攻击的更多介绍,参照文章 "),n("RouterLink",{attrs:{to:"/forever/901.safe.html#id2"}},[e._v("重入攻击")]),e._v(" 详细阅读。")],1),e._v(" "),n("li",[e._v("更多合约安全,参照文章 "),n("RouterLink",{attrs:{to:"/forever/901.safe.html#"}},[e._v("合约安全")]),e._v(" 详细阅读。")],1)]),e._v(" "),n("h3",{attrs:{id:"一个-ownable-的-demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个-ownable-的-demo"}},[e._v("#")]),e._v(" 一个 ownable 的 DEMO")]),e._v(" "),n("p",[e._v("这个例子使用了 "),n("strong",[e._v("构造函数")]),e._v(" 和 "),n("strong",[e._v("函数修改器")]),e._v("。这是函数修改器的经典应用，是 OpenZeppelin 库中的 Ownable 合约核心逻辑：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Ownable {\n    address public owner;\n\n    // 发布事件 - 此合约owner已经换人（此逻辑与modifier无关，可以忽略）\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, "must owner");\n        _;\n    }\n    modifier notZeroAddress(address _newOwner) {\n        require(_newOwner != address(0), "invalid address");\n        _;\n    }\n\n    function transferOwnership(address _newOwner)\n        external\n        onlyOwner\n        notZeroAddress(_newOwner)\n    {\n        emit OwnershipTransferred(msg.sender, _newOwner);\n        owner = _newOwner;\n    }\n\n    function getByOwner() external view onlyOwner returns (address) {\n        return owner;\n    }\n\n    function getByany() external view returns (address) {\n        return owner;\n    }\n}\n')])])]),n("p",[n("strong",[e._v("扩展")]),e._v(":详细内容，请查看 "),n("a",{attrs:{href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenZeppelin 库中的 Ownable 源码"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"函数-修改器-的复杂例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数-修改器-的复杂例子"}},[e._v("#")]),e._v(" 函数 修改器 的复杂例子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract owned {\n    address owner;\n\n    constructor() { owner = payable(msg.sender); }\n\n    // 这个合约只定义一个修改器，但并未使用： 它将会在派生合约中用到。\n    // 修改器所修饰的函数体会被插入到特殊符号 _; 的位置。\n    // 这意味着如果是 owner 调用这个函数，则函数会被执行，否则会抛出异常。\n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            "Only owner can call this function."\n        );\n        _;\n    }\n}\n\ncontract destructible is owned {\n    // 这个合约从 `owned` 继承了 `onlyOwner` 修饰符，并将其应用于 `destroy` 函数，\n    // 只有在合约里保存的 owner 调用 `destroy` 函数，才会生效。\n    function destroy() public onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\ncontract priced {\n    // 修改器可以接收参数：\n    modifier costs(uint price) {\n        if (msg.value >= price) {\n            _;\n        }\n    }\n}\n\ncontract Register is priced, destructible {\n    mapping (address => bool) registeredAddresses;\n    uint price;\n\n    constructor(uint initialPrice) { price = initialPrice; }\n\n    // 在这里也使用关键字 `payable` 非常重要，否则函数会自动拒绝所有发送给它的以太币。\n    function register() public payable costs(price) {\n        registeredAddresses[msg.sender] = true;\n    }\n\n    function changePrice(uint price_) public onlyOwner {\n        price = price_;\n    }\n}\n\ncontract Mutex {\n    bool locked;\n    modifier noReentrancy() {\n        require(\n            !locked,\n            "Reentrant call."\n        );\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // 这个函数受互斥量保护，这意味着 `msg.sender.call` 中的重入调用不能再次调用  `f`。\n    // `return 7` 语句指定返回值为 7，但修改器中的语句 `locked = false` 仍会执行。\n    function f() public noReentrancy returns (uint) {\n        (bool success,) = msg.sender.call("");\n        require(success);\n        return 7;\n    }\n}\n')])])]),n("p",[e._v("如果你想访问定义在合约 C 的 修改器 modifier m ， 可以使用 C.m 去引用它，而不需要使用虚拟表查找。")]),e._v(" "),n("p",[e._v("只能使用在当前合约或在基类合约中定义的 修改器 modifier , 修改器 modifier 也可以定义在库里面，但是他们被限定在库函数使用。")]),e._v(" "),n("p",[e._v("如果同一个函数有多个 修改器 modifier，它们之间以空格隔开，修改器 modifier 会依次检查执行。")]),e._v(" "),n("p",[e._v("修改器不能隐式地访问或改变它们所修饰的函数的参数和返回值。 这些值只能在调用时明确地以参数传递。")]),e._v(" "),n("p",[e._v("修改器 modifier 或函数体中显式的 return 语句仅仅跳出当前的 修改器 modifier 和函数体。 返回变量会被赋值，但整个执行逻辑会从前一个 修改器 modifier 中的定义的 "),n("code",[e._v("_")]),e._v(" 之后继续执行。")]),e._v(" "),n("p",[e._v("警告:在早期的 Solidity 版本中，有 修改器 modifier 的函数， return 语句的行为表现不同。用 "),n("code",[e._v("return")]),e._v("; 从修改器中显式返回并不影响函数返回值。 然而，修改器可以选择完全不执行函数体，在这种情况下，返回的变量被设置为默认值，就像该函数是空函数体一样。")]),e._v(" "),n("p",[n("code",[e._v("_")]),e._v(" 符号可以在修改器中出现多次，每处都会替换为函数体。")]),e._v(" "),n("p",[e._v("修改器 modifier 的参数可以是任意表达式，在此上下文中，所有在函数中可见的符号，在 修改器 modifier 中均可见。 在 修改器 modifier 中引入的符号在函数中不可见（可能被重载改变）。")]),e._v(" "),n("h2",{attrs:{id:"🔟-全局-数学和密码学函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#🔟-全局-数学和密码学函数"}},[e._v("#")]),e._v(" 🔟 全局：数学和密码学函数")]),e._v(" "),n("p",[e._v("在全局命名空间中已经预设了一些特殊的变量和函数，他们主要用来提供关于区块链的信息或一些通用的工具函数。后续会详细介绍，这里简单的介绍几个全局函数")]),e._v(" "),n("h3",{attrs:{id:"_1-数学和密码学函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-数学和密码学函数"}},[e._v("#")]),e._v(" 1.数学和密码学函数")]),e._v(" "),n("p",[e._v("Solidity 也提供了内置的数学和密码学函数：")]),e._v(" "),n("p",[e._v("数学函数：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("addmod(uint x, uint y, uint k) returns (uint)")]),e._v(" "),n("ul",[n("li",[e._v("计算 "),n("code",[e._v("(x + y) % k")]),e._v("，加法会在任意精度下执行，并且加法的结果即使超过 "),n("code",[e._v("2**256")]),e._v(" 也不会被截取。从 0.5.0 版本的编译器开始会加入对 "),n("code",[e._v("k != 0")]),e._v(" 的校验（assert）。")])])]),e._v(" "),n("li",[n("code",[e._v("mulmod(uint x, uint y, uint k) returns (uint)")]),e._v(" "),n("ul",[n("li",[e._v("计算 "),n("code",[e._v("(x * y) % k")]),e._v("，乘法会在任意精度下执行，并且乘法的结果即使超过 "),n("code",[e._v("2**256")]),e._v(" 也不会被截取。从 0.5.0 版本的编译器开始会加入对 "),n("code",[e._v("k != 0")]),e._v(" 的校验（assert）。")])])])]),e._v(" "),n("p",[e._v("密码学函数：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("keccak256((bytes memory) returns (bytes32)")]),e._v(" "),n("ul",[n("li",[e._v("计算 Keccak-256 哈希，之前 keccak256 的别名函数 "),n("strong",[e._v("sha3")]),e._v(" 在 "),n("strong",[e._v("0.5.0")]),e._v(" 中已经移除。。")])])]),e._v(" "),n("li",[n("code",[e._v("sha256(bytes memory) returns (bytes32)")]),e._v(" "),n("ul",[n("li",[e._v("计算参数的 SHA-256 哈希。")])])]),e._v(" "),n("li",[n("code",[e._v("ripemd160(bytes memory) returns (bytes20)")]),e._v(" "),n("ul",[n("li",[e._v("计算参数的 RIPEMD-160 哈希。")])])]),e._v(" "),n("li",[n("code",[e._v("ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)")]),e._v(" "),n("ul",[n("li",[e._v("利用椭圆曲线签名恢复与公钥相关的地址，错误返回零值。")]),e._v(" "),n("li",[e._v("函数参数对应于 ECDSA 签名的值:\n"),n("ul",[n("li",[e._v("r = 签名的前 32 字节")]),e._v(" "),n("li",[e._v("s = 签名的第 2 个 32 字节")]),e._v(" "),n("li",[e._v("v = 签名的最后一个字节")])])]),e._v(" "),n("li",[e._v("ecrecover 返回一个 address, 而不是 address payable。")]),e._v(" "),n("li",[n("code",[e._v("ecrecover")]),e._v(" 的"),n("a",{attrs:{href:"https://ethereum.stackexchange.com/questions/1777/workflow-on-signing-a-string-with-private-key-followed-by-signature-verificatio",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用案例"),n("OutboundLink")],1)])])])]),e._v(" "),n("h3",{attrs:{id:"_2-数学函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-数学函数"}},[e._v("#")]),e._v(" 2.数学函数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function callAddMod() public pure returns (uint256) {\n        return addmod(4, 5, 3); // 可以直接使用 addmod\n    }\n\n    function callMulMod() public pure returns (uint256) {\n        return mulmod(4, 5, 3); // 可以直接使用 mulmod\n    }\n}\n")])])]),n("h3",{attrs:{id:"_3-密码学函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-密码学函数"}},[e._v("#")]),e._v(" 3.密码学函数")]),e._v(" "),n("h4",{attrs:{id:"hash-的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hash-的特性"}},[e._v("#")]),e._v(" HASH 的特性")]),e._v(" "),n("ul",[n("li",[e._v("如果输入内容相同，则输出内容必定相同")]),e._v(" "),n("li",[e._v("输入内容的任何变动，都会导致输出结果完全大变样")]),e._v(" "),n("li",[e._v("无论输入内容长度如何，输出内容长度均一样")]),e._v(" "),n("li",[e._v("不可逆")]),e._v(" "),n("li",[e._v("很难被破解，据说现在存在被破解的可能，所以一般合约内采用两次加密的手段。")])]),e._v(" "),n("h4",{attrs:{id:"hash-的应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hash-的应用"}},[e._v("#")]),e._v(" HASH 的应用")]),e._v(" "),n("ul",[n("li",[e._v("主要用于：生成加密后的唯一值")])]),e._v(" "),n("h3",{attrs:{id:"密码学-keccak256-和-encodepacked-encode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#密码学-keccak256-和-encodepacked-encode"}},[e._v("#")]),e._v(" 密码学 keccak256 和 encodePacked/encode")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("keccak256((bytes memory) returns (bytes32)\n")])])]),n("p",[n("strong",[e._v("keccak256")]),e._v(": 返回结果是 bytes32")]),e._v(" "),n("p",[e._v("这些编码函数可以用来构造函数调用数据，而不用实际进行调用。此外，"),n("code",[e._v("keccak256(abi.encodePacked(a, b))")]),e._v(" 是一种计算结构化数据的哈希值（尽管我们也应该关注到：使用不同的函数参数类型也有可能会引起“哈希冲突” ）的方式，不推荐使用的 "),n("code",[e._v("keccak256(a, b)")]),e._v(" 。")]),e._v(" "),n("ul",[n("li",[e._v("Hash 算法在合约内使用 "),n("code",[e._v("keccak256")]),e._v(" 进行。\n"),n("ul",[n("li",[n("code",[e._v("keccak256")]),e._v(" 返回值是 "),n("code",[e._v("bytes32")]),e._v(" 定长数据")])])]),e._v(" "),n("li",[e._v("可以使用 "),n("code",[e._v("abi.encode")]),e._v(" 和 "),n("code",[e._v("abi.encodePacked")]),e._v(" 进行初步处理，然后传入 "),n("code",[e._v("keccak256")]),e._v(" "),n("ul",[n("li",[e._v("如果是多个参数，推荐使用 "),n("code",[e._v("encode")]),e._v("；"),n("code",[e._v("encodePacked")]),e._v(" 因为哈希碰撞，容易导致参数不同，结果相同")]),e._v(" "),n("li",[n("code",[e._v("encode")]),e._v(" 和 "),n("code",[e._v("encodePacked")]),e._v(" 的返回结果是 不定长的 "),n("code",[e._v("bytes")]),e._v("类型")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function keccak256Test() public pure returns (bytes32 result) {\n        // ABC 的 keccak256 结果是:\n        // 0xe1629b9dda060bb30c7908346f6af189c16773fa148d3366701fbaa35d54f3c8\n        // keccak256 也被称作 sha3\n        return keccak256("ABC");\n    }\n}\n')])])]),n("h4",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[e._v("#")]),e._v(" 例子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Keccake256 {\n    function test1(string calldata _test1, string calldata _test2)\n        external\n        pure\n        returns (bytes32, bytes32)\n    {\n        return (\n            keccak256(encode(_test1, _test2)),\n            keccak256(encodePacked(_test1, _test2))\n        );\n    }\n\n    function encodePacked(string calldata _test1, string calldata _test2)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_test1, _test2);\n    }\n\n    function encode(string calldata _test1, string calldata _test2)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return abi.encode(_test1, _test2);\n    }\n}\n")])])]),n("h4",{attrs:{id:"测试记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试记录"}},[e._v("#")]),e._v(" 测试记录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n输入如下参数和返回结果\n1.AA,BB\n    0:bytes32: 0x1edf4aae368e845d5d1cd28aec0624c467d538ecc7e5660765ed2afedca37aca\n    1:bytes32: 0xe5d11b08737f5dbf924278d835533b2b1e65c2fe1b5b119c5fdd21555547b9c4\n2.AAA,BB\n    0:bytes32: 0x1db58b9736b1b30323e7dee1a1d1a71e8462dbd5651f55c364c3e9b8a3b28f10\n    1:bytes32: 0x741a09d43c38b2b6fc14dbc624b34865a62b9e8e13eb7a2f21263d0a1a11ed92\n3.AA,ABB\n    0:bytes32: 0x40e845f25226ce557aee890fbb0084f9230ca5da5064f1922a15fd3941d7d423\n    1:bytes32: 0x741a09d43c38b2b6fc14dbc624b34865a62b9e8e13eb7a2f21263d0a1a11ed92\n\n[AAA,BB] 和 [AA,ABB] 通过 encodePacked 得到的结果相同\n*/\n")])])]),n("h4",{attrs:{id:"上面合约的改写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上面合约的改写"}},[e._v("#")]),e._v(" 上面合约的改写")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Keccake256 {\n    function test1(string calldata _test1, string calldata _test2)\n        external\n        pure\n        returns (bytes32, bytes32)\n    {\n        return (\n            keccak256(encode(_test1, _test2)),\n            keccak256(encodePacked(_test1, 123, _test2))\n        );\n    }\n\n    function encodePacked(\n        string calldata _test1,\n        uint256 _x,\n        string calldata _test2\n    ) public pure returns (bytes memory) {\n        return abi.encodePacked(_test1, _x, _test2);\n    }\n\n    function encode(string calldata _test1, string calldata _test2)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return abi.encode(_test1, _test2);\n    }\n}\n")])])]),n("h3",{attrs:{id:"密码学-sha256"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#密码学-sha256"}},[e._v("#")]),e._v(" 密码学: sha256")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sha256(bytes memory) returns (bytes32)\n")])])]),n("p",[n("strong",[e._v("sha256")]),e._v(": 返回结果是 bytes32")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function sha256Test() public pure returns (bytes32 result) {\n        // ABC 的 sha256 结果是:\n        // 0xb5d4045c3f466fa91fe2cc6abe79232a1a57cdf104f7a26e716e0a1e2789df78\n        return sha256("ABC");\n    }\n}\n')])])]),n("h3",{attrs:{id:"密码学-ripemd160"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#密码学-ripemd160"}},[e._v("#")]),e._v(" 密码学: ripemd160")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ripemd160(bytes memory) returns (bytes20)\n")])])]),n("p",[n("strong",[e._v("ripemd160")]),e._v(": 返回结果是 bytes20")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    function ripemd160Test() public pure returns (bytes20 result) {\n        // ABC 的 ripemd160 结果是:\n        // 0xdf62d400e51d3582d53c2d89cfeb6e10d32a3ca6\n        return ripemd160("ABC");\n    }\n}\n')])])]),n("h3",{attrs:{id:"密码学-ecrecover"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#密码学-ecrecover"}},[e._v("#")]),e._v(" 密码学: ecrecover")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)\n")])])]),n("p",[e._v("利用椭圆曲线签名恢复与公钥相关的地址，错误返回零值。")]),e._v(" "),n("p",[e._v("函数参数对应于 ECDSA 签名的值:")]),e._v(" "),n("ul",[n("li",[e._v("r = 签名的前 32 字节")]),e._v(" "),n("li",[e._v("s = 签名的第 2 个 32 字节")]),e._v(" "),n("li",[e._v("v = 签名的最后一个字节")])]),e._v(" "),n("p",[n("code",[e._v("ecrecover")]),e._v(" 返回一个 address, 而不是 "),n("code",[e._v("address payable")]),e._v(" 。他们之前的转换参考 "),n("code",[e._v("address payable")]),e._v(" ，如果需要转移资金到恢复的地址。"),n("a",{attrs:{href:"https://ethereum.stackexchange.com/questions/1777/workflow-on-signing-a-string-with-private-key-followed-by-signature-verificatio",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考案例"),n("OutboundLink")],1)]),e._v(" "),n("h4",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("p",[e._v("如果你使用 "),n("code",[e._v("ecrecover")]),e._v(" ，需要了解，在不需要知道相应的私钥下，签名也可以转换为另一个有效签名（可能是另外一个数据的签名）。在 Homestead 硬分叉，这个问题对于 "),n("em",[e._v("transaction")]),e._v(" 签名已经解决了(查阅 EIP-2)。 不过 "),n("code",[e._v("ecrecover")]),e._v(" 没有更改。")]),e._v(" "),n("p",[e._v("除非需要签名是唯一的，否则这通常不是问题，或者是用它们来识别物品。 OpenZeppelin 有一个 "),n("a",{attrs:{href:"https://docs.openzeppelin.com/contracts/2.x/api/cryptography#ECDSA",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECDSA"),n("OutboundLink")],1),e._v(" 助手库 ，可以将其用作 "),n("code",[e._v("ecrecover")]),e._v(" 的”包装“，而不会出现此问题。")]),e._v(" "),n("p",[e._v("在一个私链上，你很有可能碰到由于 sha256、ripemd160 或者 ecrecover 引起的 "),n("strong",[e._v("Out-of-Gas")]),e._v("。这个原因就是他们被当做所谓的预编译合约而执行，并且在第一次收到消息后这些合约才真正存在（尽管合约代码是硬代码）。发送到不存在的合约的消息非常昂贵，所以实际的执行会导致 Out-of-Gas 错误。在你的合约中实际使用它们之前，给每个合约发送一点儿以太币，比如 1 Wei。这在官方网络或测试网络上不是问题。")]),e._v(" "),n("p",[n("strong",[e._v("ecrecover")]),e._v(":")]),e._v(" "),n("p",[e._v("这个比较复杂，请在下面的 "),n("strong",[e._v("通过智能合约验证签名")]),e._v(" 例子详细查看；")]),e._v(" "),n("h3",{attrs:{id:"案例-1-通过智能合约验证签名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例-1-通过智能合约验证签名"}},[e._v("#")]),e._v(" 案例 1:通过智能合约验证签名")]),e._v(" "),n("h4",{attrs:{id:"本案例的关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本案例的关键字"}},[e._v("#")]),e._v(" 本案例的关键字")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("keccak256")])]),e._v(" "),n("li",[n("code",[e._v("abi.encodePacked")])]),e._v(" "),n("li",[n("code",[e._v("ecrecover()")])]),e._v(" "),n("li",[n("code",[e._v("assembly")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("mload")])]),e._v(" "),n("li",[n("code",[e._v("add")])])])])]),e._v(" "),n("h4",{attrs:{id:"案例解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例解析"}},[e._v("#")]),e._v(" 案例解析")]),e._v(" "),n("p",[e._v("做一个 DEMO：链上对任意消息进行加密，加密消息在链下使用私钥再次加密，然后对再次加密的信息进行校验。")]),e._v(" "),n("ol",[n("li",[e._v("获取消息的 Hash 值\n"),n("ul",[n("li",[n("code",[e._v("hash = msgHash(_message);")])])])]),e._v(" "),n("li",[e._v("在【链下】将 hash 使用 MetaMask 进行私钥签名;\n"),n("ul",[n("li",[n("code",[e._v("_signature = metaMaskSignHash(hash,addressPrivateKey)")])]),e._v(" "),n("li",[e._v("这里相当于在 Metamask 对 hash 做第二次的 "),n("strong",[e._v("keccak256 Hash")]),e._v(" 转换，转换时添加了"),n("code",[e._v('"\\x19Ethereum Signed Message:\\n32"')])])])]),e._v(" "),n("li",[e._v("使用 "),n("code",[e._v("ecrecover")]),e._v(" 方法恢复签名地址\n"),n("ul",[n("li",[n("code",[e._v("ecrecoverAddress = recoverAds(hash,_signature)")])]),e._v(" "),n("li",[e._v("这里可以恢复 MetaMask 签名时候使用的地址")])])]),e._v(" "),n("li",[e._v('校验签名结果是否正确\necrecoverAddress == addressPublicKey ? "验证成功" : "验证失败";')])]),e._v(" "),n("h4",{attrs:{id:"代码如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码如下"}},[e._v("#")]),e._v(" 代码如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract VerifySig {\n    /**\n    功能:校验签名结果是否正确\n    注意 _signature 是 bytes 类型的\n     */\n    function verify(\n        address addressPublicKey,\n        string calldata _message,\n        bytes calldata _signature\n    ) external pure returns (bool) {\n        bytes32 hash = msgHash(_message);\n        // bytes32 _signature = metaMaskSignHash(hash,addressPrivateKey); // 这是在链下操作\n        address ecrecoverAddress = recoverAds(hash, _signature);\n        return ecrecoverAddress == addressPublicKey;\n    }\n\n    function msgHash(string calldata _message)\n        public\n        pure\n        returns (bytes32 keccakFirst)\n    {\n        keccakFirst = keccak256(abi.encodePacked(_message));\n    }\n\n    function msgHash2(bytes32 _msgHash)\n        internal\n        pure\n        returns (bytes32 keccakSecond)\n    {\n        // 两次2次签名，据说是数学层面上1次签名有被破解的可能。[我没有亲自验证过]\n        keccakSecond = keccak256(\n            abi.encodePacked("\\x19Ethereum Signed Message:\\n32", _msgHash)\n        );\n    }\n\n    function recoverAds(bytes32 _msgHash, bytes calldata _signature)\n        public\n        pure\n        returns (address)\n    {\n        // metamsk 签名会在原有消息上添加  "\\x19Ethereum Signed Message:\\n32"，所以需要处理一下\n        bytes32 metamaskInputHash = msgHash2(_msgHash);\n        // r为点的x坐标，s为点的y坐标，v是坐标的奇偶检验标识符\n        // v是用于说明那个点才是真正符合结果的点\n        // https://www.cnblogs.com/wanghui-garcia/p/9662140.html\n        // https://www.jianshu.com/p/090f605f1842/\n        (bytes32 r, bytes32 s, uint8 v) = _split(_signature);\n\n        address ecrecoverAddress = ecrecover(metamaskInputHash, v, r, s);\n        return ecrecoverAddress;\n    }\n\n    function _split(bytes memory _signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        // 需要内联汇编进行分割，合约没有别的方法\n        require(_signature.length == 65, "invalid signature length");\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            // v := mload(add(_signature, 96))\n            // 因为 v 不是 bytes32，是 uint8数字，uint8数字只占1位，所以使用 byte(0)转换\n            v := byte(0, mload(add(_signature, 96)))\n        }\n    }\n}\n')])])]),n("h4",{attrs:{id:"链下签名和-remix-验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链下签名和-remix-验证"}},[e._v("#")]),e._v(" 链下签名和 Remix 验证")]),e._v(" "),n("p",[e._v("使用浏览器控制台进行签名，需要安装 MateMask")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 1.打开 ethereum\nethereum.enable()\n\n// 2.赋值地址。这里的地址是 MateMask 的默认地址\nconst address = "0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac";\n\n// 3.赋值Hash。 使用 msgHash1 方法，输入 "ABC" 获取到的结果\nconst hash = "0xe1629b9dda060bb30c7908346f6af189c16773fa148d3366701fbaa35d54f3c8"\n\n// 4. 呼起 MataMask 签名\nethereum.request({method:"personal_sign",params:[address,hash]});\n\n// 5. 打开返回的 Promise {<pending>}，拷贝 PromiseResult 值\n0x66029be70a055a4abc293072c76550ffaecb2adb9fc3be2366d78bc498e008d06b6ddbfef97392a27a58737c33b059e09bb069261bdc41f9f0d8d1bc6e0b7ae31c\n\n// 6. 在 recoverAds 中验证恢复的地址是否为签名地址。\n上面的 PromiseResult 值是 _signature\n上面的 hash 值是 _msgHash\n\n// 7. 在 verify 中再次校验\n\n')])])]),n("p",[e._v("扩展阅读: 在线进行签名的网站: https://metamask.github.io/test-dapp/")]),e._v(" "),n("h2",{attrs:{id:"_1️⃣-全局-abi-编码及解码函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-全局-abi-编码及解码函数"}},[e._v("#")]),e._v(" 1️⃣ 全局：ABI 编码及解码函数")]),e._v(" "),n("p",[e._v("ABI 全名 Application Binary Interface。ABI 用于底层调用的辅助使用；在合约调用合约的时候使用，可以不知道对方的合约源码，只需要知道链上逻辑即可。")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("ABI 编码")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("abi.encode(...) returns (bytes)")]),e._v("： :ref:"),n("code",[e._v("ABI <ABI>")]),e._v(" - 对给定参数进行编码")]),e._v(" "),n("li",[n("code",[e._v("abi.encodePacked(...) returns (bytes)")]),e._v("：对给定参数执行 :ref:"),n("code",[e._v("紧打包编码 <abi_packed_mode>")]),e._v(" ，注意，可以不明确打包编码。")]),e._v(" "),n("li",[n("code",[e._v("abi.encodeWithSelector(bytes4 selector, ...) returns (bytes)")]),e._v("： :ref:"),n("code",[e._v("ABI <ABI>")]),e._v(" - 对给定第二个开始的参数进行编码，并以给定的函数选择器作为起始的 4 字节数据一起返回")]),e._v(" "),n("li",[n("code",[e._v("abi.encodeWithSignature(string signature, ...) returns (bytes)")]),e._v("：等价于 "),n("code",[e._v("abi.encodeWithSelector(bytes4(keccak256(signature), ...)")])]),e._v(" "),n("li",[n("code",[e._v("abi.encodeCall(function functionPointer, (...)) returns (bytes memory)")]),e._v(": 使用 tuple 类型参数 ABI 编码调用 "),n("code",[e._v("functionPointer")]),e._v(" 。执行完整的类型检查, 确保类型匹配函数签名。结果和 "),n("code",[e._v("abi.encodeWithSelector(functionPointer.selector, (...))")]),e._v(" 一致。")])])]),e._v(" "),n("li",[n("p",[e._v("ABI 解码")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("abi.decode(bytes memory encodedData, (...)) returns (...)")]),e._v(": 对给定的数据进行 ABI 解码，而数据的类型在括号中第二个参数给出 。 例如: "),n("code",[e._v("(uint a, uint[2] memory b, bytes memory c) = abi.decode(data, (uint, uint[2], bytes))")])])])])]),e._v(" "),n("h3",{attrs:{id:"encode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encode"}},[e._v("#")]),e._v(" encode")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("encode")]),e._v(" 会补零")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract AbiDecode {\n    function encode(string memory a, string memory b)\n        external\n        pure\n        returns (bytes memory)\n    {\n        return abi.encode(a, b);\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n/**\n输入如下参数和返回结果\n1.AA,BB\n    0x\n    0000000000000000000000000000000000000000000000000000000000000040\n    0000000000000000000000000000000000000000000000000000000000000080\n    0000000000000000000000000000000000000000000000000000000000000002\n    4141000000000000000000000000000000000000000000000000000000000000\n    0000000000000000000000000000000000000000000000000000000000000002\n    4242000000000000000000000000000000000000000000000000000000000000\n2.AAA,BB\n    0x\n    0000000000000000000000000000000000000000000000000000000000000040\n    0000000000000000000000000000000000000000000000000000000000000080\n    0000000000000000000000000000000000000000000000000000000000000003\n    4141410000000000000000000000000000000000000000000000000000000000\n    0000000000000000000000000000000000000000000000000000000000000002\n    4242000000000000000000000000000000000000000000000000000000000000\n3.AA,ABB\n    0x\n    0000000000000000000000000000000000000000000000000000000000000040\n    0000000000000000000000000000000000000000000000000000000000000080\n    0000000000000000000000000000000000000000000000000000000000000002\n    4141000000000000000000000000000000000000000000000000000000000000\n    0000000000000000000000000000000000000000000000000000000000000003\n    4142420000000000000000000000000000000000000000000000000000000000\n*/\n*/\n")])])]),n("h3",{attrs:{id:"encodepacked"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encodepacked"}},[e._v("#")]),e._v(" encodePacked")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("encodePacked")]),e._v(" 不会补零\n"),n("ul",[n("li",[e._v("不补零，容易导致碰撞错误。（两个参数拼在一起，导致参数不同，结果相同）")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract AbiDecode {\n    function encodePacked(string memory a, string memory b)\n        external\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(a, b);\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n输入如下参数和返回结果\n1.AA,BB\n    0x41414242\n2.AAA,BB\n    0x4141414242\n3.AA,ABB\n    0x4141414242\n[AAA,BB] 和 [AA,ABB] 得到的结果相同\n*/\n")])])]),n("h4",{attrs:{id:"解决-encodepacked-的哈希碰撞问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决-encodepacked-的哈希碰撞问题"}},[e._v("#")]),e._v(" 解决 "),n("code",[e._v("encodePacked")]),e._v(" 的哈希碰撞问题")]),e._v(" "),n("p",[e._v("可以在要编码的数据中间加一个固定的值，如果")]),e._v(" "),n("p",[n("strong",[e._v("代码如下:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract AbiDecode {\n    function encodePacked(string calldata _test1, string calldata _test2)\n        public\n        pure\n        returns (bytes memory)\n    {\n        uint256 x = 123;\n        return abi.encodePacked(_test1, x, _test2);\n    }\n}\n")])])]),n("p",[n("strong",[e._v("结果如下:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n输入如下参数和返回结果\n1.AA,BB\n    0x4141000000000000000000000000000000000000000000000000000000000000007b4242\n2.AAA,BB\n    0x414141000000000000000000000000000000000000000000000000000000000000007b4242\n3.AA,ABB\n    0x4141000000000000000000000000000000000000000000000000000000000000007b414242\n[AAA,BB] 和 [AA,ABB] 因为间隔了数据，所以得到的结果不相同\n*/\n")])])]),n("h4",{attrs:{id:"注意-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("p",[e._v("这些编码函数可以用来构造函数调用数据，而不用实际进行调用。此外，"),n("code",[e._v("keccak256(abi.encodePacked(a, b))")]),e._v(" 是一种计算结构化数据的哈希值（尽管我们也应该关注到：使用不同的函数参数类型也有可能会引起“哈希冲突” ）的方式，不推荐使用的 "),n("code",[e._v("keccak256(a, b)")]),e._v(" 。")]),e._v(" "),n("h3",{attrs:{id:"decode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decode"}},[e._v("#")]),e._v(" decode")]),e._v(" "),n("h4",{attrs:{id:"例子-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-1"}},[e._v("#")]),e._v(" 例子 1")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract AbiDecode {\n    struct MyStruct {\n        string name;\n        uint256[2] nums;\n    }\n\n    function encode(\n        uint256 x,\n        address addr,\n        uint256[] calldata arr,\n        MyStruct calldata myStruct\n    ) external pure returns (bytes memory) {\n        return abi.encode(x, addr, arr, myStruct);\n    }\n\n    function decode(bytes calldata data)\n        external\n        pure\n        returns (\n            uint256 x,\n            address addr,\n            uint256[] memory arr,\n            MyStruct memory myStruct\n        )\n    {\n        (x, addr, arr, myStruct) = abi.decode(\n            data,\n            (uint256, address, uint256[], MyStruct)\n        );\n    }\n}\n")])])]),n("p",[n("strong",[e._v("合约测试")])]),e._v(" "),n("ul",[n("li",[e._v("部署")]),e._v(" "),n("li",[n("code",[e._v("encode")]),e._v(" "),n("ul",[n("li",[e._v("参数如下:")]),e._v(" "),n("li",[n("code",[e._v("1")])]),e._v(" "),n("li",[n("code",[e._v("0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac")])]),e._v(" "),n("li",[n("code",[e._v("[1,2,3]")])]),e._v(" "),n("li",[n("code",[e._v('["Anbang",[2,3]]')])])])]),e._v(" "),n("li",[e._v("得到的结果，进行 "),n("code",[e._v("decode")])])]),e._v(" "),n("h3",{attrs:{id:"abi-encodewithselector"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abi-encodewithselector"}},[e._v("#")]),e._v(" abi.encodeWithSelector")]),e._v(" "),n("p",[e._v("这是获取函数签名使用的，第一个参数为函数选择，如下是第二章在介绍地址类型的时候，staticcall 静态调用 用法的参数，需要由 "),n("code",[e._v("abi.encodeWithSelector")]),e._v(" 计算出来。函数的参数按照顺序写在函数名之后即可。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 被调用的合约\ncontract Hello {\n    function echo() external pure returns (string memory) {\n        return "Hello World!";\n    }\n}\n\n// 调用者合约\ncontract SoldityTest {\n    function callHello(address _ads) external view returns (string memory) {\n        // 编码被调用者的方法签名\n        bytes4 methodId = bytes4(keccak256("echo()"));\n\n        // 调用合约\n        (bool success, bytes memory data) = _ads.staticcall(\n            abi.encodeWithSelector(methodId)\n        );\n        if (success) {\n            return abi.decode(data, (string));\n        } else {\n            return "error";\n        }\n    }\n}\n')])])]),n("h3",{attrs:{id:"abi-encodewithsignature"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abi-encodewithsignature"}},[e._v("#")]),e._v(" abi.encodeWithSignature")]),e._v(" "),n("p",[e._v("这是获取函数签名使用的，第一个参数为函数的名字和参数类型，如下是第二章在介绍 "),n("RouterLink",{attrs:{to:"/source/02.type-of-data.html#call"}},[e._v("地址类型的时候，call 用法的参数")]),e._v("，需要由 "),n("code",[e._v("abi.encodeWithSignature")]),e._v(" 计算出来。函数的参数按照顺序写在函数名之后即可。")],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function call_Test1_setNameAndAge(\n    address _ads,\n    string memory _name,\n    uint256 _age\n) external payable {\n    bytes memory data = abi.encodeWithSignature(\n        "setNameAndAge(string,uint256)",\n        _name,\n        _age\n    );\n    (bool success, bytes memory _bys) = _ads.call{value: msg.value}(data);\n    require(success, "Call Failed");\n    bys = _bys;\n}\n')])])]),n("h3",{attrs:{id:"abi-encodecall"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abi-encodecall"}},[e._v("#")]),e._v(" abi.encodeCall")]),e._v(" "),n("h2",{attrs:{id:"_2️⃣-补充-函数赋值给变量-函数作为参数-函数中返回函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-补充-函数赋值给变量-函数作为参数-函数中返回函数"}},[e._v("#")]),e._v(" 2️⃣ 补充:函数赋值给变量 & 函数作为参数 & 函数中返回函数")]),e._v(" "),n("p",[e._v("可以将一个函数赋值给另一个函数类型的变量，也可以将一个函数作为参数进行传递，还能在函数调用中返回函数类型变量。")]),e._v(" "),n("ul",[n("li",[e._v("可以将一个函数赋值给一个变量，一个函数类型的变量。")]),e._v(" "),n("li",[e._v("还可以将一个函数作为参数进行传递。")]),e._v(" "),n("li",[e._v("也可以在函数调用中返回一个函数。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract FnTest1 {\n    function internalFunc() internal pure returns (uint256) {\n        return 1;\n    }\n\n    function externalFunc() external pure returns (uint256) {\n        return 2;\n    }\n\n    function callFunc() public view returns (uint256, uint256) {\n        //直接使用内部的方式调用\n        uint256 a = internalFunc();\n\n        //不能在内部调用一个外部函数，会报编译错误。\n        // externalFunc();\n        //使用`this`以`external`的方式调用一个外部函数\n        uint256 b = this.externalFunc();\n\n        //不能通过`external`的方式调用一个`internal`\n        //this.internalFunc();\n\n        return (a, b);\n    }\n}\n\ncontract FnTest2 {\n    function externalCall(FnTest1 ft) public pure returns (uint256) {\n        //调用另一个合约的外部函数\n        uint256 a = ft.externalFunc();\n\n        //不能调用另一个合约的内部函数\n        //ft.internalFunc();\n\n        return a;\n    }\n}\n")])])]),n("h3",{attrs:{id:"具名调用和匿名函数参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具名调用和匿名函数参数"}},[e._v("#")]),e._v(" 具名调用和匿名函数参数")]),e._v(" "),n("p",[e._v("函数调用参数也可以按照任意顺序由名称给出，如果它们被包含在 "),n("code",[e._v("{ }")]),e._v(" 中， 如以下示例中所示。参数列表必须按名称与函数声明中的参数列表相符，但可以按任意顺序排列。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pragma solidity >=0.4.0 <0.9.0;\n\ncontract C {\n    mapping(uint => uint) data;\n\n    function f() public {\n        set({value: 2, key: 3});\n    }\n\n    function set(uint key, uint value) public {\n        data[key] = value;\n    }\n\n}\n")])])]),n("h3",{attrs:{id:"省略函数参数名称"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#省略函数参数名称"}},[e._v("#")]),e._v(" 省略函数参数名称")]),e._v(" "),n("p",[e._v("未使用参数的名称（特别是返回参数）可以省略。这些参数仍然存在于堆栈中，但它们无法访问。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pragma solidity >=0.4.22 <0.9.0;\n\ncontract C {\n    // 省略参数名称\n    function func(uint k, uint) public pure returns(uint) {\n        return k;\n    }\n}\n")])])]),n("h3",{attrs:{id:"调用异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用异常"}},[e._v("#")]),e._v(" 调用异常")]),e._v(" "),n("p",[e._v("如果当函数类型的"),n("strong",[e._v("变量")]),e._v("还没有初始化时就调用它的话会引发一个 "),n("code",[e._v("Panic")]),e._v(" 异常。 如果在一个函数被 "),n("code",[e._v("delete")]),e._v(" 之后调用它也会发生相同的情况。")]),e._v(" "),n("h3",{attrs:{id:"外部函数类型在-solidity-的上下文环境以外的地方使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外部函数类型在-solidity-的上下文环境以外的地方使用"}},[e._v("#")]),e._v(" 外部函数类型在 Solidity 的上下文环境以外的地方使用")]),e._v(" "),n("p",[e._v("如果外部函数类型在 Solidity 的上下文环境以外的地方使用，它们会被视为 "),n("code",[e._v("function")]),e._v(" 类型。 该类型将函数地址紧跟其函数标识一起编码为一个 bytes24 类型。。")]),e._v(" "),n("h2",{attrs:{id:"🆗-实战应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战应用"}},[e._v("#")]),e._v(" 🆗 实战应用")]),e._v(" "),n("h3",{attrs:{id:"权限控制合约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#权限控制合约"}},[e._v("#")]),e._v(" 权限控制合约")]),e._v(" "),n("p",[e._v("权限控制的核心是: "),n("code",[e._v("mapping")])]),e._v(" "),n("ul",[n("li",[e._v("默认给部署者赋 "),n("code",[e._v("ADMIN")]),e._v(" 权限")]),e._v(" "),n("li",[e._v("ADMIN 和 USER 使用 bytes32，并且 private")]),e._v(" "),n("li",[e._v("只有 ADMIN 权限才可以添加和撤销权限")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract AccessControl {\n    // 状态变量\n    mapping(bytes32 => mapping(address => bool)) public roles;\n    // ADMIN 和 private 是私有变量，可以先改为 public;获取到值后，再改为 private\n    // 0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked("ADMIN"));\n    // 0x2db9fd3d099848027c2383d0a083396f6c41510d7acfd92adc99b6cffcf31e96\n    bytes32 private constant USER = keccak256(abi.encodePacked("USER"));\n\n    // 事件\n    event GrantRole(address indexed ads, bytes32 indexed role);\n    event RevokeRole(address indexed ads, bytes32 indexed role);\n\n    // 函数修改器\n    modifier onlyRole(bytes32 _role) {\n        require(roles[_role][msg.sender], "Not Authorized");\n        _;\n    }\n\n    // 构造函数\n    constructor() {\n        _grantRole(msg.sender, ADMIN);\n    }\n\n    // 函数\n    function _grantRole(address _ads, bytes32 _role) internal {\n        roles[_role][_ads] = true;\n        emit GrantRole(_ads, _role);\n    }\n\n    function grantRole(address _ads, bytes32 _role) external onlyRole(ADMIN) {\n        _grantRole(_ads, _role);\n    }\n\n    function revokeRole(address _ads, bytes32 _role) external onlyRole(ADMIN) {\n        roles[_role][_ads] = false;\n        emit RevokeRole(_ads, _role);\n    }\n}\n')])])]),n("h2",{attrs:{id:"️⃣-问答题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#️⃣-问答题"}},[e._v("#")]),e._v(" #️⃣ 问答题")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("如下合约中，test 返回什么?")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    //当给返回值赋值后，并且有个return，以最后的return为主\n    function test() public pure returns (uint256 mul) {\n        uint256 a = 10;\n        mul = 100;\n        return a;\n    }\n}\n")])])])]),e._v(" "),n("li",[n("p",[e._v("函数参数使用时候有哪些需要注意的？")]),e._v(" "),n("ul",[n("li",[e._v("引用类型需要"),n("code",[e._v("memory")]),e._v("/"),n("code",[e._v("calldata")])]),e._v(" "),n("li",[e._v("函数参数可以当作为本地变量，也可用在等号左边被赋值。")]),e._v(" "),n("li",[e._v("外部函数不支持多维数组，如果原文件加入 p"),n("code",[e._v("ragma abicoder v2;")]),e._v(" 可以启用 ABI v2 版编码功能，这此功能可用。")])])]),e._v(" "),n("li",[n("p",[e._v("创建一个 "),n("code",[e._v("Utils")]),e._v(" 合约，其中有 "),n("code",[e._v("sum")]),e._v(" 方法，传入任意数量的数组，都可以计算出求和结果。")])]),e._v(" "),n("li",[n("p",[e._v("函数既可以定义在合约内部，也可以定义在合约外部，两种方式的区别是什么？")]),e._v(" "),n("ul",[n("li",[e._v("合约之外的函数（也称为“自由函数”）始终具有隐式的 "),n("code",[e._v("internal")]),e._v(" 可见性。 它们的代码包含在所有调用它们合约中，类似于内部库函数。")]),e._v(" "),n("li",[e._v("在合约之外定义的函数仍然在合约的上下文内执行。他们仍然可以访问变量 "),n("code",[e._v("this")]),e._v(" ，也可以调用其他合约，将其发送以太币或销毁调用它们合约等其他事情。与在合约中定义的函数的主要区别为：自由函数不能直接访问存储变量和不在他们的作用域范围内函数。")])])]),e._v(" "),n("li",[n("p",[e._v("函数的构造函数有什么特点？")]),e._v(" "),n("ul",[n("li",[e._v("它仅能在智能合约部署的时候调用一次，创建之后就不能再次被调用。")]),e._v(" "),n("li",[e._v("构造函数是可选的，只允许有一个构造函数，这意味着不支持重载。（普通函数支持重载）")]),e._v(" "),n("li",[e._v("：在合约创建的过程中，它的代码还是空的，所以直到构造函数执行结束，我们都不应该在其中调用合约自己的函数。(可以直接写函数名调用，但是不推荐调用，不可以通过 this 来调用函数，因为此时真实的合约实例还没有被创建。)")])])]),e._v(" "),n("li",[n("p",[e._v("构造函数有哪些用途？")]),e._v(" "),n("ul",[n("li",[e._v("用来设置管理账号，Token 信息等可以自定义，并且以后永远不需要修改的数据。")]),e._v(" "),n("li",[e._v("可以用来做初识的权限设置，避免后续没办法 owner/admin 地址。")])])]),e._v(" "),n("li",[n("p",[e._v("合约内调用外部有哪些？")]),e._v(" "),n("ul",[n("li",[e._v("也可以使用表达式 "),n("code",[e._v("this.g(8)")]),e._v("; 和 "),n("code",[e._v("c.g(2)")]),e._v("; 进行调用，其中 c 是合约实例， g 合约内实现的函数，这两种方式调用函数，称为“外部调用”，它是通过消息调用来进行，而不是直接的代码跳转。请注意，不可以在构造函数中通过 "),n("code",[e._v("this")]),e._v(" 来调用函数，因为此时真实的合约实例还没有被创建。")])])]),e._v(" "),n("li",[n("p",[e._v("从一个合约到另一个合约的函数调用会创建交易么？")]),e._v(" "),n("ul",[n("li",[e._v("从一个合约到另一个合约的函数调用不会创建自己的交易, 它是作为整个交易的一部分的消息调用。")])])]),e._v(" "),n("li",[n("p",[e._v("调用函数并转帐如何实现")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("feed.info{value: 10, gas: 800}(2);")])]),e._v(" "),n("li",[e._v("注意 "),n("code",[e._v("feed.info{value: 10, gas: 800}")]),e._v(" 仅（局部地）设置了与函数调用一起发送的 Wei 值和 gas 的数量，只有最后的小括号才执行了真正的调用。 因此， "),n("code",[e._v("feed.info{value: 10, gas: 800}")]),e._v(" 是没有调用函数的， "),n("code",[e._v("value")]),e._v(" 和 "),n("code",[e._v("gas")]),e._v(" 设置是无效的。")])])]),e._v(" "),n("li",[n("p",[e._v("extcodesize 操作码会检查要调用的合约是否确实存在，有哪些特殊情况？")]),e._v(" "),n("ul",[n("li",[e._v("低级 call 调用，会绕过检查")]),e._v(" "),n("li",[e._v("预编译合约的时候，也会绕过检查。")])])]),e._v(" "),n("li",[n("p",[e._v("与其他和月交互时候有什么需要注意的？")]),e._v(" "),n("ul",[n("li",[e._v("任何与其他合约的交互都会产生潜在危险，尤其是在不能预先知道合约代码的情况下。")]),e._v(" "),n("li",[e._v("小心这个交互调用在返回之前再回调我们的合约，这意味着被调用合约可以通过它自己的函数改变调用合约的状态变量。 一个建议的函数写法是，例如，"),n("strong",[e._v("在合约中状态变量进行各种变化后再调用外部函数")]),e._v("，这样，你的合约就不会轻易被滥用的重入攻击 (reentrancy) 所影响")])])]),e._v(" "),n("li",[n("p",[e._v("public 既可以被当作内部函数也可以被当作外部函数。使用时候有什么注意的？")]),e._v(" "),n("ul",[n("li",[e._v("如果想将一个函数当作内部函数使用，就用 "),n("code",[e._v("f")]),e._v(" 调用，如果想将其当作外部函数，使用 "),n("code",[e._v("this.f")]),e._v(" 。")])])]),e._v(" "),n("li",[n("p",[e._v("pure 函数中，哪些行为被视为读取状态。")]),e._v(" "),n("ul",[n("li",[e._v("读取状态变量。\n"),n("ul",[n("li",[e._v("这也意味着读取 "),n("code",[e._v("immutable")]),e._v(" 变量也不是一个 "),n("code",[e._v("pure")]),e._v(" 操作。")])])]),e._v(" "),n("li",[e._v("访问 "),n("code",[e._v("address(this).balance")]),e._v(" 或 "),n("code",[e._v("<address>.balance")])]),e._v(" "),n("li",[e._v("访问 "),n("code",[e._v("block")]),e._v("，"),n("code",[e._v("tx")]),e._v("， "),n("code",[e._v("msg")]),e._v(" 中任意成员 （除 "),n("code",[e._v("msg.sig")]),e._v(" 和 "),n("code",[e._v("msg.data")]),e._v(" 之外）。")]),e._v(" "),n("li",[e._v("调用任何未标记为 "),n("code",[e._v("pure")]),e._v(" 的函数。")]),e._v(" "),n("li",[n("strong",[e._v("使用包含特定操作码的内联汇编。")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("TODO:")]),e._v(" 这个不了解，需要用例子加深印象。")])])]),e._v(" "),n("li",[e._v("使用操作码 "),n("code",[e._v("STATICCALL")]),e._v(" , 这并不保证状态未被读取, 但至少不被修改。")])])]),e._v(" "),n("li",[n("p",[e._v("pure 函数发生错误时候，有什么需要注意的？")]),e._v(" "),n("ul",[n("li",[e._v("如果发生错误，"),n("code",[e._v("pure")]),e._v(" 函数可以使用 "),n("code",[e._v("revert()")]),e._v("和 "),n("code",[e._v("require()")]),e._v(" 函数来还原潜在的状态更改。还原状态更改不被视为 "),n("strong",[e._v("状态修改")]),e._v(", 因为它只还原以前在没有"),n("code",[e._v("view")]),e._v(" 或 "),n("code",[e._v("pure")]),e._v(" 限制的代码中所做的状态更改, 并且代码可以选择捕获 revert 并不传递还原。这种行为也符合 STATICCALL 操作码。")])])]),e._v(" "),n("li",[n("p",[e._v("view 函数中，哪些行为视为修改状态。")]),e._v(" "),n("ul",[n("li",[e._v("修改状态变量。")]),e._v(" "),n("li",[e._v("触发事件。")]),e._v(" "),n("li",[e._v("创建其它合约。")]),e._v(" "),n("li",[e._v("使用 "),n("code",[e._v("selfdestruct")]),e._v("。")]),e._v(" "),n("li",[e._v("通过调用发送以太币。")]),e._v(" "),n("li",[e._v("调用任何没有标记为 view 或者 pure 的函数。")]),e._v(" "),n("li",[e._v("使用底层调用\n"),n("ul",[n("li",[e._v("(TODO:这里是 call 操作么？)")])])]),e._v(" "),n("li",[e._v("使用包含某些操作码的内联程序集。")])])]),e._v(" "),n("li",[n("p",[e._v("pure/view/payable/这些状态可变性的类型转换是怎么样的？")]),e._v(" "),n("ul",[n("li",[e._v("pure 函数可以转换为 view 和 non-payable 函数")]),e._v(" "),n("li",[e._v("view 函数可以转换为 non-payable 函数")]),e._v(" "),n("li",[e._v("payable 函数可以转换为 non-payable 函数")]),e._v(" "),n("li",[e._v("其他的转换则不可以。")])])]),e._v(" "),n("li",[n("p",[e._v("使用 return 时，有哪些需要注意的？")]),e._v(" "),n("ul",[n("li",[e._v("函数返回类型不能为空 —— 如果函数类型不需要返回，则需要删除整个 "),n("code",[e._v("returns (<return types>)")]),e._v(" 部分。")]),e._v(" "),n("li",[e._v("函数可能返回任意数量的参数作为输出。函数的返回值有两个关键字，一个是"),n("code",[e._v("returns")]),e._v(",一个是 "),n("code",[e._v("return")]),e._v(";\n"),n("ul",[n("li",[n("code",[e._v("returns")]),e._v(" 是在函数名后面的，用来标示返回值的数量，类型，名字信息。")]),e._v(" "),n("li",[n("code",[e._v("return")]),e._v(" 是在函数主体内，用于返回 "),n("code",[e._v("returns")]),e._v(" 指定的数据信息")])])]),e._v(" "),n("li",[e._v("如果使用 return 提前退出有返回值的函数， 必须在用 return 时提供返回值。")]),e._v(" "),n("li",[e._v("非内部函数有些类型没法返回，比如限制的类型有：多维动态数组、结构体等。")]),e._v(" "),n("li",[e._v("解构赋值一个函数返回多值时候，元素数量必须一样。")])])]),e._v(" "),n("li",[n("p",[e._v("函数的签名的逻辑是什么？为什么函数可以重载？")]),e._v(" "),n("ul",[n("li",[e._v("核心: "),n("code",[e._v('bytes4(keccak256(bytes("transfer(address,uint256)")))')])]),e._v(" "),n("li",[e._v("函数签名被定义为基础原型的规范表达，而基础原型是"),n("strong",[e._v("函数名称加上由括号括起来的参数类型列表，参数类型间由一个逗号分隔开，且没有空格。")])])])]),e._v(" "),n("li",[n("p",[e._v("函数重载需要怎么样实现？")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("这些相同函数名的函数，参数(参数类型或参数数量)必须不一样。")]),e._v("，因为只有这样才能签出来不同的函数选择器。")]),e._v(" "),n("li",[e._v("如果两个外部可见函数仅区别于 Solidity 内的类型，而不是它们的外部类型则会导致错误。很难理解，需要看例子。")])])]),e._v(" "),n("li",[n("p",[e._v("函数重载的参数匹配原理")]),e._v(" "),n("ul",[n("li",[e._v("通过将当前范围内的函数声明与函数调用中提供的参数相匹配，这样就可以选择重载函数。")]),e._v(" "),n("li",[e._v("如果所有参数都可以隐式地转换为预期类型，则该函数作为重载候选项。如果一个匹配的都没有，解析失败。")]),e._v(" "),n("li",[e._v("返回参数不作为重载解析的依据。")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("function f(uint8 val) public pure returns (uint8 out)")]),e._v(" 和 "),n("code",[e._v("function f(uint256 val) public pure returns (uint256 out)")]),e._v(" 是合法的函数重载么？")]),e._v(" "),n("ul",[n("li",[e._v("不是的。")]),e._v(" "),n("li",[e._v("在 Remix 里,部署 A 合约，会将两个方法都渲染出来，调用 "),n("code",[e._v("f(50)")]),e._v("/"),n("code",[e._v("f(256)")]),e._v(" 都可以。")]),e._v(" "),n("li",[e._v("但是实际调用里，在其他合约内调用 "),n("code",[e._v("f(50)")]),e._v(" 会导致类型错误，因为 "),n("code",[e._v("50")]),e._v(" 既可以被隐式转换为 "),n("code",[e._v("uint8")]),e._v("也可以被隐式转换为 "),n("code",[e._v("uint256")]),e._v("。 另一方面，调用 "),n("code",[e._v("f(256)")]),e._v(" 则会解析为"),n("code",[e._v("f(uint256)")]),e._v(" 重载，因为 "),n("code",[e._v("256")]),e._v(" 不能隐式转换为 "),n("code",[e._v("uint8")]),e._v("。")])])]),e._v(" "),n("li",[n("p",[e._v("函数修改器的意义是什么？有什么作用？")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("意义")]),e._v(":我们可以将一些通用的操作提取出来，包装为函数修改器，来提高代码的复用性，改善编码效率。是函数高内聚，低耦合的延伸。")]),e._v(" "),n("li",[n("strong",[e._v("作用")]),e._v(": "),n("code",[e._v("modifier")]),e._v(" 常用于在函数执行前检查某种前置条件。")]),e._v(" "),n("li",[e._v("比如地址对不对，余额是否充足，参数值是否允许等")]),e._v(" "),n("li",[e._v("修改器内可以写逻辑")]),e._v(" "),n("li",[n("strong",[e._v("特点")]),e._v(": "),n("code",[e._v("modifier")]),e._v(" 是一种合约属性，可被继承，同时还可被派生的合约重写(override)。（修改器 modifier 是合约的可继承属性，并可能被派生合约覆盖 , 但前提是它们被标记为 virtual）。")]),e._v(" "),n("li",[n("code",[e._v("_")]),e._v(" 符号可以在修改器中出现多次，每处都会替换为函数体。")])])]),e._v(" "),n("li",[n("p",[e._v("Solidity 有哪些全局的数学和密码学函数？")]),e._v(" "),n("ul",[n("li",[e._v("数学函数：")]),e._v(" "),n("li",[n("code",[e._v("addmod(uint x, uint y, uint k) returns (uint)")]),e._v(" "),n("ul",[n("li",[e._v("计算 "),n("code",[e._v("(x + y) % k")]),e._v("，加法会在任意精度下执行，并且加法的结果即使超过 "),n("code",[e._v("2**256")]),e._v(" 也不会被截取。从 0.5.0 版本的编译器开始会加入对 "),n("code",[e._v("k != 0")]),e._v(" 的校验（assert）。")])])]),e._v(" "),n("li",[n("code",[e._v("mulmod(uint x, uint y, uint k) returns (uint)")]),e._v(" "),n("ul",[n("li",[e._v("计算 "),n("code",[e._v("(x * y) % k")]),e._v("，乘法会在任意精度下执行，并且乘法的结果即使超过 "),n("code",[e._v("2**256")]),e._v(" 也不会被截取。从 0.5.0 版本的编译器开始会加入对 "),n("code",[e._v("k != 0")]),e._v(" 的校验（assert）。")])])]),e._v(" "),n("li",[e._v("密码学函数：")]),e._v(" "),n("li",[n("code",[e._v("keccak256((bytes memory) returns (bytes32)")]),e._v(" "),n("ul",[n("li",[e._v("计算 Keccak-256 哈希，之前 keccak256 的别名函数 "),n("strong",[e._v("sha3")]),e._v(" 在 "),n("strong",[e._v("0.5.0")]),e._v(" 中已经移除。。")])])]),e._v(" "),n("li",[n("code",[e._v("sha256(bytes memory) returns (bytes32)")]),e._v(" "),n("ul",[n("li",[e._v("计算参数的 SHA-256 哈希。")])])]),e._v(" "),n("li",[n("code",[e._v("ripemd160(bytes memory) returns (bytes20)")]),e._v(" "),n("ul",[n("li",[e._v("计算参数的 RIPEMD-160 哈希。")])])]),e._v(" "),n("li",[n("code",[e._v("ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)")]),e._v(" "),n("ul",[n("li",[e._v("利用椭圆曲线签名恢复与公钥相关的地址，错误返回零值。")]),e._v(" "),n("li",[e._v("函数参数对应于 ECDSA 签名的值:\n"),n("ul",[n("li",[e._v("r = 签名的前 32 字节")]),e._v(" "),n("li",[e._v("s = 签名的第 2 个 32 字节")]),e._v(" "),n("li",[e._v("v = 签名的最后一个字节")])])]),e._v(" "),n("li",[e._v("ecrecover 返回一个 address, 而不是 address payable。")])])])])])])])}),[],!1,null,null,null);n.default=r.exports}}]);