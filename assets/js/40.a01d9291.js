(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{448:function(n,r,t){"use strict";t.r(r);var e=t(2),a=Object(e.a)({},(function(){var n=this,r=n._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"_14-library-库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-library-库"}},[n._v("#")]),n._v(" 14.Library:库")]),n._v(" "),r("p",[n._v("库 library 是智能合约的精简版，就像智能合约一样，位于区块链上，包含可以被其他合约使用的代码。库合约有两种使用方法，直接调用和 "),r("code",[n._v("using...for...")]),n._v(" 使用。")]),n._v(" "),r("h2",{attrs:{id:"_1️⃣-库合约与普通智能合约区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-库合约与普通智能合约区别"}},[n._v("#")]),n._v(" 1️⃣ 库合约与普通智能合约区别")]),n._v(" "),r("p",[n._v("库与合约类似，库的目的是只需要在特定的地址部署一次，而它们的代码可以通过\nEVM 的 "),r("code",[n._v("DELEGATECALL")]),n._v(" 特性进行重用。这意味着如果库函数被调用，它的代码在调用合约的上下文中执行，即 "),r("code",[n._v("this")]),n._v(" 指向调用合约，特别注意，他访问的是调用合约存储的状态。因为每个库都是一段独立的代码，所以它仅能访问调用合约明确提供的状态变量（否则它就无法通过名字访问这些变量）。")]),n._v(" "),r("ul",[r("li",[r("strong",[n._v("库不能有任何状态变量")])]),n._v(" "),r("li",[r("strong",[n._v("它们也不能继承其他合约")]),n._v("。")]),n._v(" "),r("li",[n._v("库合约函数的可视范围通常为 "),r("code",[n._v("internal")]),n._v("，可变性为 "),r("code",[n._v("pure")]),n._v("，也就是对所有使用它的合约可见。\n"),r("ul",[r("li",[n._v("定义成 "),r("code",[n._v("external")]),n._v(" 毫无意义，因为库合约函数只在内部使用，不独立运行。")]),n._v(" "),r("li",[n._v("同样定义成 "),r("code",[n._v("private")]),n._v(" 也不行，因为其它合约无法使用。")])])]),n._v(" "),r("li",[n._v("禁止使用 "),r("code",[n._v("fallback")]),n._v(" / "),r("code",[n._v("receive")]),n._v(" 函数，所以导致也不能接收以太币")]),n._v(" "),r("li",[n._v("Library 被销毁后，则所有方法恢复为初始值，功能失效。")]),n._v(" "),r("li",[n._v("使用库 library 的合约，可以将库合约视为隐式的父合约，当然它们不会显式的出现在继承关系中。也就是不用写 "),r("code",[n._v("is")]),n._v(" 来继承，直接可以在合约中使用。")]),n._v(" "),r("li",[n._v("按照规范，库合约的名字需要首字母大写（大驼峰命名方式）")])]),n._v(" "),r("p",[n._v("可以通过类型转换, 将库类型更改为 "),r("code",[n._v("address")]),n._v(" 类型, 例如: 使用"),r("code",[n._v("address(LibraryName)")]),n._v(",由于编译器无法知道库的部署位置，编译器会生成"),r("code",[n._v("__$30bbc0abd4d6364515865950d3e0d10953$__")]),n._v("形式的占位符，该占位符是完整的库名称的 keccak256 哈希的十六进制编码的 34 个字符的前缀，例如：如果该库存储在 libraries 目录中名为 bigint.sol 的文件中，则完整的库名称为"),r("code",[n._v("libraries/bigint.sol:BigInt")]),n._v("。")]),n._v(" "),r("p",[n._v("此类字节码不完整的合约，不应该部署。占位符需要替换为实际地址。你可以通过在编译库时将它们传递给编译器或使用链接器更新已编译的二进制文件来实现。有关如何使用命令行编译器进行链接的信息，请参见 "),r("a",{attrs:{href:"https://learnblockchain.cn/docs/solidity/using-the-compiler.html#/library-linking",target:"_blank",rel:"noopener noreferrer"}},[r("code",[n._v("library-linking")]),r("OutboundLink")],1),n._v(" 。")]),n._v(" "),r("h2",{attrs:{id:"_2️⃣-直接调用库合约方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-直接调用库合约方法"}},[n._v("#")]),n._v(" 2️⃣ 直接调用库合约方法")]),n._v(" "),r("h3",{attrs:{id:"案例-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例-1"}},[n._v("#")]),n._v(" 案例 1")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary Math {\n    function max(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        return _x > _y ? _x : _y;\n    }\n}\n\ncontract Test {\n    function testMax(uint256 _x, uint256 _y) external pure returns (uint256) {\n        return Math.max(_x, _y);\n    }\n}\n")])])]),r("h3",{attrs:{id:"案例-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例-2"}},[n._v("#")]),n._v(" 案例 2")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary ArrayLib {\n    function find(uint256[] storage _arr, uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        for (uint256 index = 0; index < _arr.length; index++) {\n            if (_arr[index] == _value) {\n                return index;\n            }\n        }\n        revert("Not Found");\n    }\n}\n\ncontract Test {\n    uint256[] public arr = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n\n    // 会成功\n    function test1() external view returns (uint256) {\n        return ArrayLib.find(arr, 15);\n    }\n\n    // 会失败\n    function test2() external view returns (uint256) {\n        return ArrayLib.find(arr, 99);\n    }\n}\n')])])]),r("h2",{attrs:{id:"_3️⃣-using-for-使用库合约"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-using-for-使用库合约"}},[n._v("#")]),n._v(" 3️⃣ "),r("code",[n._v("using...for...")]),n._v(" 使用库合约")]),n._v(" "),r("p",[n._v("使用库合约还有更方便的方法，那就是 "),r("code",[n._v("using for")]),n._v(" 指令。")]),n._v(" "),r("p",[n._v("例如："),r("code",[n._v("using A for B")]),n._v(" 用来将 A 库里定义的函数附着到类型 B。"),r("strong",[n._v("这些函数将会默认接收调用函数对象的实例作为第一个参数")]),n._v("。\nusing For 可在文件或合约内部及合约级都是有效的。")]),n._v(" "),r("p",[n._v("核心如下:")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("using ArrayLib for uint256[];\nuint256[] public arr = [10, 11, 12, 13, 14,...];\n...\narr.find(15); // 直接使用\n...\n")])])]),r("h3",{attrs:{id:"例子-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例子-1"}},[n._v("#")]),n._v(" 例子 1")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary ArrayLib {\n    function find(uint256[] storage _arr, uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        for (uint256 index = 0; index < _arr.length; index++) {\n            if (_arr[index] == _value) {\n                return index;\n            }\n        }\n        revert("Not Found");\n    }\n}\n\ncontract Test {\n    // using for 可以让所有 uint256[] 数据，都具有 ArrayLib 内的方法\n    using ArrayLib for uint256[];\n\n    uint256[] public arr = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n\n    function test1() external view returns (uint256) {\n        // return ArrayLib.find(arr, 15);\n\n        // 可以直接使用 arr.find，而不需要额外修改 ArrayLib 内的代码\n        return arr.find(15);\n    }\n\n    function test2() external view returns (uint256) {\n        // return ArrayLib.find(arr, 99);\n        return arr.find(99);\n    }\n}\n\n')])])]),r("h3",{attrs:{id:"using-for-其他用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#using-for-其他用法"}},[n._v("#")]),n._v(" using for 其他用法")]),n._v(" "),r("p",[n._v("第一部分 "),r("code",[n._v("A")]),n._v(" 可以是以下之一：")]),n._v(" "),r("ul",[r("li",[n._v("一些库或文件级的函数列表("),r("code",[n._v("using {f, g, h, L.t} for uint;")]),n._v(")，仅是那些函数被附加到类型。")]),n._v(" "),r("li",[n._v("库名称 ("),r("code",[n._v("using L for uint;")]),n._v(") ，库里所有的函数(包括 public 和 internal 函数) 被附加到类型上。")])]),n._v(" "),r("p",[n._v("在文件级，第二部分 "),r("code",[n._v("B")]),n._v(" 必须是一个显式类型（不用指定数据位置）")]),n._v(" "),r("p",[n._v("在合约内，你可以使用 "),r("code",[n._v("using L for *;")]),n._v("， 表示库 "),r("code",[n._v("L")]),n._v("中的函数被附加在所有类型上。")]),n._v(" "),r("p",[n._v("如果你指定一个库，库内所有函数都会被加载，即使它们的第一个参数类型与对象的类型不匹配。类型检查会在函数调用和重载解析时执行。")]),n._v(" "),r("p",[n._v("如果你使用函数列表 ("),r("code",[n._v("using {f, g, h, L.t} for uint;")]),n._v(")， 那么类型\n("),r("code",[n._v("uint")]),n._v(") 会隐式的转换为这些函数的第一个参数。\n即便这些函数中没有一个被调用，这个检查也会进行。")]),n._v(" "),r("p",[r("code",[n._v("using A for B;")]),n._v(" 指令仅在当前作用域有效（要么是合约中，或当前模块、或源码单元），包括在作用域内的所有函数，在合约或模块之外则无效。")]),n._v(" "),r("p",[n._v("当 "),r("code",[n._v("using for")]),n._v(" 指令在文件级别使用，并应用于一个用户定义类型（在用一个文件定义的文件级别的用户类型），"),r("code",[n._v("global")]),n._v(" 关键字可以添加到末尾。产生的效果是，这些函数被附加到使用该类型的任何地方（包括其他文件），而不仅仅是声明处所在的作用域。")]),n._v(" "),r("p",[n._v("在下面的例子中，我们将使用库：")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nlibrary Search {\n    function indexOf(uint[] storage self, uint value)\n        public\n        view\n        returns (uint)\n    {\n        for (uint i = 0; i < self.length; i++)\n            if (self[i] == value) return i;\n        return type(uint).max;\n    }\n    }\n\nusing Search for uint[];\n\ncontract C {\n    using Search for uint[];\n    uint[] data;\n\n    function append(uint value) public {\n        data.push(value);\n    }\n\n    function replace(uint from, uint to) public {\n        // 执行库函数调用\n        uint index = data.indexOf(from);\n        if (index == type(uint).max)\n            data.push(to);\n        else\n            data[index] = to;\n    }\n}\n")])])]),r("p",[n._v("注意，所有 external 库调用都是实际的 EVM 函数调用。这意味着如果传递内存或值类型，都将产生一个副本，即使是 "),r("code",[n._v("self")]),n._v(" 变量。 引用存储变量或者 internal 库调用 是唯一不会发生拷贝的情况。")]),n._v(" "),r("h2",{attrs:{id:"_4️⃣-直接调用-和-using-for-对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-直接调用-和-using-for-对比"}},[n._v("#")]),n._v(" 4️⃣ 直接调用 和 using for 对比")]),n._v(" "),r("ul",[r("li",[n._v("using for 更符合语义化")]),n._v(" "),r("li",[n._v("库合约使用 using for 比直接使用更省 gas")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary Sum {\n    function sum(uint256[] memory _data) public pure returns (uint256 temp) {\n        for (uint256 i = 0; i < _data.length; ++i) {\n            temp += _data[i];\n        }\n    }\n}\n\ncontract Test {\n    using Sum for uint256[];\n    uint256[] data;\n\n    constructor() {\n        data.push(1);\n        data.push(2);\n        data.push(3);\n        data.push(4);\n        data.push(5);\n    }\n\n    // 43874 gas\n    function sumA1() external view returns (uint256) {\n        return Sum.sum(data);\n    }\n\n    // 43531 gas\n    function sumA2() external view returns (uint256) {\n        return data.sum();\n    }\n}\n")])])]),r("h2",{attrs:{id:"_5️⃣-销毁合约库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-销毁合约库"}},[n._v("#")]),n._v(" 5️⃣ 销毁合约库")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary Math {\n    function max(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        return _x > _y ? _x : _y;\n    }\n\n    function kill() internal {\n        selfdestruct(payable(msg.sender));\n    }\n\n    // Libraries cannot have fallback functions.\n    // fallback() external {}\n\n    // Libraries cannot have receive ether functions.\n    // receive() external payable {}\n}\n\ncontract Test {\n    function testMax(uint256 _x, uint256 _y) external pure returns (uint256) {\n        return Math.max(_x, _y);\n    }\n\n    function testKill() external {\n        return Math.kill();\n    }\n}\n")])])]),r("ul",[r("li",[n._v("执行 "),r("code",[n._v("Test.testMax")])]),n._v(" "),r("li",[n._v("执行 "),r("code",[n._v("Test.testKill")])]),n._v(" "),r("li",[n._v("再次执行 "),r("code",[n._v("Test.testMax")]),n._v("，发现结果是默认值")])]),n._v(" "),r("h2",{attrs:{id:"_6️⃣-扩展-库的调用保护"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-扩展-库的调用保护"}},[n._v("#")]),n._v(" 6️⃣ 扩展:库的调用保护")]),n._v(" "),r("p",[n._v("如果库的代码是通过 "),r("code",[n._v("CALL")]),n._v(" 来执行，而不是 "),r("code",[n._v("DELEGATECALL")]),n._v(" 那么执行的结果会被回退，除非是对 "),r("code",[n._v("view")]),n._v(" 或者 "),r("code",[n._v("pure")]),n._v(" 函数的调用。EVM 没有为合约提供检测是否使用 "),r("code",[n._v("CALL")]),n._v(" 的直接方式，但是合约可以使用"),r("code",[n._v("ADDRESS")]),n._v(' 操作码找出正在运行的"位置"。生成的代码通过比较这个地址和构造时的地址来确定调用模式。')]),n._v(" "),r("p",[n._v("更具体地说，库的运行时代码总是从一个 push 指令开始，它在编译时是 20 字节的零。当运行部署代码时，这个常数被内存中的当前地址替换，修改后的代码存储在合约中。在运行时，部署时地址就成为了第一个被 push 到堆栈上的常数， 对于任何 non-view 和 non-pure 函数，调度器代码都将对比当前地址与这个常数是否一致。这意味着库在链上存储的实际代码与编译器输出的 "),r("code",[n._v("deployedBytecode")]),n._v(" 的编码是不同。")]),n._v(" "),r("h2",{attrs:{id:"🆗-实战应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战应用"}},[n._v("#")]),n._v(" 🆗 实战应用")]),n._v(" "),r("h2",{attrs:{id:"️⃣-问答题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#️⃣-问答题"}},[n._v("#")]),n._v(" #️⃣ 问答题")]),n._v(" "),r("ul",[r("li",[n._v("库合约与普通智能合约区别\n"),r("ul",[r("li",[r("strong",[n._v("库不能有任何状态变量")])]),n._v(" "),r("li",[r("strong",[n._v("它们也不能继承其他合约")]),n._v("。")]),n._v(" "),r("li",[n._v("库合约函数的可视范围通常为 "),r("code",[n._v("internal")]),n._v("，可变性为 "),r("code",[n._v("pure")]),n._v("，也就是对所有使用它的合约可见。\n"),r("ul",[r("li",[n._v("定义成 "),r("code",[n._v("external")]),n._v(" 毫无意义，因为库合约函数只在内部使用，不独立运行。")]),n._v(" "),r("li",[n._v("同样定义成 "),r("code",[n._v("private")]),n._v(" 也不行，因为其它合约无法使用。")])])]),n._v(" "),r("li",[n._v("禁止使用 "),r("code",[n._v("fallback")]),n._v(" / "),r("code",[n._v("receive")]),n._v(" 函数，所以导致也不能接收以太币")]),n._v(" "),r("li",[n._v("Library 被销毁后，则所有方法恢复为初始值，功能失效。")]),n._v(" "),r("li",[n._v("使用库 library 的合约，可以将库合约视为隐式的父合约，当然它们不会显式的出现在继承关系中。也就是不用写 "),r("code",[n._v("is")]),n._v(" 来继承，直接可以在合约中使用。")]),n._v(" "),r("li",[n._v("库合约的名字也需要首字母大写")]),n._v(" "),r("li",[n._v("库与合约类似，库的目的是只需要在特定的地址部署一次，而它们的代码可以通过\nEVM 的 "),r("code",[n._v("DELEGATECALL")]),n._v(" 特性进行重用。这意味着如果库函数被调用，它的代码在调用合约的上下文中执行，即 "),r("code",[n._v("this")]),n._v(" 指向调用合约，特别注意，他访问的是调用合约存储的状态。因为每个库都是一段独立的代码，所以它仅能访问调用合约明确提供的状态变量（否则它就无法通过名字访问这些变量）。")]),n._v(" "),r("li",[n._v("可以通过类型转换, 将库类型更改为 "),r("code",[n._v("address")]),n._v(" 类型, 例如: 使用"),r("code",[n._v("address(LibraryName)")]),n._v(",由于编译器无法知道库的部署位置，编译器会生成"),r("code",[n._v("__$30bbc0abd4d6364515865950d3e0d10953$__")]),n._v("形式的占位符，该占位符是完整的库名称的 keccak256 哈希的十六进制编码的 34 个字符的前缀，例如：如果该库存储在 libraries 目录中名为 bigint.sol 的文件中，则完整的库名称为"),r("code",[n._v("libraries/bigint.sol:BigInt")]),n._v("。")])])]),n._v(" "),r("li",[n._v("库合约如何调用？\n"),r("ul",[r("li",[n._v("有两种方法调用")]),n._v(" "),r("li",[n._v("1 直接调用库合约方法："),r("code",[n._v("ArrayLib.find(arr, 99);")])]),n._v(" "),r("li",[n._v("2 "),r("code",[n._v("using...for...")]),n._v(" 使用库合约"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("using ArrayLib for uint256[];\nuint256[] public arr = [10, 11, 12, 13, 14,...];\n...\narr.find(15); // 直接使用\n...\n")])])])])])]),n._v(" "),r("li",[n._v("直接调用 和 using for 对比\n"),r("ul",[r("li",[r("code",[n._v("using for")]),n._v(" 更符合语义化")]),n._v(" "),r("li",[n._v("库合约使用 "),r("code",[n._v("using for")]),n._v(" 比直接使用更省 gas")])])])])])}),[],!1,null,null,null);r.default=a.exports}}]);