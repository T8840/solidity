(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{432:function(t,a,n){"use strict";n.r(a);var e=n(2),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_03-变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-变量"}},[t._v("#")]),t._v(" 03.变量")]),t._v(" "),a("p",[t._v("上一章我们学习了 Solidity 中的数据知识，数据是编程语言的生产生活资料，而变量是数据的代言人。我们在 Solidity 中很多时候不直接使用数据，而是使用变量外表示数据。数据作为最基础的生产资料，而变量作为代言人，同样非常重要。")]),t._v(" "),a("p",[t._v("Solidity 是一种静态类型语言，这意味着每个变量（状态变量和局部变量）都需要在编译时指定变量的类型。")]),t._v(" "),a("h2",{attrs:{id:"_1️⃣-变量基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-变量基础知识"}},[t._v("#")]),t._v(" 1️⃣ 变量基础知识")]),t._v(" "),a("p",[t._v("回顾一下前面两章提到的变量：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DataTypes {\n    string public myString = "hello world";\n    bool public b = true;\n    uint256 public u = 123;\n\n    int256 public i = -123;\n    int256 public minInt = type(int256).min; // 获取最小值\n    int256 public maxInt = type(int256).max; // 获取最大值\n    address public ads = 0xffD0d80c48F6C3C5387b7cfA7AA03970bdB926ac;\n    bytes32 public bys32 = "abc";\n}\n')])])]),a("h3",{attrs:{id:"本节配套视频"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频"}},[t._v("#")]),t._v(" 本节配套视频")]),t._v(" "),a("ul",[a("li",[t._v("BiliBili: "),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=46",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])]),t._v(" "),a("li",[t._v("Youtube: "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=lrZNZaezP5A&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=46",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])])]),t._v(" "),a("h3",{attrs:{id:"_1-初始默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始默认值"}},[t._v("#")]),t._v(" 1.初始默认值")]),t._v(" "),a("p",[a("strong",[t._v("Solidity 是一种静态类型语言")]),t._v("，这意味着需要在声明期间指定变量类型。")]),t._v(" "),a("p",[t._v("在 Solidity 中没有 null 或者 undefined 的概念，但是新声明的变量总是有一个默认值，具体的默认值跟类型相关，比如 int 类型的默认值为 0。每个变量声明时，都有一个基于其类型的默认值。")]),t._v(" "),a("h4",{attrs:{id:"⓵-默认值的两个要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-默认值的两个要点"}},[t._v("#")]),t._v(" ⓵ 默认值的两个要点")]),t._v(" "),a("ol",[a("li",[t._v("Solidity 智能合约中所有的变量，都有默认值，没有 null 或者 undefined 的概念。")]),t._v(" "),a("li",[t._v("这些变量在没有被赋值之前，它的值已默认值的形式存在。")])]),t._v(" "),a("h4",{attrs:{id:"⓶-例子演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-例子演示"}},[t._v("#")]),t._v(" ⓶ 例子演示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract DefaultValues {\n    string public str; // ""\n    bool public b; // false\n    int256 public intValue; // 0\n    uint256 public count; // 0\n\n    address public ads; // 0x0000000000000000000000000000000000000000\n\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\n    bytes32 public bt32;\n\n    // array\n    uint256[] public arr;\n    // enum\n    enum Status {\n        None,\n        Pending,\n        Shiped,\n        Completed,\n        Rejected,\n        Canceled\n    }\n    Status public status;\n\n    function getArr() external view returns (uint256[] memory) {\n        return arr;\n    }\n}\n')])])]),a("h4",{attrs:{id:"⓷-默认值总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-默认值总结"}},[t._v("#")]),t._v(" ⓷ 默认值总结")]),t._v(" "),a("ul",[a("li",[t._v("string: "),a("code",[t._v('""')])]),t._v(" "),a("li",[t._v("bool: "),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("int256: "),a("code",[t._v("0")])]),t._v(" "),a("li",[t._v("uint256: "),a("code",[t._v("0")])]),t._v(" "),a("li",[t._v("address: "),a("code",[t._v("0x0000000000000000000000000000000000000000")])]),t._v(" "),a("li",[t._v("bytes32: "),a("code",[t._v("0x0000000000000000000000000000000000000000000000000000000000000000")])]),t._v(" "),a("li",[t._v("enum: "),a("code",[t._v("0")])]),t._v(" "),a("li",[t._v("动态数组: "),a("code",[t._v("[]")])]),t._v(" "),a("li",[t._v("定长数组: 每个元素的默认值")]),t._v(" "),a("li",[a("code",[t._v("mapping")]),t._v(" / "),a("code",[t._v("strucr")]),t._v(" 均为所在类型的默认值")])]),t._v(" "),a("p",[t._v("上述的这些值也可以通过 "),a("code",[t._v("delete")]),t._v(" 操作符来实现，详细参考 "),a("RouterLink",{attrs:{to:"/source/05.operator.html#delete"}},[t._v("delete 操作赋")]),t._v("，在数据那一章也多次提到通过"),a("code",[t._v("delete")]),t._v(" 操作符来使指定元素恢复默认值。")],1),t._v(" "),a("h3",{attrs:{id:"_2-作用域和声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域和声明"}},[t._v("#")]),t._v(" 2.作用域和声明")]),t._v(" "),a("p",[t._v("Solidity 中的作用域规则遵循了 C99：")]),t._v(" "),a("h4",{attrs:{id:"⓵-作用域的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-作用域的规则"}},[t._v("#")]),t._v(" ⓵ 作用域的规则")]),t._v(" "),a("ul",[a("li",[t._v("变量将会从它们被声明之后可见，直到一对 "),a("code",[t._v("{}")]),t._v(" 块的结束。")]),t._v(" "),a("li",[t._v("对于参数形式的变量（例如：函数参数、修饰器参数、catch 参数等等）在其后接着的代码块内有效。\n"),a("ul",[a("li",[t._v("这些代码块是函数的实现，catch 语句块等。")]),t._v(" "),a("li",[t._v("有一个例外，在 for 循环语句中初始化的变量，其可见性仅维持到 "),a("code",[t._v("for")]),t._v(" 循环的结束。")])])]),t._v(" "),a("li",[t._v("那些定义在代码块之外的变量，比如函数、合约、自定义类型等等，并不会影响它们的作用域特性。\n"),a("ul",[a("li",[t._v("意味着你可以在实际声明状态变量的语句之前就使用它们，并且递归地调用函数。")])])])]),t._v(" "),a("h4",{attrs:{id:"⓶-例子演示-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-例子演示-2"}},[t._v("#")]),t._v(" ⓶ 例子演示")]),t._v(" "),a("p",[t._v("基于上面总结规则，下边的例子两个变量虽然名字一样，但却在不同的作用域里。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    function minimalScoping() public pure returns (uint256) {\n        uint256 same;\n        {\n            uint256 same;\n            same = 1;\n        }\n\n        {\n            uint256 same;\n            same = 3;\n        }\n        return same;\n    }\n}\n")])])]),a("p",[t._v("作为 C99 作用域规则的特例，请注意在下边的例子里，第一次对 x 的赋值会改变上一层中声明的变量值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    function f() public pure returns (uint256) {\n        uint256 x = 1;\n        {\n            // This declaration shadows an existing declaration.\n            x = 2; // 这个赋值会影响在外层声明的变量\n\n            // Unused local variable.\n            uint256 x;\n        }\n        return x; // x has value 2\n    }\n}\n")])])]),a("p",[t._v("在 Solidity 中，如果在内部作用域中使用和外层相同的变量名，会收到警告信息。这种警告是告诉开发者"),a("code",[t._v("外层声明的变量被“覆盖”")]),t._v("了，谨慎检查下是不是期望的。")]),t._v(" "),a("p",[t._v("上面例子中的 f 函数的 return 值 可以改写为下面的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function f() public pure returns (uint256 x) {\n    x = 1;\n    {\n        x = 2;\n        uint256 x;\n    }\n}\n")])])]),a("h4",{attrs:{id:"⓷-必须先声明再赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-必须先声明再赋值"}},[t._v("#")]),t._v(" ⓷ 必须先声明再赋值")]),t._v(" "),a("p",[t._v("在 Solidity 现在的版本中，变量必须先声明再赋值，顺序不能倒。")]),t._v(" "),a("p",[t._v("0.5.0 版本之前，一个变量声明在函数的任意位置，都可以使他在整个函数范围内可见。从 0.5.0 版本开始以后就不能这样了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    // ✅\n    function t() public pure returns (uint256) {\n        uint256 x;\n        x = 2;\n        return x;\n    }\n\n    // ❌\n    function f() public pure returns (uint256) {\n        // DeclarationError: Undeclared identifier.\n        // "x" is not (or not yet) visible at this point.\n        x = 2;\n        uint256 x;\n        return x;\n    }\n}\n')])])]),a("h4",{attrs:{id:"⓸-合约外定义的类型和函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓸-合约外定义的类型和函数"}},[t._v("#")]),t._v(" ⓸ 合约外定义的类型和函数")]),t._v(" "),a("ul",[a("li",[t._v("合约外面可以定义函数和数据结构\n"),a("ul",[a("li",[t._v("定义在合约外面的函数，叫自由函数")]),t._v(" "),a("li",[t._v("定义在合约外面的类型，可以被多个合约使用")])])]),t._v(" "),a("li",[t._v("不可以定义变量\n"),a("ul",[a("li",[t._v("但是可以定义常量，常量那一节有介绍")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// 结构:\n//      定义在合约外面\n//      可以被多个合约同时使用\nstruct Book {\n    string title;\n    string author;\n    uint256 book_id;\n}\n\n// 自由函数:\n//      定义在合约外面\n//      没有可见性\nfunction getBalance() view returns (uint256) {\n    return address(msg.sender).balance;\n}\n\n\nfunction add(uint256 a_, uint256 b_) pure returns (uint256) {\n    return a_+b_;\n}\n\ncontract Demo1 {\n    Book public book1 = Book("Solidity", "Anbang", 1);\n    function f() public view returns (uint256) {\n        return getBalance();\n    }\n    function test() public pure returns (uint256) {\n        return add(100,200);\n    }\n\n}\n\ncontract Demo2 {\n    Book public book2 = Book("Solidity 2", "Anbang", 2);\n}\n')])])]),a("h3",{attrs:{id:"_3-变量的三种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量的三种状态"}},[t._v("#")]),t._v(" 3.变量的三种状态")]),t._v(" "),a("p",[t._v("按作用域划分，状态可以分为下面三种状态：")]),t._v(" "),a("ul",[a("li",[t._v("状态变量:\n"),a("ul",[a("li",[t._v("变量值永久保存在智能合约存储空间中，相当于属于已经写入到区块链中，可以随时调用，除非该条链消失。")]),t._v(" "),a("li",[t._v("特点:定义在智能合约的存储空间中")])])]),t._v(" "),a("li",[t._v("局部变量:\n"),a("ul",[a("li",[t._v('变量值仅在函数执行过程中有效,供函数内部使用；调用函数时，在虚拟机的内存中；函数退出后，变量无效。类似"闭包"的特性。')]),t._v(" "),a("li",[t._v("特点: 定义在函数内部")])])]),t._v(" "),a("li",[t._v("全局变量:\n"),a("ul",[a("li",[t._v("保存在全局命名空间，用于获取区块链相关信息的特殊变量。")]),t._v(" "),a("li",[t._v("特点:存在于 EVM 虚拟机中，不用定义，直接获取即可。")])])])]),t._v(" "),a("h4",{attrs:{id:"⓵-状态变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-状态变量"}},[t._v("#")]),t._v(" ⓵ 状态变量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Var{\n    uint256 public myUint = 123;\n    function changeMyUint (uint256 x) external returns (uint256 ){\n        myUint = x;\n        return myUint;\n    }\n}\n")])])]),a("h4",{attrs:{id:"⓶-局部变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-局部变量"}},[t._v("#")]),t._v(" ⓶ 局部变量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Var{\n     function test() external pure returns (uint256){\n        uint256 local = 2;// 局部变量\n        return local;\n    }\n}\n")])])]),a("h4",{attrs:{id:"⓷-全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-全局变量"}},[t._v("#")]),t._v(" ⓷ 全局变量")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("msg.sender")])]),t._v(" "),a("li",[a("code",[t._v("msg.value")])]),t._v(" "),a("li",[a("code",[t._v("block.timestamp")])]),t._v(" "),a("li",[a("code",[t._v("block.number")])])]),t._v(" "),a("p",[t._v("先简单了解下，后面会有一节进行详细介绍。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    address public owner = msg.sender; // 在状态变量中使用\n\n    // 在函数内使用\n    function global() external view returns(address,uint256,uint256){\n        return(msg.sender,block.timestamp,block.number);\n    }\n}\n")])])]),a("p",[a("strong",[t._v("msg.sender")]),t._v("：表示当前调用方法时的发起人。")]),t._v(" "),a("p",[t._v("一个智能合约既可以被合约创建者调用，也可以被其它人调用。合约创建者，即合约拥有者，也就是指合约部署者，"),a("strong",[t._v("如何判断合约的拥有者")]),t._v("？ 第一次部署的时候进行定义，即在构造函数中定义：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Test {\n    address public _owner;\n\n    constructor() {\n        _owner = msg.sender;\n    }\n}\n")])])]),a("h2",{attrs:{id:"_2️⃣-constant-常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-constant-常量"}},[t._v("#")]),t._v(" 2️⃣ Constant 常量")]),t._v(" "),a("ul",[a("li",[t._v("普通变量与常量:普通的状态变量，添加 "),a("code",[t._v("constant")]),t._v(" 关键词即可声明为常量")]),t._v(" "),a("li",[t._v("与常规状态变量相比，常量的 gas 要低很多。")]),t._v(" "),a("li",[t._v("常量名字一般使用全大写。")]),t._v(" "),a("li",[t._v("常量赋值后不可以修改。")]),t._v(" "),a("li",[t._v("常量必须声明和初始化一起做掉，否则编译不通过。")]),t._v(" "),a("li",[t._v("常量的值储存原理\n"),a("ul",[a("li",[t._v("常量的值在编译器确定，因为在编译器确定，所以不能定义在函数内。")]),t._v(" "),a("li",[t._v("编译器并不会为 "),a("code",[t._v("constant")]),t._v(" 常量在 "),a("code",[t._v("storage")]),t._v(" 上预留空间，它们的每次出现都会被替换为相应的常量表达式（它可能被优化器计算为实际的某个值）。")]),t._v(" "),a("li",[t._v("因为不是储存在"),a("code",[t._v("storage")]),t._v(" 上，所以函数内读取常量不算"),a("code",[t._v("view")]),t._v("，可以使用 pure")]),t._v(" "),a("li",[t._v("因为不是储存在"),a("code",[t._v("storage")]),t._v(" 上，所以可以在任意位置定义常量，比如在合约外面")]),t._v(" "),a("li",[t._v("也可以在文件级别定义 constant 变量（0.7.2 之后的特性）。")])])]),t._v(" "),a("li",[t._v("引用类型只支持字符串\n"),a("ul",[a("li",[t._v("不是所有的类型都支持常量，当前支持的仅有"),a("strong",[t._v("值类型")]),t._v("（包括地址类型）/"),a("strong",[t._v("字符串")]),t._v("。")])])]),t._v(" "),a("li",[t._v("可以使用内建函数赋值常量")])]),t._v(" "),a("h3",{attrs:{id:"本节配套视频-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-2"}},[t._v("#")]),t._v(" 本节配套视频")]),t._v(" "),a("ul",[a("li",[t._v("BiliBili: "),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=47",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])]),t._v(" "),a("li",[t._v("Youtube: "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=OH0F_1XIDE0&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=47",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])])]),t._v(" "),a("h3",{attrs:{id:"_1-普通变量与常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-普通变量与常量"}},[t._v("#")]),t._v(" 1.普通变量与常量")]),t._v(" "),a("p",[t._v("普通的状态变量，添加 "),a("code",[t._v("constant")]),t._v(" 关键词即可声明为常量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    string name1 = "Anbang";\n    string constant name2 = "Anbang";\n}\n')])])]),a("h3",{attrs:{id:"_2-常量相比变量更省钱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-常量相比变量更省钱"}},[t._v("#")]),t._v(" 2.常量相比变量更省钱")]),t._v(" "),a("p",[t._v("与常规状态变量相比，常量的 gas 要低很多。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    // 24465\n    string public name1 = "Anbang";\n\n    // 21793\n    string public constant name2 = "Anbang";\n}\n')])])]),a("h3",{attrs:{id:"_3-常量名字一般使用全大写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-常量名字一般使用全大写"}},[t._v("#")]),t._v(" 3.常量名字一般使用全大写")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    string public constant NAME = "Anbang";\n}\n')])])]),a("h3",{attrs:{id:"_4-常量赋值后不可以修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-常量赋值后不可以修改"}},[t._v("#")]),t._v(" 4.常量赋值后不可以修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    string public name = "Anbang";\n    string public constant NAME = "Anbang";\n\n    function set1() external{\n        name = "Anbang Chu";\n    }\n\n    // function set2() external{\n    //     // Cannot assign to a constant variable.\n    //     NAME = "Anbang Chu";\n    // }\n}\n')])])]),a("h3",{attrs:{id:"_5-常量必须声明和初始化一起做掉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-常量必须声明和初始化一起做掉"}},[t._v("#")]),t._v(" 5.常量必须声明和初始化一起做掉")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    //  Uninitialized "constant" variable.\n    string public constant NAME;\n}\n')])])]),a("h3",{attrs:{id:"_6-常量的值储存原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-常量的值储存原理"}},[t._v("#")]),t._v(" 6.常量的值储存原理")]),t._v(" "),a("ul",[a("li",[t._v("常量的值在编译器确定，因为在编译器确定，所以不能定义在函数内。")]),t._v(" "),a("li",[t._v("编译器并不会为 "),a("code",[t._v("constant")]),t._v(" 常量在 "),a("code",[t._v("storage")]),t._v(" 上预留空间，它们的每次出现都会被替换为相应的常量表达式（它可能被优化器计算为实际的某个值）。")]),t._v(" "),a("li",[t._v("因为不是储存在"),a("code",[t._v("storage")]),t._v(" 上，所以函数内读取常量不算"),a("code",[t._v("view")]),t._v("，可以使用 pure")]),t._v(" "),a("li",[t._v("因为不是储存在"),a("code",[t._v("storage")]),t._v(" 上，所以可以在任意位置定义常量，比如在合约外面")]),t._v(" "),a("li",[t._v("也可以在文件级别定义 constant 变量（0.7.2 之后的特性）。")])]),t._v(" "),a("h4",{attrs:{id:"⓵-不能定义在函数内"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-不能定义在函数内"}},[t._v("#")]),t._v(" ⓵ 不能定义在函数内")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    // The "constant" keyword can only be used for state variables\n    //  or variables at file level.\n    function getName() external pure returns(string memory){\n        string memory constant NAME = "Anbang";\n        return NAME;\n    }\n}\n')])])]),a("h4",{attrs:{id:"⓶-函数内读取常量不属于-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-函数内读取常量不属于-view"}},[t._v("#")]),t._v(" ⓶ 函数内读取常量不属于 view")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo1 {\n    string public constant NAME = "Anbang1";\n    string public name = "Anbang2";\n\n    function getName() external view returns(string memory){\n        return name;\n    }\n\n    function getNAME() external pure returns(string memory){\n        return NAME;\n    }\n}\n')])])]),a("h4",{attrs:{id:"⓷-可以在合约外面定义常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-可以在合约外面定义常量"}},[t._v("#")]),t._v(" ⓷ 可以在合约外面定义常量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstring constant NAME = "Anbang1";\n\ncontract Demo1 {\n    function getNAME() external pure returns(string memory){\n        return NAME;\n    }\n}\n')])])]),a("h4",{attrs:{id:"⓸-常量可以定义在文件中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓸-常量可以定义在文件中"}},[t._v("#")]),t._v(" ⓸ 常量可以定义在文件中")]),t._v(" "),a("p",[a("code",[t._v("info.sol")]),t._v(" 文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstring constant NAME1 = "Anbang1";\nstring constant NAME2 = "Anbang2";\n')])])]),a("p",[a("code",[t._v("demo.sol")]),t._v(" 文件：引用 info 文件。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport "./info.sol" as INFO;\n\ncontract Demo1 {\n    function getNAME() external pure returns(string memory){\n        return INFO.NAME1;\n    }\n}\n')])])]),t._v(" "),a("h3",{attrs:{id:"_7-引用类型支持-string-和-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-引用类型支持-string-和-bytes"}},[t._v("#")]),t._v(" 7.引用类型支持 string 和 bytes")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // string <=> bytes\n    string public constant NAME1 = "Anbang1";\n    bytes public  constant NAME2 = "Anbang1";\n\n    // Only constants of value type and byte array type are implemented.\n    // uint256[] public constant  NAME3 = [1,2,3];\n}\n')])])]),a("h3",{attrs:{id:"_8-常见的赋值方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-常见的赋值方式"}},[t._v("#")]),t._v(" 8.常见的赋值方式")]),t._v(" "),a("p",[t._v("如果状态变量声明为 "),a("code",[t._v("constant")]),t._v("(常量)。在这种情况下，只能使用那些在编译时有确定值的表达式来给它们赋值。")]),t._v(" "),a("ul",[a("li",[t._v("允许可能对内存分配产生 side effect（副作用）的表达式，但那些可能对其他内存对象产生副作用的表达式则不允许。\n"),a("ul",[a("li",[t._v("内建（built-in）函数 "),a("code",[t._v("keccak256")]),t._v(" ， "),a("code",[t._v("sha256")]),t._v(" ， "),a("code",[t._v("ripemd160")]),t._v(" ，"),a("code",[t._v("ecrecover")]),t._v(" ， "),a("code",[t._v("addmod")]),t._v(" 和 "),a("code",[t._v("mulmod")]),t._v("是允许的（即使他们确实会调用外部合约， "),a("code",[t._v("keccak256")]),t._v(" 除外）。")]),t._v(" "),a("li",[t._v("允许内存分配器的副作用的原因是它可以构造复杂的对象，例如：查找表（lookup-table）。 此功能尚不完全可用。")])])])]),t._v(" "),a("h4",{attrs:{id:"⓵-运算符赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-运算符赋值"}},[t._v("#")]),t._v(" ⓵ 运算符赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo1 {\n    uint256 public constant VERSION = 1+1;\n\n    // 100个ETH\n    // 100000000000000000000\n    uint256 public  constant VALUE = 100 * 10**18; // 运算符赋值\n\n    // 1小时\n    uint256 public  constant H = 60 * 60;\n}\n")])])]),a("h4",{attrs:{id:"⓶-使用-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-使用-address"}},[t._v("#")]),t._v(" ⓶ 使用 address")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    address public constant ZERO = address(0);\n}\n")])])]),a("h4",{attrs:{id:"⓷-密码学函数赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-密码学函数赋值"}},[t._v("#")]),t._v(" ⓷ 密码学函数赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public constant a = addmod(4, 5, 3);\n    uint256 public constant b = mulmod(4, 5, 3);\n    bytes32 public constant c1 = sha256("Hello");\n    bytes32 public constant c2 = ripemd160("Hello");\n    bytes32 public constant myBytes32 = keccak256("Hello");\n}\n')])])]),a("h4",{attrs:{id:"⓸-禁止的一些赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓸-禁止的一些赋值"}},[t._v("#")]),t._v(" ⓸ 禁止的一些赋值")]),t._v(" "),a("p",[t._v("不允许使用状态变量/区块链数据来赋值，也不允许外部合约调用来赋值。")]),t._v(" "),a("ul",[a("li",[t._v("任何通过访问 storage，区块链数据（例如 "),a("code",[t._v("block.timestamp")]),t._v(","),a("code",[t._v("address(this).balance")]),t._v(" 或者 "),a("code",[t._v("block.number")]),t._v("）或执行数据（ "),a("code",[t._v("msg.value")]),t._v(" 或"),a("code",[t._v("gasleft()")]),t._v(" ） 或对外部合约的调用来给它们赋值都是不允许的。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    address public ads1 = msg.sender;\n    // address public constant ads2 = msg.sender;\n}\n")])])]),a("h2",{attrs:{id:"_3️⃣-immutable-不可变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-immutable-不可变量"}},[t._v("#")]),t._v(" 3️⃣ Immutable 不可变量")]),t._v(" "),a("p",[t._v("上一节我们学习了常量，常量的值是在编译器确定，因为在编译器确定，常量必须声明和初始化一起做掉，否则编译不通过。这就给很多只需要一次赋值，但是又必须需要动态赋值的场景带来了不变。比如合约的 owner 地址等场景。")]),t._v(" "),a("p",[t._v("然后上面的苦恼，可以通过不可变量来解决。如果我们想要一个变量，赋值后就不可以修改，而且值是部署时候动态赋值，那么可以使用不可变量的类型。通过 "),a("code",[t._v("immutable")]),t._v(" 关键字可以声明为不可变量，不可变量的限制要比声明为常量("),a("code",[t._v("constant")]),t._v(") 的变量的限制少：")]),t._v(" "),a("p",[t._v("不可变量可以声明和赋值一起做掉，也可以 storage 中声明，在合约的构造函数中赋值。无论在哪里赋值，只能赋值一次，也带来更多的安全性。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原理")]),t._v(": 在部署的时候确定变量的值，它是一个运行时赋值。\n"),a("ul",[a("li",[t._v("扩展了解: 如果要将编译器生成的运行时代码与实际存储在区块链中的代码进行比较，需要明白：编译器生成的合约创建代码将在返回合约之前"),a("strong",[t._v("修改合约的运行时代码")]),t._v("，方法是将对不可变量的所有引用替换为分配给它们的值。")])])]),t._v(" "),a("li",[a("strong",[t._v("特点")]),t._v(":它既有 constant 常量不可修改和 Gas 费用低的优势，又有变量动态赋值的优势。\n"),a("ul",[a("li",[t._v("Solidity "),a("code",[t._v("immutable")]),t._v(" 是另一种常量的表达方式。")])])]),t._v(" "),a("li",[a("strong",[t._v("原则")]),t._v(":\n"),a("ul",[a("li",[a("code",[t._v("immutable")]),t._v(" 可以声明和初始化一起做掉，也可以部署时在"),a("code",[t._v("constructor")]),t._v("中做掉。")]),t._v(" "),a("li",[a("code",[t._v("immutable")]),t._v(" 必须在"),a("code",[t._v("constructor")]),t._v("运行截止时就赋值")]),t._v(" "),a("li",[a("code",[t._v("immutable")]),t._v(" 不能用在引用数据类型上\n"),a("ul",[a("li",[t._v("当前"),a("code",[t._v("constant")]),t._v("支持字符串,"),a("code",[t._v("immutable")]),t._v("不支持字符串")])])])])]),t._v(" "),a("li",[a("strong",[t._v("应用场景")]),t._v("：\n"),a("ul",[a("li",[t._v("在创建不可转移的 "),a("code",[t._v("owner")]),t._v(" 时")]),t._v(" "),a("li",[t._v("在创建 ERC20 的 "),a("code",[t._v("name")]),t._v(","),a("code",[t._v("symbol")]),t._v(","),a("code",[t._v("decimals")]),t._v(" 时")])])])]),t._v(" "),a("h3",{attrs:{id:"本节配套视频-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-3"}},[t._v("#")]),t._v(" 本节配套视频")]),t._v(" "),a("ul",[a("li",[t._v("BiliBili: "),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=48",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])]),t._v(" "),a("li",[t._v("Youtube: "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=HAA1x_1U_Kc&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=48",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])])]),t._v(" "),a("h3",{attrs:{id:"_1-声明和初始化一起做掉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-声明和初始化一起做掉"}},[t._v("#")]),t._v(" 1.声明和初始化一起做掉")]),t._v(" "),a("p",[t._v("像常量一样赋值:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256 public constant U1 = 123;\n    uint256 public immutable u2 = 456;\n}\n")])])]),a("h3",{attrs:{id:"_2-声明后在-constructor-中赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-声明后在-constructor-中赋值"}},[t._v("#")]),t._v(" 2.声明后在 "),a("code",[t._v("constructor")]),t._v(" 中赋值")]),t._v(" "),a("h4",{attrs:{id:"⓵-constructor-正常赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-constructor-正常赋值"}},[t._v("#")]),t._v(" ⓵ constructor 正常赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("address public immutable adsImmut;\nconstructor() {\n    adsImmut = msg.sender;\n}\n")])])]),a("h4",{attrs:{id:"⓶-constructor-参数赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-constructor-参数赋值"}},[t._v("#")]),t._v(" ⓶ constructor 参数赋值")]),t._v(" "),a("p",[t._v("赋值 owner 例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("address public immutable adsImmut;\nconstructor(address _owner) {\n    adsImmut = _owner;\n}\n")])])]),a("p",[t._v("使用参数的属性：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public immutable decimals;\n    uint256 public immutable maxBalance;\n\n    constructor(uint256 decimals_, address ref) {\n        decimals = decimals_;\n        // 可以访问属性\n        maxBalance = ref.balance;\n    }\n}\n")])])]),a("h4",{attrs:{id:"⓷-constructor-内使用函数的结果赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-constructor-内使用函数的结果赋值"}},[t._v("#")]),t._v(" ⓷ constructor 内使用函数的结果赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract C {\n    uint256 public immutable decimals;\n\n    constructor() {\n        decimals = get();\n    }\n\n    function get() internal pure returns(uint256){\n        return 18;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_3-部署后不可以修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-部署后不可以修改"}},[t._v("#")]),t._v(" 3.部署后不可以修改")]),t._v(" "),a("p",[t._v("注意点：不可变量只能赋值一次，以后就不能再次改变了")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract A {\n    address public immutable adsImmut;\n    address public immutable ads = address(0);\n\n    constructor() {\n        adsImmut = msg.sender;\n\n        // Immutable state variable already initialized.\n        // ads = msg.sender;\n    }\n\n    // immutable 部署后不可以修改，如果尝试修改immutable类型变量，会报错\n    // Cannot write to immutable here: Immutable variables can only\n    // be initialized inline or assigned directly in the constructor.\n    // function changeImmutable() external {\n    //     adsImmut = msg.sender;\n    // }\n}\n")])])]),a("h3",{attrs:{id:"_4-不可以在赋值前读取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-不可以在赋值前读取"}},[t._v("#")]),t._v(" 4.不可以在赋值前读取")]),t._v(" "),a("p",[t._v("并且在赋值之后才可以读取 immutable 变量，如果赋值之前读取会报错。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract A {\n    address public immutable adsImmut;\n    address public ads;\n\n    constructor() {\n        // Immutable variables cannot be read before they are initialized.\n        // ads = adsImmut;\n\n        adsImmut = msg.sender;\n        ads = adsImmut;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_5-不可以在-constructor-之外赋值其他不可变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-不可以在-constructor-之外赋值其他不可变量"}},[t._v("#")]),t._v(" 5.不可以在 "),a("code",[t._v("constructor")]),t._v(" 之外赋值其他不可变量")]),t._v(" "),a("p",[t._v("不可变量可以在声明时赋值，不过只有在合约的构造函数执行时才被视为视为初始化。这意味着，你不能用一个依赖于不可变量的值初始化另一个不可变量。")]),t._v(" "),a("p",[t._v("因为不可变量在构造函数中才真正赋值，所以在合约的构造函数中这样做。这样的机制是为了防止对状态变量初始化和构造函数顺序的不同解释，特别是继承时，出现问题。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint256 public a1 = 1;\n    uint256 public a2 = a1;\n\n    uint256 public immutable b1 = 1;\n    // Immutable variables cannot be read before they are initialized.\n    // uint256 public b2 = b1;\n    uint256 public b2;\n\n    uint256 public immutable b3;\n\n    constructor() {\n        b2 = b1;\n        b3 = b1;\n    }\n}\n")])])]),a("p",[t._v("核心：在部署的时候确定变量的值，它是一个运行时赋值。")]),t._v(" "),a("h3",{attrs:{id:"_6-immutable-不能用在引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-immutable-不能用在引用数据类型"}},[t._v("#")]),t._v(" 6."),a("code",[t._v("immutable")]),t._v(" 不能用在引用数据类型")]),t._v(" "),a("p",[t._v("当前"),a("code",[t._v("constant")]),t._v("支持引用类型中的 "),a("code",[t._v("string")]),t._v("和 "),a("code",[t._v("bytes")]),t._v("，"),a("code",[t._v("immutable")]),t._v("不支持任何引用数据类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    string public constant TEXT1 = "abc";\n    // string public immutable TEXT2 = "abc"; // ❌\n\n    bytes public constant BYTES1 = "abc";\n    // bytes public immutable BYTES2 = "abc"; // ❌\n\n    // Immutable variables cannot have a non-value type.\n    // mapping(address => uint256) public immutable mp;\n\n    struct Book {\n        string title;\n        string author;\n        uint256 book_id;\n    }\n\n    // Immutable variables cannot have a non-value type.\n    // Book public immutable book1; // 一本书\n}\n')])])]),a("h3",{attrs:{id:"_7-不同状态变量的-gas-对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-不同状态变量的-gas-对比"}},[t._v("#")]),t._v(" 7.不同状态变量的 gas 对比")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract A {\n    // 23597 gas\n    address public ads1 = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n\n    // 21486 gas\n    address public constant MY_ADDRESS =\n        0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n\n    // 21442 gas\n    address public immutable adsImmut1 =\n        0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n\n    // 21420 gas\n    address public immutable adsImmut2;\n\n    constructor() {\n        adsImmut2 = msg.sender;\n    }\n}\n")])])]),a("ul",[a("li",[a("strong",[t._v("状态变量")]),t._v(": "),a("code",[t._v("23597")]),t._v(" gas")]),t._v(" "),a("li",[a("strong",[t._v("常量")]),t._v(": "),a("code",[t._v("21486")]),t._v(" gas")]),t._v(" "),a("li",[a("strong",[t._v("不可变量")]),t._v(": "),a("code",[t._v("21442")]),t._v(" gas")])]),t._v(" "),a("p",[a("strong",[t._v("备注")]),t._v(": 修改变量顺序，或者声明变量的数量，也会影响 gas 的消耗。可以自己亲自测试下。")]),t._v(" "),a("p",[t._v("通过对比可以发现，它既有 constant 常量不可修改和 Gas 费用低的优势，又有变量动态赋值的优势。")]),t._v(" "),a("p",[t._v("不可变变量在构造时进行一次求值，并将其值复制到代码中访问它们的所有位置。 对于这些值，将保留 32 个字节，即使它们适合较少的字节也是如此。很多时候常量的 gas 更低。下面是 uint8 类型的例子")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("contract Demo {\n    // 23532 gas\n    uint8 public u1 = 1;\n    // 21377\n    uint8 public constant U2 = 1;\n\n    // 21421\n    uint8 public immutable u2 = 1;\n\n    // 21443\n    uint8 public immutable u3;\n\n    constructor(){\n        u3  = 1;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_8-constant-和-immutable-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-constant-和-immutable-总结"}},[t._v("#")]),t._v(" 8.constant 和 immutable 总结")]),t._v(" "),a("h4",{attrs:{id:"⓵-值的确定时机不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-值的确定时机不同"}},[t._v("#")]),t._v(" ⓵ 值的确定时机不同")]),t._v(" "),a("p",[t._v("状态变量声明为 constant (常量)或者 immutable （不可变量），在这两种情况下，合约一旦部署之后，变量将不在修改。")]),t._v(" "),a("ul",[a("li",[t._v("对于 constant 常量, 他的值在编译器确定.")]),t._v(" "),a("li",[t._v("对于 immutable, 它的值在部署时确定。")])]),t._v(" "),a("h4",{attrs:{id:"⓶-gas-不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-gas-不同"}},[t._v("#")]),t._v(" ⓶ gas 不同")]),t._v(" "),a("p",[t._v("与常规状态变量相比，常量和不可变量的 gas 成本要低得多。")]),t._v(" "),a("ul",[a("li",[t._v("对于常量，赋值给它的表达式将复制到所有访问该常量的位置，并且每次都会对其进行重新求值。这样可以进行本地优化。")]),t._v(" "),a("li",[t._v("不可变变量在构造时进行一次求值，并将其值复制到代码中访问它们的所有位置。 对于这些值，将保留 32 个字节，即使它们适合较少的字节也是如此。很多时候常量的 gas 更低。")])]),t._v(" "),a("p",[t._v("如果可以使用常量的时候，推荐使用常量。")]),t._v(" "),a("h4",{attrs:{id:"⓷-支持的数据不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-支持的数据不同"}},[t._v("#")]),t._v(" ⓷ 支持的数据不同")]),t._v(" "),a("p",[t._v("不是所有类型的状态变量都支持用 "),a("code",[t._v("constant")]),t._v(" 或 "),a("code",[t._v("immutable")]),t._v(" 来修饰")]),t._v(" "),a("ul",[a("li",[t._v("当前"),a("code",[t._v("constant")]),t._v("仅支持值类型和引用类型中的 string 和 bytes")]),t._v(" "),a("li",[a("code",[t._v("immutable")]),t._v("仅支持值类型")])]),t._v(" "),a("h2",{attrs:{id:"_4️⃣-变量名的命名规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-变量名的命名规则"}},[t._v("#")]),t._v(" 4️⃣ 变量名的命名规则")]),t._v(" "),a("p",[t._v("在为变量命名时，请记住以下规则：")]),t._v(" "),a("ul",[a("li",[t._v("禁止使用"),a("strong",[t._v("保留关键字")]),t._v("作为变量名。")]),t._v(" "),a("li",[t._v("变量名首字母禁止使用数字，必须以字母或下划线开头。")]),t._v(" "),a("li",[t._v("变量名大小写敏感。")])]),t._v(" "),a("h3",{attrs:{id:"本节配套视频-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-4"}},[t._v("#")]),t._v(" 本节配套视频")]),t._v(" "),a("ul",[a("li",[t._v("BiliBili: "),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=49",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])]),t._v(" "),a("li",[t._v("Youtube: "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=eoi12KYJjww&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=49",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])])]),t._v(" "),a("h3",{attrs:{id:"_1-禁止使用保留关键字作为变量名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-禁止使用保留关键字作为变量名"}},[t._v("#")]),t._v(" 1.禁止使用"),a("strong",[t._v("保留关键字")]),t._v("作为变量名")]),t._v(" "),a("p",[t._v("禁止使用"),a("strong",[t._v("保留关键字")]),t._v("作为变量名。例如："),a("code",[t._v("break")]),t._v(" / "),a("code",[t._v("boolean")]),t._v(" / "),a("code",[t._v("contract")]),t._v(" 这些是无效的变量名。")]),t._v(" "),a("ul",[a("li",[t._v("abstract")]),t._v(" "),a("li",[t._v("after")]),t._v(" "),a("li",[t._v("alias")]),t._v(" "),a("li",[t._v("apply")]),t._v(" "),a("li",[t._v("auto")]),t._v(" "),a("li",[t._v("case")]),t._v(" "),a("li",[t._v("catch")]),t._v(" "),a("li",[t._v("copyof")]),t._v(" "),a("li",[t._v("default")]),t._v(" "),a("li",[t._v("define")]),t._v(" "),a("li",[t._v("final")]),t._v(" "),a("li",[t._v("immutable")]),t._v(" "),a("li",[t._v("implements")]),t._v(" "),a("li",[t._v("in")]),t._v(" "),a("li",[t._v("inline")]),t._v(" "),a("li",[t._v("let")]),t._v(" "),a("li",[t._v("macro")]),t._v(" "),a("li",[t._v("match")]),t._v(" "),a("li",[t._v("mutable")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("of")]),t._v(" "),a("li",[t._v("override")]),t._v(" "),a("li",[t._v("partial")]),t._v(" "),a("li",[t._v("promise")]),t._v(" "),a("li",[t._v("reference")]),t._v(" "),a("li",[t._v("relocatable")]),t._v(" "),a("li",[t._v("sealed")]),t._v(" "),a("li",[t._v("sizeof")]),t._v(" "),a("li",[t._v("static")]),t._v(" "),a("li",[t._v("supports")]),t._v(" "),a("li",[t._v("switch")]),t._v(" "),a("li",[t._v("try")]),t._v(" "),a("li",[t._v("typedef")]),t._v(" "),a("li",[t._v("typeof")]),t._v(" "),a("li",[t._v("unchecked")])]),t._v(" "),a("h3",{attrs:{id:"_2-变量名必须以字母或者下划线开头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量名必须以字母或者下划线开头"}},[t._v("#")]),t._v(" 2.变量名必须以字母或者下划线开头")]),t._v(" "),a("p",[t._v("禁止使用数字作为变量名的开始，例如："),a("code",[t._v("123abc")]),t._v(" 是一个无效的变量名，但是 "),a("code",[t._v("_123abc")]),t._v(" 是一个有效的变量名。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint8 public abc = 1;\n    uint8 public _123abc = 1;\n\n    // Expected identifier but got 'ILLEGAL'\n    uint8 public 123abc = 1;\n}\n")])])]),a("h3",{attrs:{id:"_3-变量名大小写敏感"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量名大小写敏感"}},[t._v("#")]),t._v(" 3.变量名大小写敏感")]),t._v(" "),a("p",[t._v("例如：Name 和 name 是两个不同的变量。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    string public name = "Anbang";\n    string public constant Name = "Anbang";\n}\n')])])]),a("h2",{attrs:{id:"_5️⃣-变量的可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-变量的可见性"}},[t._v("#")]),t._v(" 5️⃣ 变量的可见性")]),t._v(" "),a("p",[t._v("可见性仅存在于状态变量和函数中")]),t._v(" "),a("ul",[a("li",[t._v("局部变量的可见性仅限于定义它们的函数，函数有四可见型，分别是 "),a("code",[t._v("private")]),t._v(" / "),a("code",[t._v("external")]),t._v(" / "),a("code",[t._v("internal")]),t._v(" / "),a("code",[t._v("public")])]),t._v(" "),a("li",[t._v("状态变量可以有三种可见型，分别是 "),a("code",[t._v("private")]),t._v(" / "),a("code",[t._v("internal")]),t._v(" / "),a("code",[t._v("public")])])]),t._v(" "),a("p",[t._v("我们这里重点介绍状态变量可见型。")]),t._v(" "),a("p",[t._v("internal 和 private 类型的变量不能被外部访问，而 public 变量能够被外部访问。")]),t._v(" "),a("p",[t._v("警告: 设置为 "),a("code",[t._v("private")]),t._v("或 "),a("code",[t._v("internal")]),t._v("，只能防止其他合约读取或修改信息，但它仍然可以在链外查看到。你不要想着通过设置可见型，让别人看不到你的代码。反编译可以得到大部分需要的逻辑。")]),t._v(" "),a("h3",{attrs:{id:"本节配套视频-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-5"}},[t._v("#")]),t._v(" 本节配套视频")]),t._v(" "),a("ul",[a("li",[t._v("BiliBili: "),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=50",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])]),t._v(" "),a("li",[t._v("Youtube: "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=Bi25cUElsDA&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=50",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])])]),t._v(" "),a("h3",{attrs:{id:"_1-private"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-private"}},[t._v("#")]),t._v(" 1.private")]),t._v(" "),a("p",[a("strong",[t._v("private")]),t._v(": 私有，仅在当前合约中可以访问")]),t._v(" "),a("p",[t._v("在继承的合约内不可访问，私有状态变量就像内部变量一样，但它们在派生合约中是不可见的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint8 private a = 1;\n\n    // 这里使用 view 不是 pure\n    // 不能因为 private 对外不可见就想着用pure，\n    // 这个状态可变形是根据存储空间来决定的\n    function getA() public view returns(uint8){\n        return a;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_2-internal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-internal"}},[t._v("#")]),t._v(" 2.internal")]),t._v(" "),a("p",[a("strong",[t._v("internal")]),t._v(": 内部可视(合约内部和被继承的子合约中都可视)")]),t._v(" "),a("ul",[a("li",[t._v("状态变量如果不显示声明，默认是 "),a("strong",[t._v("internal")]),t._v(" 权限")]),t._v(" "),a("li",[t._v("内部可见性状态变量只能在它们所定义的合约和派生合同中访问。 它们不能被外部访问。 这是状态变量的默认可见性。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint8 internal a = 1;\n\n    function getA() public view returns(uint8){\n        return a;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_3-external"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-external"}},[t._v("#")]),t._v(" 3.external")]),t._v(" "),a("p",[a("strong",[t._v("external")]),t._v(": 外部可视(合约外部可视，在内部是不可见)")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("external")]),t._v(" 不能声明在状态变量上，只能标识在函数上")]),t._v(",因为如果一个状态变量在合约自身如果没有办法读取的话，那就没有存在的必要了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo {\n    uint8 external a = 1;\n}\n")])])]),a("h3",{attrs:{id:"_4-public"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-public"}},[t._v("#")]),t._v(" 4.public")]),t._v(" "),a("p",[a("strong",[t._v("public")]),t._v(": 公开可视(合约内部，被继承的，外部都可以调用)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    uint8 public a = 1;\n\n    function getA() public view returns (uint8) {\n        return a;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_5-public-自动生成-getter-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-public-自动生成-getter-函数"}},[t._v("#")]),t._v(" 5.public 自动生成 getter 函数")]),t._v(" "),a("p",[t._v("编译器自动为所有 public 状态变量创建 getter 函数.")]),t._v(" "),a("h4",{attrs:{id:"⓵-值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓵-值类型"}},[t._v("#")]),t._v(" ⓵ 值类型")]),t._v(" "),a("p",[t._v("例子：通过其他合约访问")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo {\n    uint8 public a = 1;\n}\ncontract Caller {\n    Demo demo = new Demo();\n    function f() public view returns(uint8 local){\n        local = demo.a();\n    }\n}\n")])])]),a("p",[t._v("例子：合约自身的两种访问")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo {\n    uint8 public a = 1;\n    function x() public returns(uint8 val){\n        a = 3; // 内部访问\n        val = this.a(); // 外部访问\n    }\n}\n")])])]),a("p",[t._v("getter 函数具有外部（"),a("code",[t._v("external")]),t._v("）可见性。")]),t._v(" "),a("ul",[a("li",[t._v("如果在内部访问 getter（即没有 "),a("code",[t._v("this.")]),t._v(" ），它被认为一个状态变量。")]),t._v(" "),a("li",[t._v("如果使用外部访问（即用 "),a("code",[t._v("this.")]),t._v(" ），它被认作为一个函数。")])]),t._v(" "),a("h4",{attrs:{id:"⓶-引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓶-引用类型"}},[t._v("#")]),t._v(" ⓶ 引用类型")]),t._v(" "),a("p",[t._v("数组：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo {\n  uint256[] public myArray=[1,2,3];\n\n  // 指定生成的Getter 函数\n//   function myArray(uint256 i) external view returns (uint256) {\n//       return myArray[i];\n//   }\n}\n")])])]),a("p",[t._v("字符串：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ncontract Demo {\n  string public str = "abc";\n  // 指定生成的Getter 函数\n//   function str() external view returns(string memory s_){\n//       return str;\n//   }\n}\n')])])]),a("h4",{attrs:{id:"⓷-mapping-和-struct-的-getter-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⓷-mapping-和-struct-的-getter-函数"}},[t._v("#")]),t._v(" ⓷ mapping 和 struct 的 getter 函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    struct Data {\n        uint256 a;\n        bytes3 b;\n        mapping (uint256 => uint256) map;\n        uint256[3] c;\n        uint256[] d;\n        bytes e;\n    }\n    mapping (uint256 => mapping(bool => Data[])) public data;\n\n    // function data(uint256 arg1, bool arg2, uint256 arg3)\n    //     external\n    //     returns (uint256 a, bytes3 b, bytes memory e)\n    // {\n    //     a = data[arg1][arg2][arg3].a;\n    //     b = data[arg1][arg2][arg3].b;\n    //     e = data[arg1][arg2][arg3].e;\n    // }\n}\n")])])]),a("p",[t._v("在结构体内的映射和数组（byte 数组除外）被省略了，因为没有好办法为单个结构成员或为映射提供一个键。")]),t._v(" "),a("h2",{attrs:{id:"_6️⃣-全局-时间单位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-全局-时间单位"}},[t._v("#")]),t._v(" 6️⃣ 全局：时间单位")]),t._v(" "),a("p",[t._v("在做时间相关业务时候可以使用 分钟，小时，天，周的概念。")]),t._v(" "),a("h3",{attrs:{id:"本节配套视频-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节配套视频-6"}},[t._v("#")]),t._v(" 本节配套视频")]),t._v(" "),a("ul",[a("li",[t._v("BiliBili: "),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1HR4y197Ag?p=51",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])]),t._v(" "),a("li",[t._v("Youtube: "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=D_1Cdd7_KME&list=PLdXBX6Eqe4Net43OWIZychHW0n6CX_8Ih&index=51",target:"_blank",rel:"noreferrer"}},[t._v("第三章第 1 节: 变量基础知识")])])]),t._v(" "),a("h3",{attrs:{id:"_1-基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本用法"}},[t._v("#")]),t._v(" 1.基本用法")]),t._v(" "),a("p",[t._v("秒是缺省时间单位,可以不写，在时间单位之间，数字后面带有 "),a("code",[t._v("seconds")]),t._v("、 "),a("code",[t._v("minutes")]),t._v("、 "),a("code",[t._v("hours")]),t._v("、 "),a("code",[t._v("days")]),t._v("、 "),a("code",[t._v("weeks")]),t._v(" 可以进行换算，基本换算关系如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("1 == 1 seconds")])]),t._v(" "),a("li",[a("code",[t._v("1 minutes == 60 seconds")])]),t._v(" "),a("li",[a("code",[t._v("1 hours == 60 minutes")])]),t._v(" "),a("li",[a("code",[t._v("1 days == 24 hours")])]),t._v(" "),a("li",[a("code",[t._v("1 weeks == 7 days")])])]),t._v(" "),a("p",[t._v("之前老版本的合约还有 "),a("code",[t._v("years")]),t._v(" 的概念，现在已经不再用了，从 0.5.0 版本不支持使用 "),a("code",[t._v("years")]),t._v(" 了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Time\ncontract Demo {\n    // 定义全局变量\n    uint256 public time;\n\n    constructor() {\n        time = 100000000;\n    }\n\n    function fSeconds() public view returns (uint256) {\n        return time + 1 seconds;\n    }\n\n    function fMinutes() public view returns (uint256) {\n        return time + 1 minutes;\n    }\n\n    function fHours() public view returns (uint256) {\n        return time + 1 hours;\n    }\n\n    function fDays() public view returns (uint256) {\n        return time + 1 days;\n    }\n\n    function fWeeks() public view returns (uint256) {\n        return time + 1 weeks;\n    }\n\n    // 这些后缀不能直接用在变量后边。\n    // 如果想用时间单位来将输入变量换算为时间，你可以用如下方式来完成：\n    function testVar(uint256 daysValue) public view returns (uint256) {\n        return time + daysValue * 1 weeks;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_2-两种时间逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-两种时间逻辑"}},[t._v("#")]),t._v(" 2.两种时间逻辑")]),t._v(" "),a("p",[t._v("注意：由于闰秒造成的每年不都是 365 天、每天不都是 24 小时，所以"),a("strong",[t._v("如果你要使用这些单位计算日期和时间")]),t._v("，请注意这个问题。因为闰秒是无法预测的，所以需要借助外部的预言机来对一个确定的日期代码库进行时间矫正。")]),t._v(" "),a("p",[t._v("时间在项目中有两种逻辑")]),t._v(" "),a("ol",[a("li",[t._v("像之前众筹合约里介绍的那样，使用持续时间来代表时间。比如持续 2 两小时结束，常见于众筹/拍卖合约")]),t._v(" "),a("li",[t._v("到某个时间点开始抢购活动，比如到 XX 年 XX 月 XX 日 XX 分 XX 秒，开启抢购，这种需要借助预言机才能正确完成")])]),t._v(" "),a("p",[t._v("请按照自己的业务需求选择合适的时间方式。")]),t._v(" "),a("h2",{attrs:{id:"_7️⃣-全局-区块和交易属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7️⃣-全局-区块和交易属性"}},[t._v("#")]),t._v(" 7️⃣ 全局：区块和交易属性")]),t._v(" "),a("p",[t._v("分别是 "),a("code",[t._v("block")]),t._v(" / "),a("code",[t._v("msg")]),t._v(" / "),a("code",[t._v("tx")]),t._v(" 三个全局变量，因为功能相似，我们把 "),a("code",[t._v("blockhash()")]),t._v(" 和 "),a("code",[t._v("gasleft()")]),t._v(" 这两个全局函数也一起介绍。")]),t._v(" "),a("h3",{attrs:{id:"_1-预览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-预览"}},[t._v("#")]),t._v(" 1.预览")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称 (返回值)")]),t._v(" "),a("th",[t._v("返回")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("block.basefee (uint256)")]),t._v(" "),a("td",[t._v("当前区块的基本费用（ "),a("a",{attrs:{href:"https://eips.ethereum.org/EIPS/eip-3198",target:"_blank",rel:"noopener noreferrer"}},[t._v("EIP-3198"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://eips.ethereum.org/EIPS/eip-1559",target:"_blank",rel:"noopener noreferrer"}},[t._v("EIP-1559"),a("OutboundLink")],1),t._v("）")])]),t._v(" "),a("tr",[a("td",[t._v("block.chainid (uint256)")]),t._v(" "),a("td",[t._v("当前链 id")])]),t._v(" "),a("tr",[a("td",[t._v("block.difficulty (uint256)")]),t._v(" "),a("td",[t._v("当前区块的难度")])]),t._v(" "),a("tr",[a("td",[t._v("block.gaslimit (uint256)")]),t._v(" "),a("td",[t._v("当前区块的 gaslimit")])]),t._v(" "),a("tr",[a("td",[t._v("block.number (uint256)")]),t._v(" "),a("td",[t._v("当前区块的 number")])]),t._v(" "),a("tr",[a("td",[t._v("block.timestamp (uint256)")]),t._v(" "),a("td",[t._v("当前区块的时间戳，为 unix 纪元以来的秒")])]),t._v(" "),a("tr",[a("td",[t._v("block.coinbase (address payable)")]),t._v(" "),a("td",[t._v("当前区块矿工的地址")])]),t._v(" "),a("tr",[a("td",[t._v("msg.sender (address)")]),t._v(" "),a("td",[t._v("消息发送者 (当前 caller)")])]),t._v(" "),a("tr",[a("td",[t._v("msg.value (uint256)")]),t._v(" "),a("td",[t._v("当前消息的 wei 值")])]),t._v(" "),a("tr",[a("td",[t._v("msg.data (bytes calldata)")]),t._v(" "),a("td",[t._v("完整的 calldata")])]),t._v(" "),a("tr",[a("td",[t._v("msg.sig (bytes4)")]),t._v(" "),a("td",[t._v("calldata 的前四个字节"),a("br"),t._v("– (function identifier/即函数标识符)")])]),t._v(" "),a("tr",[a("td",[t._v("tx.gasprice (uint256)")]),t._v(" "),a("td",[t._v("交易的 gas 价格")])]),t._v(" "),a("tr",[a("td",[t._v("tx.origin (address)")]),t._v(" "),a("td",[t._v("交易的发送方 （完整的调用链）")])]),t._v(" "),a("tr",[a("td",[t._v("blockhash(uint256 blockNumber) returns (bytes32)")]),t._v(" "),a("td",[t._v("给定区块的哈希值"),a("br"),t._v("– 只适用于 256 最近区块, 不包含当前区块")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("gasleft() returns (uint256)")])]),t._v(" "),a("td",[t._v("剩余 gas")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-block"}},[t._v("#")]),t._v(" 2.block")]),t._v(" "),a("p",[t._v("全局变量 block，除了 coinbase 属性的返回值是 address 类型，其他都是 uint256。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    // payable address 类型\n    address payable public ads;\n\n    function blockInfo() public\n    returns (\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address\n        )\n    {\n       uint256 basefee = block.basefee;\n       uint256 chainid = block.chainid;\n       uint256 difficulty = block.difficulty;\n       uint256 gaslimit = block.gaslimit;\n       uint256 number = block.number;\n       uint256 timestamp = block.timestamp;\n\n       // 除了 coinbase 返回值是 payable address 类型，其他都是 uint256\n       address coinbase = block.coinbase;\n       ads = block.coinbase; // 赋值给 payable address 的变量\n\n       return (\n           basefee,\n           chainid,\n           difficulty,\n           gaslimit,\n           number,\n           timestamp,\n           coinbase\n       );\n    }\n}\n")])])]),a("h3",{attrs:{id:"_3-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-msg"}},[t._v("#")]),t._v(" 3.msg")]),t._v(" "),a("ul",[a("li",[t._v("msg.sender: 只能赋值给普通 address 的变量")]),t._v(" "),a("li",[t._v("msg.value: 必须用在 payable 函数上")]),t._v(" "),a("li",[t._v("msg.data: 如果函数不接受参数 msg.data 等于 sig")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Demo {\n    address payable public ads1;\n    address public ads2;\n\n    function msgInfo(uint256 u_)\n        public\n        payable\n        returns (\n            uint256,\n            bytes memory,\n            bytes4\n        )\n    {\n        ads2 = msg.sender; // 只能赋值给普通 address 的变量\n        uint256 value = msg.value; // 必须用在 payable 函数上\n        bytes memory data = msg.data; // 如果函数不接受参数 msg.data 等于 sig\n        bytes4 sig = msg.sig;\n        return (value,data,sig);\n    }\n}\n")])])]),a("h3",{attrs:{id:"_4-tx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tx"}},[t._v("#")]),t._v(" 4.tx")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract Demo {\n    address payable public ads1;\n    address public ads2;\n\n    function txInfo() public returns (uint256) {\n        ads2 = tx.origin; // 只能赋值给普通 address 的变量\n        uint256 gasprice = tx.gasprice;\n        return gasprice;\n    }\n}\n")])])]),a("h3",{attrs:{id:"_5-blockhash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-blockhash"}},[t._v("#")]),t._v(" 5.blockhash()")]),t._v(" "),a("p",[t._v("这是获取最近 256 个区块高度的 hash 值，如果获取当前的区块 hash 是没办法获取到的。（因为当前的数据还没有被打包，没有被确定）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract Demo {\n    uint256 public blockNumber;\n\n    function blockInfo1() public returns (uint256, bytes32) {\n        blockNumber = block.number;\n        bytes32 hashCurrent = blockhash(blockNumber); // 不包含当前区块\n\n        return (block.number, hashCurrent);\n    }\n\n    function blockInfo2() public view returns (uint256, bytes32) {\n        bytes32 hash = blockhash(blockNumber);\n        // errored: Key not found in database [h n]\n        return (block.number, hash);\n    }\n}\n")])])]),a("h3",{attrs:{id:"_6-gasleft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-gasleft"}},[t._v("#")]),t._v(" 6.gasleft()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract Demo {\n    function gas() public view returns (uint256) {\n        return gasleft();\n    }\n}\n")])])]),a("h3",{attrs:{id:"_7-已经删除的全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-已经删除的全局变量"}},[t._v("#")]),t._v(" 7.已经删除的全局变量")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("返回")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("block.blockhash")])]),t._v(" "),a("td",[t._v("给定区块的哈希值;在 0.5.0 版本中删除,现使用"),a("code",[t._v("blockhash()")]),t._v("获取")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("now(uint256)")])]),t._v(" "),a("td",[t._v("block.timestamp 的别名;在 0.7.0 版中删除")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("msg.gas")])]),t._v(" "),a("td",[t._v("剩余 gas; 在 0.5.0 版中删除,现使用 "),a("code",[t._v("gasleft()")]),t._v(" 获取")])])])]),t._v(" "),a("h3",{attrs:{id:"_8-使用注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-使用注意"}},[t._v("#")]),t._v(" 8.使用注意")]),t._v(" "),a("p",[t._v("不要依赖 "),a("code",[t._v("block.timestamp")]),t._v(" 和 "),a("code",[t._v("blockhash")]),t._v(" 产生随机数，除非你已经知道后果，并且后果对项目没有影响。")]),t._v(" "),a("p",[t._v("时间戳和区块哈希在一定程度上都可能受到挖矿矿工影响。例如，某个抽奖合约使用 "),a("code",[t._v("block.timestamp")]),t._v(" 或 "),a("code",[t._v("blockhash")]),t._v(" 产生随机数，但是恶意矿工可以进行一直发起，如果他们没有中奖就取消交易，只需重试不同的交易就可以刷出中奖的交易并且发出去。")]),t._v(" "),a("p",[t._v("当前区块的时间戳会严格大于最后一个区块的时间戳，但是这里唯一能确保的: 它会是在权威链上的两个连续区块的时间戳之间的数值。")]),t._v(" "),a("h2",{attrs:{id:"️⃣-问答题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#️⃣-问答题"}},[t._v("#")]),t._v(" #️⃣ 问答题")]),t._v(" "),a("ul",[a("li",[t._v("不同类型的变量初始默认值是什么？"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  string public str; // ""\n  bool public b; // false\n  uint256 public count; // 0\n  int256 public intValue; // 0\n  address public ads; // 0x0000000000000000000000000000000000000000\n  bytes32 public bt32; // 0x0000000000000000000000000000000000000000000000000000000000000000\n')])])])]),t._v(" "),a("li",[t._v("聊一聊变量的作用域\n"),a("ul",[a("li",[t._v("Solidity 中的作用域规则遵循了 C99：变量将会从它们被声明之后可见，直到一对 "),a("code",[t._v("{}")]),t._v(" 块的结束。对于参数形式的变量（例如：函数参数、修饰器参数、catch 参数等等）在其后接着的代码块内有效。 这些代码块是函数的实现，catch 语句块等。作为一个例外，在 for 循环语句中初始化的变量，其可见性仅维持到 "),a("code",[t._v("for")]),t._v(" 循环的结束。")]),t._v(" "),a("li",[t._v("那些定义在代码块之外的变量，比如函数、合约、自定义类型等等，并不会影响它们的作用域特性。这意味着你可以在实际声明状态变量的语句之前就使用它们，并且递归地调用函数。")])])]),t._v(" "),a("li",[t._v("聊一聊"),a("code",[t._v("状态变量")]),t._v("/"),a("code",[t._v("局部变量")]),t._v("/"),a("code",[t._v("全局变量")]),t._v("（3 种变量状态）。\n"),a("ul",[a("li",[t._v("状态变量:\n"),a("ul",[a("li",[t._v("变量值永久保存在智能合约存储空间中，相当于属于已经写入到区块链中，可以随时调用，除非该条链消失。")]),t._v(" "),a("li",[t._v("特点:定义在智能合约的存储空间中")])])]),t._v(" "),a("li",[t._v("局部变量:\n"),a("ul",[a("li",[t._v("变量值仅在函数执行过程中有效,供函数内部使用；调用函数时，在虚拟机的内存中；函数退出后，变量无效。")]),t._v(" "),a("li",[t._v("特点: 定义在函数内部")])])]),t._v(" "),a("li",[t._v("全局变量:\n"),a("ul",[a("li",[t._v("保存在全局命名空间，用于获取区块链相关信息的特殊变量。")]),t._v(" "),a("li",[t._v("特点:不用定义，直接获取即可。")])])])])]),t._v(" "),a("li",[t._v("Constant 常量使用时有哪些需要注意的？\n"),a("ul",[a("li",[t._v("普通的状态变量，添加 "),a("code",[t._v("constant")]),t._v(" 关键词即可声明为常量")]),t._v(" "),a("li",[t._v("与常规状态变量相比，常量的 gas 要低很多。")]),t._v(" "),a("li",[t._v("常量的名字，一般使用全大写的。")]),t._v(" "),a("li",[t._v("常量赋值后不可以修改。")]),t._v(" "),a("li",[t._v("常量必须声明和初始化一起做掉，否则编译不通过。\n"),a("ul",[a("li",[t._v("对于 constant 常量, 他的值在编译器确定，不能定义在函数内")])])]),t._v(" "),a("li",[t._v("不是所有的类型都支持常量，当前支持的仅有"),a("strong",[t._v("值类型")]),t._v("（包括地址类型）/"),a("strong",[t._v("字符串")]),t._v("。")]),t._v(" "),a("li",[t._v("编译器并不会为 "),a("code",[t._v("constant")]),t._v(" 常量在 "),a("code",[t._v("storage")]),t._v(" 上预留空间\n"),a("ul",[a("li",[t._v("编译器不会为这些变量预留存储位，它们的每次出现都会被替换为相应的常量表达式（它可能被优化器计算为实际的某个值）。")])])]),t._v(" "),a("li",[t._v("也可以在文件级别定义 constant 变量\n"),a("ul",[a("li",[t._v("注：0.7.2 之后加入的特性。")])])]),t._v(" "),a("li",[t._v("可以使用内建函数赋值常量")])])]),t._v(" "),a("li",[t._v("Immutable 不可变量使用时有哪些需要注意的？\n"),a("ul",[a("li",[a("strong",[t._v("赋值方式")]),t._v(": "),a("code",[t._v("immutable")]),t._v(" 修饰的变量是在部署的时候确定变量的值，"),a("strong",[t._v("它在构造函数中赋值一次之后,以后就不不能再次改变了")]),t._v("，它是一个运行时赋值。同时也带来更多的安全性。")]),t._v(" "),a("li",[a("strong",[t._v("特点")]),t._v(":它既有 constant 常量不可修改和 Gas 费用低的优势，又有变量动态赋值的优势。\n"),a("ul",[a("li",[t._v("Solidity "),a("code",[t._v("immutable")]),t._v(" 是另一种常量的表达方式。")])])]),t._v(" "),a("li",[a("strong",[t._v("原则")]),t._v(":\n"),a("ul",[a("li",[a("code",[t._v("immutable")]),t._v(" 可以声明和初始化一起做掉，也可以部署时在"),a("code",[t._v("constructor")]),t._v("中做掉。（必须在"),a("code",[t._v("constructor")]),t._v("运行截止时就赋值，也支持在构造函数内使用普通函数的结果来赋值）")]),t._v(" "),a("li",[a("code",[t._v("immutable")]),t._v(" 不能用在引用数据类型上（当前"),a("code",[t._v("constant")]),t._v("支持字符串,"),a("code",[t._v("immutable")]),t._v("不支持字符串）")])])]),t._v(" "),a("li",[a("strong",[t._v("应用场景")]),t._v("：\n"),a("ul",[a("li",[t._v("在创建不可转移的 "),a("code",[t._v("owner")]),t._v(" 时")]),t._v(" "),a("li",[t._v("在创建 ERC20 的 "),a("code",[t._v("name")]),t._v(","),a("code",[t._v("symbol")]),t._v(","),a("code",[t._v("decimals")]),t._v(" 时")])])])])]),t._v(" "),a("li",[t._v("状态变量/constant/Immutable 三者的 gas 区别\n"),a("ul",[a("li",[t._v("对于常量，赋值给它的表达式将复制到所有访问该常量的位置，并且每次都会对其进行重新求值。这样可以进行本地优化。")]),t._v(" "),a("li",[t._v("不可变变量在构造时进行一次求值，并将其值复制到代码中访问它们的所有位置。 对于这些值，将保留 32 个字节，即使它们适合较少的字节也是如此。 因此，常量有时可能比不可变量更便宜。")]),t._v(" "),a("li",[t._v("状态变量声明为 constant (常量)或者 immutable （不可变量），在这两种情况下，合约一旦部署之后，变量将不在修改。")]),t._v(" "),a("li",[t._v("对于 constant 常量, 他的值在编译器确定.")]),t._v(" "),a("li",[t._v("对于 immutable, 它的值在部署时确定。")]),t._v(" "),a("li",[t._v("与常规状态变量相比，常量和不可变量的 gas 成本要低得多。")]),t._v(" "),a("li",[t._v("对于常量，赋值给它的表达式将复制到所有访问该常量的位置，并且每次都会对其进行重新求值。这样可以进行本地优化。")]),t._v(" "),a("li",[t._v("不可变变量在构造时进行一次求值，并将其值复制到代码中访问它们的所有位置。 对于这些值，将保留 32 个字节，即使它们适合较少的字节也是如此。 因此，常量有时可能比不可变量更便宜。")]),t._v(" "),a("li",[t._v("不是所有类型的状态变量都支持用 "),a("code",[t._v("constant")]),t._v(" 或 "),a("code",[t._v("immutable")]),t._v(" 来修饰，当前"),a("code",[t._v("constant")]),t._v("仅支持 字符串/值类型,"),a("code",[t._v("immutable")]),t._v("仅支持值类型")])])]),t._v(" "),a("li",[t._v("状态变量的可见性又哪些？\n"),a("ul",[a("li",[t._v("三种，注意 external 不能声明在状态变量上，只能标识在函数上")])])]),t._v(" "),a("li",[t._v("四种可见性的使用区别\n"),a("ul",[a("li",[t._v("需要注意继承性")]),t._v(" "),a("li",[t._v("需要注意 external 不能声明在状态变量上，只能标识在函数上")]),t._v(" "),a("li",[t._v("public 自动生成 getter 函数")])])]),t._v(" "),a("li",[t._v("不同类型的 getter 函数是什么样子的？\n"),a("ul",[a("li",[t._v("编译器自动为所有 public 状态变量创建 getter 函数。")]),t._v(" "),a("li",[t._v("array/mapping/struct 类型的 getter 函数有参数。")])])]),t._v(" "),a("li",[t._v("全局时间单位有哪些？使用时候有没有需要注意的事情？\n"),a("ul",[a("li",[t._v("由于闰秒造成的每年不都是 365 天、每天不都是 24 小时 leap seconds，如果想要和线下时间堆砌，需要预言机进行时间矫正。")])])]),t._v(" "),a("li",[t._v("全局的区块和交易属性有哪些？分别返回什么？可以用来做什么？使用时候有没有什么需要注意的？\n"),a("ul",[a("li",[t._v("不要依赖 "),a("code",[t._v("block.timestamp")]),t._v(" 和 "),a("code",[t._v("blockhash")]),t._v(" 产生随机数，除非你知道自己在做什么。")])])]),t._v(" "),a("li",[t._v("全部的 ABI 编码及解码函数有哪些？分别什么作用？\n"),a("ul",[a("li",[a("code",[t._v("abi.encode")]),t._v(" 会补零")]),t._v(" "),a("li",[a("code",[t._v("abi.encodePacked")]),t._v(" 不会补零（不补零，容易导致碰撞错误。（两个参数拼在一起，导致参数不同，结果相同））")]),t._v(" "),a("li",[a("code",[t._v("abi.decode")])]),t._v(" "),a("li",[a("code",[t._v("abi.encodeWithSignature")])]),t._v(" "),a("li",[a("code",[t._v("abi.encodeWithSelector")])]),t._v(" "),a("li",[a("code",[t._v("abi.encodeCall")]),t._v(" 和 "),a("code",[t._v("abi.encodeWithSelector")]),t._v(" 一致；执行完整的类型检查, 确保类型匹配函数签名。")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);