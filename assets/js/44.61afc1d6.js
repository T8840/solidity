(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{450:function(_,v,e){"use strict";e.r(v);var t=e(2),a=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"_18-abi-编码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-abi-编码"}},[_._v("#")]),_._v(" 18.ABI 编码")]),_._v(" "),v("p",[_._v("ABI 是应用二进制接口，ABI是从区块链外部与合约进行交互以及合约与合约间进行交互的一种标准方式。数据会根据其类型进行编码。需要一种特定的概要（schema）来进行解码。")]),_._v(" "),v("p",[_._v("对于一些没有开源的代码，我们可以通过区块链上传入的参数，来反推数据结构，根据方法的结果，来反推内部实现逻辑。经常听到一些没有开源的合约被盗，基本就是被别人通过ABI编码反推来寻找漏洞的。")]),_._v(" "),v("h2",{attrs:{id:"_1️⃣-abi类型编码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-abi类型编码"}},[_._v("#")]),_._v(" 1️⃣ ABI类型编码")]),_._v(" "),v("h3",{attrs:{id:"基础类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[_._v("#")]),_._v(" 基础类型")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("uint<M>")]),_._v("： "),v("code",[_._v("M")]),_._v(" 位的无符号整数， "),v("code",[_._v("0 < M <= 256")]),_._v("、"),v("code",[_._v("M % 8 == 0")]),_._v("。例如： "),v("code",[_._v("uint32")]),_._v("， "),v("code",[_._v("uint8")]),_._v("， "),v("code",[_._v("uint256")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("int<M>")]),_._v("：以 2 的补码作为符号的 "),v("code",[_._v("M")]),_._v(" 位整数， "),v("code",[_._v("0 < M <= 256")]),_._v("、"),v("code",[_._v("M % 8 == 0")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("address")]),_._v("：除了字面上的意思和语言类型的区别以外，等价于"),v("code",[_._v("uint160")]),_._v("。在计算和 函数选择器(function selector) 中，通常使用 "),v("code",[_._v("address")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("uint")]),_._v("、 "),v("code",[_._v("int")]),_._v("： "),v("code",[_._v("uint256")]),_._v("、 "),v("code",[_._v("int256")]),_._v(" 各自的同义词。在计算和函数选择器(function selector) 中，通常使用 "),v("code",[_._v("uint256")]),_._v(" 和 "),v("code",[_._v("int256")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("bool")]),_._v("：等价于 "),v("code",[_._v("uint8")]),_._v("，取值限定为 0 或 1 。在计算和函数选择器(function selector) 中，通常使用 "),v("code",[_._v("bool")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("fixed<M>x<N>")]),_._v("： "),v("code",[_._v("M")]),_._v(" 位的有符号的固定小数位的十进制数字"),v("code",[_._v("8 <= M <= 256")]),_._v("、 "),v("code",[_._v("M % 8 == 0")]),_._v("、且 "),v("code",[_._v("0 < N <= 80")]),_._v("。其值 "),v("code",[_._v("v")]),_._v(" 即是"),v("code",[_._v("v / (10 ** N)")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("ufixed<M>x<N>")]),_._v("：无符号的 "),v("code",[_._v("fixed<M>x<N>")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("fixed")]),_._v("、 "),v("code",[_._v("ufixed")]),_._v("： "),v("code",[_._v("fixed128x18")]),_._v("、 "),v("code",[_._v("ufixed128x18")]),_._v("各自的同义词。在计算和 函数选择器(function selector) 中，通常使用"),v("code",[_._v("fixed128x18")]),_._v(" 和 "),v("code",[_._v("ufixed128x18")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("bytes<M>")]),_._v("： "),v("code",[_._v("M")]),_._v(" 字节的二进制类型， "),v("code",[_._v("0 < M <= 32")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("function")]),_._v("：一个地址（20 字节）之后紧跟一个 函数选择器(function selector)（4 字节）。编码之后等价于 "),v("code",[_._v("bytes24")]),_._v("。")])]),_._v(" "),v("h3",{attrs:{id:"定长数组类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定长数组类型"}},[_._v("#")]),_._v(" 定长数组类型")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("<type>[M]")]),_._v("：有 "),v("code",[_._v("M")]),_._v(" 个元素的定长数组，\n"),v("code",[_._v("M >= 0")]),_._v("，数组元素为给定类型。\n"),v("ul",[v("li",[_._v("⚠️：尽管此 ABI 规范可以表示零个元素的定长数组，但编译器不支持它们。")])])])]),_._v(" "),v("h3",{attrs:{id:"非定长类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非定长类型"}},[_._v("#")]),_._v(" 非定长类型：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("bytes")]),_._v("：动态大小的字节序列。")]),_._v(" "),v("li",[v("code",[_._v("string")]),_._v("：动态大小的 unicode 字符串，通常呈现为 UTF-8 编码。")]),_._v(" "),v("li",[v("code",[_._v("<type>[]")]),_._v("：元素为给定类型的变长数组。\n"),v("ul",[v("li",[_._v("可以将若干类型放到一对括号中，用逗号分隔开，以此来构成一个 元组(tuple)：")])])]),_._v(" "),v("li",[v("code",[_._v("(T1,T2,...,Tn)")]),_._v("：由 "),v("code",[_._v("T1")]),_._v("，...， "),v("code",[_._v("Tn")]),_._v("， "),v("code",[_._v("n >= 0")]),_._v(" 构成的 元组(tuple)。")])]),_._v(" "),v("p",[_._v('用 元组(tuple) 构成 元组(tuple)、用 元组(tuple)构成数组等等也是可能的。另外也可以构成"零元组（zero-tuples）"，就是\n'),v("code",[_._v("n = 0")]),_._v(" 的情况。")]),_._v(" "),v("h3",{attrs:{id:"不支持-abi-的-solidity-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不支持-abi-的-solidity-类型"}},[_._v("#")]),_._v(" 不支持 ABI 的 Solidity 类型")]),_._v(" "),v("p",[_._v("Solidity 支持上面介绍的所有同名称的类型，除元组外。 另一方面，一些Solidity 类型不被 ABI 支持。下表在左栏显示了不支持 ABI 的 Solidity 类型，以及在右栏显示可以代表它们的 ABI 类型。")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("Solidity")]),_._v(" "),v("th",[_._v("ABI")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("address payable")]),_._v(" "),v("td",[v("code",[_._v("address")])])]),_._v(" "),v("tr",[v("td",[_._v("contract")]),_._v(" "),v("td",[v("code",[_._v("address")])])]),_._v(" "),v("tr",[v("td",[_._v("enum")]),_._v(" "),v("td",[v("code",[_._v("uint8")])])]),_._v(" "),v("tr",[v("td",[_._v("user defined value types")]),_._v(" "),v("td",[_._v("its underlying value type")])]),_._v(" "),v("tr",[v("td",[_._v("struct")]),_._v(" "),v("td",[v("code",[_._v("tuple")])])])])]),_._v(" "),v("p",[_._v("⚠️: 在 "),v("code",[_._v("0.8.0")]),_._v(" 版本之前，枚举（enums） 可以多余 256 个成员并且可以使用最小可保存的整型来保存他们。")]),_._v(" "),v("h2",{attrs:{id:"_2️⃣-abi编码的设计准则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣-abi编码的设计准则"}},[_._v("#")]),_._v(" 2️⃣ ABI编码的设计准则")]),_._v(" "),v("p",[_._v("我们现在来正式讲述编码，它具有如下属性，如果参数是嵌套的数组，这些属性非常有用：")]),_._v(" "),v("ol",[v("li",[_._v("读取的次数取决于参数数组结构中的最大深度；也就是说，要取得"),v("code",[_._v("a_i[k][l][r]")]),_._v(" 需要读取 4  次。")]),_._v(" "),v("li",[_._v('变量或数组元素的数据不与其他数据交错，并且它是可以再定位的。它们只会使用相对的"地址"。')])]),_._v(" "),v("h2",{attrs:{id:"_3️⃣-编码的形式化说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣-编码的形式化说明"}},[_._v("#")]),_._v(" 3️⃣ 编码的形式化说明")]),_._v(" "),v("p",[_._v("我们需要区分静态和动态类型。静态类型会被直接编码，动态类型则会在当前数据块之后单独分配的位置被编码。")]),_._v(" "),v("p",[v("strong",[_._v("定义：")]),_._v(' 以下类型被称为"动态"：')]),_._v(" "),v("ul",[v("li",[v("code",[_._v("bytes")])]),_._v(" "),v("li",[v("code",[_._v("string")])]),_._v(" "),v("li",[_._v("任意类型 "),v("code",[_._v("T")]),_._v(" 的变长数组 "),v("code",[_._v("T[]")])]),_._v(" "),v("li",[_._v("任意动态类型 "),v("code",[_._v("T")]),_._v(" 的定长数组 "),v("code",[_._v("T[k]")]),_._v(" （ "),v("code",[_._v("k >= 0")]),_._v("）")]),_._v(" "),v("li",[_._v("由动态的 "),v("code",[_._v("Ti")]),_._v(" （ "),v("code",[_._v("1 <= i <= k")]),_._v("）构成的 元组(tuple) "),v("code",[_._v("(T1,...,Tk)")])])]),_._v(" "),v("p",[_._v('所有其他类型都被称为"静态"。')]),_._v(" "),v("p",[v("strong",[_._v("定义：")]),_._v(" "),v("code",[_._v("len(a)")]),_._v(" 是一个二进制字符串 "),v("code",[_._v("a")]),_._v(" 的字节长度。 "),v("code",[_._v("len(a)")]),_._v("\n的类型被呈现为 "),v("code",[_._v("uint256")]),_._v("。")]),_._v(" "),v("p",[_._v("我们把实际的编码 "),v("code",[_._v("enc")]),_._v("\n定义为一个由 ABI 类型到二进制字符串的值的映射；因而，当且仅当 "),v("code",[_._v("X")]),_._v("\n的类型是动态的， "),v("code",[_._v("len(enc(X))")]),_._v(" （即 "),v("code",[_._v("X")]),_._v("\n经编码后的实际长度，译者注）才会依赖于 "),v("code",[_._v("X")]),_._v(" 的值。")]),_._v(" "),v("p",[v("strong",[_._v("定义：")]),_._v(" 对任意 ABI 值 "),v("code",[_._v("X")]),_._v("，我们根据 "),v("code",[_._v("X")]),_._v(" 的实际类型递归地定义 "),v("code",[_._v("enc(X)")]),_._v("。")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("(T1,...,Tk)")]),_._v(" 对于 "),v("code",[_._v("k >= 0")]),_._v(" 且任意类型 "),v("code",[_._v("T1")]),_._v(" ,..., "),v("code",[_._v("Tk")])]),_._v(" "),v("p",[v("code",[_._v("enc(X) = head(X(1)) ... head(X(k)) tail(X(1)) ... tail(X(k))")])]),_._v(" "),v("p",[_._v("这里， "),v("code",[_._v("X = (X(1), ..., X(k))")]),_._v("，并且 当 "),v("code",[_._v("Ti")]),_._v(" 为静态类型时， "),v("code",[_._v("head")]),_._v("\n和 "),v("code",[_._v("tail")]),_._v(" 被定义为")]),_._v(" "),v("p",[v("code",[_._v("head(X(i)) = enc(X(i))")]),_._v(" and "),v("code",[_._v('tail(X(i)) = ""')]),_._v(" （空字符串）")]),_._v(" "),v("p",[_._v("否则，比如 "),v("code",[_._v("Ti")]),_._v(" 是动态类型时，它们被定义为")]),_._v(" "),v("p",[v("code",[_._v("head(X(i)) = enc(len(head(X(1)) ... head(X(k-1)) tail(X(1)) ... tail(X(i-1))))")]),_._v(" "),v("code",[_._v("tail(X(i)) = enc(X(i))")])]),_._v(" "),v("p",[_._v("注意，在动态类型的情况下，由于 head\n部分的长度仅取决于类型而非值，所以 "),v("code",[_._v("head(X(i))")]),_._v("\n是定义明确的。它的值是从 "),v("code",[_._v("enc(X)")]),_._v(" 的开头算起的，"),v("code",[_._v("tail(X(i))")]),_._v("\n的起始位在 "),v("code",[_._v("enc(X)")]),_._v(" 中的偏移量。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("T[k]")]),_._v(" 对于任意 "),v("code",[_._v("T")]),_._v(" 和 "),v("code",[_._v("k")]),_._v("：")]),_._v(" "),v("p",[v("code",[_._v("enc(X) = enc((X[0], ..., X[k-1]))")])]),_._v(" "),v("p",[_._v("即是说，它就像是个由相同类型的 "),v("code",[_._v("k")]),_._v(" 个元素组成的 元组(tuple)\n那样被编码的。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("T[]")]),_._v(" 当 "),v("code",[_._v("X")]),_._v(" 有 "),v("code",[_._v("k")]),_._v(" 个元素（ "),v("code",[_._v("k")]),_._v(" 被呈现为类型 "),v("code",[_._v("uint256")]),_._v("）：")]),_._v(" "),v("p",[v("code",[_._v("enc(X) = enc(k) enc([X[1], ..., X[k]])")])]),_._v(" "),v("p",[_._v("即是说，它就像是个由静态大小 "),v("code",[_._v("k")]),_._v("\n的数组那样被编码的，且由元素的个数作为前缀。")])]),_._v(" "),v("li",[v("p",[_._v("具有 "),v("code",[_._v("k")]),_._v(" （呈现为类型 "),v("code",[_._v("uint256")]),_._v("）长度的 "),v("code",[_._v("bytes")]),_._v("：")]),_._v(" "),v("p",[v("code",[_._v("enc(X) = enc(k) pad_right(X)")]),_._v("，即是说，字节数被编码为\n"),v("code",[_._v("uint256")]),_._v("，紧跟着实际的 "),v("code",[_._v("X")]),_._v(" 的字节码序列，再在高位（左侧）补上可以使\n"),v("code",[_._v("len(enc(X))")]),_._v(" 成为 32 的倍数的最少数量的 0 值字节数据。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("string")]),_._v("：")]),_._v(" "),v("p",[v("code",[_._v("enc(X) = enc(enc_utf8(X))")]),_._v("，即是说， "),v("code",[_._v("X")]),_._v(" 被 UFT-8\n编码，且在后续编码中将这个值解释为 "),v("code",[_._v("bytes")]),_._v("\n类型。注意，在随后的编码中使用的长度是其 UFT-8\n编码的字符串的字节数，而不是其字符数。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("uint<M>")]),_._v("： "),v("code",[_._v("enc(X)")]),_._v(" 是在 "),v("code",[_._v("X")]),_._v(" 的大端序编码的高位（左侧）补充若干 0\n值字节以使其长度成为 32 字节。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("address")]),_._v("：与 "),v("code",[_._v("uint160")]),_._v(" 的情况相同。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("int<M>")]),_._v("： "),v("code",[_._v("enc(X)")]),_._v(" 是在 "),v("code",[_._v("X")]),_._v(" 的大端序的 2\n的补码编码的高位（左侧）添加若干字节数据以使其长度成为 32\n字节；对于负数，添加值为 "),v("code",[_._v("0xff")]),_._v(" （即 8 位全为\n1，译者注）的字节数据，对于非负数，添加 0 值（即 8 位全为\n0，译者注）字节数据。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("bool")]),_._v("：与 "),v("code",[_._v("uint8")]),_._v(" 的情况相同， "),v("code",[_._v("1")]),_._v(" 用来表示 "),v("code",[_._v("true")]),_._v("， "),v("code",[_._v("0")]),_._v(" 表示\n"),v("code",[_._v("false")]),_._v("。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("fixed<M>x<N>")]),_._v("： "),v("code",[_._v("enc(X)")]),_._v(" 就是 "),v("code",[_._v("enc(X * 10**N)")]),_._v("，其中 "),v("code",[_._v("X * 10**N")]),_._v("\n可以理解为 "),v("code",[_._v("int256")]),_._v("。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("fixed")]),_._v("：与 "),v("code",[_._v("fixed128x18")]),_._v(" 的情况相同。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("ufixed<M>x<N>")]),_._v("： "),v("code",[_._v("enc(X)")]),_._v(" 就是 "),v("code",[_._v("enc(X * 10**N)")]),_._v("，其中 "),v("code",[_._v("X * 10**N")]),_._v("\n可以理解为 "),v("code",[_._v("uint256")]),_._v("。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("ufixed")]),_._v("：与 "),v("code",[_._v("ufixed128x18")]),_._v(" 的情况相同。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("bytes<M>")]),_._v("： "),v("code",[_._v("enc(X)")]),_._v(" 就是 "),v("code",[_._v("X")]),_._v(" 的字节序列加上为使长度成为 32\n字节而添加的若干 0 值字节。")])])]),_._v(" "),v("p",[_._v("注意，对于任意的 "),v("code",[_._v("X")]),_._v("， "),v("code",[_._v("len(enc(X))")]),_._v(" 都是 32 的倍数。")]),_._v(" "),v("h2",{attrs:{id:"_4️⃣-函数选择器和参数编码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4️⃣-函数选择器和参数编码"}},[_._v("#")]),_._v(" 4️⃣ 函数选择器和参数编码")]),_._v(" "),v("p",[_._v("函数选择器(function selector)：以 "),v("code",[_._v("a_1, ..., a_n")]),_._v(" 为参数的对 "),v("code",[_._v("f")]),_._v(" 函数的调用，会被编码为"),v("code",[_._v("function_selector(f) enc((a_1, ..., a_n))")]),_._v("，"),v("code",[_._v("f")]),_._v(" 的返回值 "),v("code",[_._v("v_1, ..., v_k")]),_._v(" 会被编码为 "),v("code",[_._v("enc((v_1, ..., v_k))")]),_._v("，也就是说，返回值会被组合为一个 元组(tuple) 进行编码。")]),_._v(" "),v("h3",{attrs:{id:"函数选择器-function-selector"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数选择器-function-selector"}},[_._v("#")]),_._v(" 函数选择器 function selector")]),_._v(" "),v("p",[_._v("这个在 "),v("RouterLink",{attrs:{to:"/source/04.function.html#id19"}},[_._v("函数的签名")]),_._v(" 那里已经详细介绍过，之类做一个小总结。")],1),_._v(" "),v("p",[_._v("一个函数调用数据的前 4 字节，指定了要调用的函数。这就是某个函数签名的Keccak 哈希的前 4 字节（bytes32类型是从左取值）。")]),_._v(" "),v("p",[_._v("函数签名被定义为基础原型的规范表达，而基础原型是"),v("strong",[_._v("函数名称加上由括号括起来的参数类型列表，参数类型间由一个逗号分隔开，且没有空格。")]),_._v(".")]),_._v(" "),v("p",[_._v("⚠️ 注意: 函数的返回类型并不是函数签名的一部分。在 "),v("RouterLink",{attrs:{to:"/source/04.function.html#id21"}},[_._v("Solidity 的函数重载")]),_._v(" 中，返回值并没有被考虑。这是为了使对函数调用的解析保持上下文无关。 然而 metadata 的描述中即包含了输入也包含了输出。（参考 "),v("RouterLink",{attrs:{to:"/source/17.metadata.html"}},[_._v("JSON ABI")]),_._v("）。")],1),_._v(" "),v("h3",{attrs:{id:"参数编码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参数编码"}},[_._v("#")]),_._v(" 参数编码")]),_._v(" "),v("p",[_._v("从第 5 字节开始是被编码的参数。这种编码方式也被用在其他地方，比如，返回值和事件的参数也会被用同样的方式进行编码，而用来指定函数的 4 个字节则不需要再进行编码。")]),_._v(" "),v("h3",{attrs:{id:"例子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[_._v("#")]),_._v(" 例子")]),_._v(" "),v("p",[_._v("给定一个合约：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.4.16 <0.9.0;\n\ncontract Foo {\n  function bar(bytes3[2]) public pure {}\n  function baz(uint32 x, bool y) public pure returns (bool r) { r = x > 32 || y; }\n  function sam(bytes, bool, uint[]) public pure {}\n}\n")])])]),v("h3",{attrs:{id:"调用-baz"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#调用-baz"}},[_._v("#")]),_._v(" 调用 baz")]),_._v(" "),v("p",[_._v("这样，对于我们的例子 "),v("code",[_._v("Foo")]),_._v("，如果我们想用 "),v("code",[_._v("69")]),_._v(" 和 "),v("code",[_._v("true")]),_._v(" 做参数调用 "),v("code",[_._v("baz")]),_._v("，我们总共需要传送 68 字节，可以分解为：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0xcdcd77c0")]),_._v("：方法 ID。这源自 ASCII 格式的 "),v("code",[_._v("baz(uint32,bool)")]),_._v(" 签名的\nKeccak 哈希的前 4 字节。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000045")]),_._v("：第一个参数，一个被用\n0 值字节补充到 32 字节的 uint32 值 "),v("code",[_._v("69")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000001")]),_._v("：第二个参数，一个被用\n0 值字节补充到 32 字节的 boolean 值 "),v("code",[_._v("true")]),_._v("。")])]),_._v(" "),v("p",[_._v("合起来就是:")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("0xcdcd77c0\n0000000000000000000000000000000000000000000000000000000000000045\n0000000000000000000000000000000000000000000000000000000000000001\n")])])]),v("p",[_._v("它返回一个 "),v("code",[_._v("bool")]),_._v("。比如它返回 "),v("code",[_._v("false")]),_._v("，那么它的输出将是一个字节数组\n"),v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000000")]),_._v("，一个 bool 值。")]),_._v(" "),v("h3",{attrs:{id:"调用-bar"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#调用-bar"}},[_._v("#")]),_._v(" 调用 bar")]),_._v(" "),v("p",[_._v("如果我们想用 "),v("code",[_._v('["abc", "def"]')]),_._v(" 做参数调用"),v("code",[_._v("bar")]),_._v("，我们总共需要传送 68 字节，可以分解为：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0xfce353f6")]),_._v("：方法 ID。源自 "),v("code",[_._v("bar(bytes3[2])")]),_._v(" 的签名。")]),_._v(" "),v("li",[v("code",[_._v("0x6162630000000000000000000000000000000000000000000000000000000000")]),_._v("：第一个参数的第一部分，一个"),v("code",[_._v("bytes3")]),_._v(" 值 "),v("code",[_._v('"abc"')]),_._v(" （左对齐）。")]),_._v(" "),v("li",[v("code",[_._v("0x6465660000000000000000000000000000000000000000000000000000000000")]),_._v("：第一个参数的第二部分，一个 "),v("code",[_._v("bytes3")]),_._v(" 值 "),v("code",[_._v('"def"')]),_._v(" （左对齐）。")])]),_._v(" "),v("p",[_._v("合起来就是:")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("0xfce353f6\n6162630000000000000000000000000000000000000000000000000000000000\n6465660000000000000000000000000000000000000000000000000000000000\n")])])]),v("h3",{attrs:{id:"调用-sam"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#调用-sam"}},[_._v("#")]),_._v(" 调用 sam")]),_._v(" "),v("p",[_._v("如果我们想用 "),v("code",[_._v('"dave"')]),_._v("、 "),v("code",[_._v("true")]),_._v(" 和 "),v("code",[_._v("[1,2,3]")]),_._v(" 作为参数调用"),v("code",[_._v("sam")]),_._v("，我们总共需要传送 292 字节，可以分解为：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0xa5643bf2")]),_._v("：方法 ID。源自 "),v("code",[_._v("sam(bytes,bool,uint256[])")]),_._v("的签名。注意， "),v("code",[_._v("uint")]),_._v(" 被替换为了它的权威代表 "),v("code",[_._v("uint256")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000060")]),_._v("：第一个参数（动态类型）的数据部分的位置，即从参数编码块开始位置算起的字节数。在这里，是 "),v("code",[_._v("0x60")]),_._v(" 。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000001")]),_._v("：第二个参数：boolean 的 true。")]),_._v(" "),v("li",[v("code",[_._v("0x00000000000000000000000000000000000000000000000000000000000000a0")]),_._v("：第三个参数（动态类型）的数据部分的位置，由字节数计量。在这里，是"),v("code",[_._v("0xa0")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000004")]),_._v("：第一个参数的数据部分，以字节数组的元素个数作为开始，在这里，是 4。")]),_._v(" "),v("li",[v("code",[_._v("0x6461766500000000000000000000000000000000000000000000000000000000")]),_._v("：第一个参数的内容 "),v("code",[_._v('"dave"')]),_._v(" 的 UTF-8 编码（在这里等同于 ASCII 编码），并在右侧（低位）用 0 值字节补充到 32 字节。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000003")]),_._v("：第三个参数的数据部分，以数组的元素个数作为开始，在这里，是 3。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000001")]),_._v("：第三个参数的第一个数组元素。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000002")]),_._v("：第三个参数的第二个数组元素。")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000003")]),_._v("：第三个参数的第三个数组元素。")])]),_._v(" "),v("p",[_._v("合起来就是:")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("0xa5643bf2\n0000000000000000000000000000000000000000000000000000000000000060\n0000000000000000000000000000000000000000000000000000000000000001\n00000000000000000000000000000000000000000000000000000000000000a0\n0000000000000000000000000000000000000000000000000000000000000004\n6461766500000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000003\n0000000000000000000000000000000000000000000000000000000000000001\n0000000000000000000000000000000000000000000000000000000000000002\n0000000000000000000000000000000000000000000000000000000000000003\n")])])]),v("h2",{attrs:{id:"_5️⃣-动态类型的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5️⃣-动态类型的使用"}},[_._v("#")]),_._v(" 5️⃣ 动态类型的使用")]),_._v(" "),v("h3",{attrs:{id:"例子1-静态和动态混合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#例子1-静态和动态混合"}},[_._v("#")]),_._v(" 例子1:静态和动态混合")]),_._v(" "),v("p",[_._v("用参数 "),v("code",[_._v('(0x123, [0x456, 0x789], "1234567890", "Hello, world!")')]),_._v(" 进行对函数 "),v("code",[_._v("f(uint,uint32[],bytes10,bytes)")]),_._v(" 的调用会通过以下方式进行编码：")]),_._v(" "),v("p",[_._v("取得 "),v("code",[_._v('sha3("f(uint256,uint32[],bytes10,bytes)")')]),_._v(" 的前 4 字节，也就是 "),v("code",[_._v("0x8be65246")]),_._v("。 然后我们对所有 4 个参数的头部进行编码。对静态类型 "),v("code",[_._v("uint256")]),_._v(" 和 "),v("code",[_._v("bytes10")]),_._v(" 是可以直接传过去的值；对于动态类型 "),v("code",[_._v("uint32[]")]),_._v(" 和 "),v("code",[_._v("bytes")]),_._v("，"),v("strong",[_._v("我们使用的字节数偏移量是它们的数据区域的起始位置，由需编码的值的开始位置算起")]),_._v("（也就是说，不计算包含了函数签名的前 4 字节），这就是：")]),_._v(" "),v("p",[v("strong",[_._v("基础部分")]),_._v("：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x8be65246")])]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000123")]),_._v(" "),v("code",[_._v("0x123")]),_._v(" 补充到 32 字节）")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000080")]),_._v("（第二个参数的数据部分起始位置的偏移量，"),v("code",[_._v("4*32")]),_._v(" 字节，正好是头部的大小）")]),_._v(" "),v("li",[v("code",[_._v("0x3132333435363738393000000000000000000000000000000000000000000000")]),_._v("（"),v("code",[_._v('"1234567890"')]),_._v(" 从右边补充到 32 字节）")]),_._v(" "),v("li",[v("code",[_._v("0x00000000000000000000000000000000000000000000000000000000000000e0")]),_._v("（第四个参数的数据部分起始位置的偏移量 =\n第一个动态参数的数据部分起始位置的偏移量 +  第一个动态参数的数据部分的长度 = "),v("code",[_._v("4*32 + 3*32")]),_._v("，参考后文）")])]),_._v(" "),v("p",[v("strong",[_._v("动态部分")]),_._v("：")]),_._v(" "),v("p",[_._v("在此之后，跟着"),v("strong",[_._v("第一个动态参数")]),_._v("的数据部分 "),v("code",[_._v("[0x456, 0x789]")]),_._v("：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000002")]),_._v("（数组元素个数，2）")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000456")]),_._v("（第一个数组元素）")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000789")]),_._v("（第二个数组元素）")])]),_._v(" "),v("p",[_._v("最后，我们将"),v("strong",[_._v("第二个动态参数")]),_._v("的数据部分 "),v("code",[_._v('"Hello, world!"')]),_._v(" 进行编码：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x000000000000000000000000000000000000000000000000000000000000000d")]),_._v("（元素个数，在这里是字节数：13）")]),_._v(" "),v("li",[v("code",[_._v("0x48656c6c6f2c20776f726c642100000000000000000000000000000000000000")]),_._v("（ "),v("code",[_._v('"Hello, world!"')]),_._v(" 从右边补充到 32 字节）")])]),_._v(" "),v("p",[_._v("最后，合并到一起的编码就是（为了清晰，在 函数选择器(function selector) 和每 32 字节之后加了换行）：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("0x8be65246\n0000000000000000000000000000000000000000000000000000000000000123\n0000000000000000000000000000000000000000000000000000000000000080\n3132333435363738393000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000000000000000e0\n0000000000000000000000000000000000000000000000000000000000000002\n0000000000000000000000000000000000000000000000000000000000000456\n0000000000000000000000000000000000000000000000000000000000000789\n000000000000000000000000000000000000000000000000000000000000000d\n48656c6c6f2c20776f726c642100000000000000000000000000000000000000\n")])])]),v("hr"),_._v(" "),v("h3",{attrs:{id:"例子2-纯动态参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#例子2-纯动态参数"}},[_._v("#")]),_._v(" 例子2: 纯动态参数")]),_._v(" "),v("p",[_._v("让我们使用相同的原理来对一个签名为 "),v("code",[_._v("g(uint[][],string[])")]),_._v("，参数值为"),v("code",[_._v('([[1, 2], [3]], ["one", "two", "three"])')]),_._v("的函数来进行编码；但从最原子的部分开始：")]),_._v(" "),v("p",[_._v("首先我们将第一个根数组 "),v("code",[_._v("[[1, 2], [3]]")]),_._v(" 的第一个嵌入的动态数组 "),v("code",[_._v("[1, 2]")]),_._v("的长度和数据进行编码：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000002")]),_._v("(第一个数组中的元素数量 2；元素本身是 "),v("code",[_._v("1")]),_._v(" 和 "),v("code",[_._v("2")]),_._v(")")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000001")]),_._v("(第一个元素)")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000002")]),_._v("(第二个元素)")])]),_._v(" "),v("p",[_._v("然后我们将第一个根数组 "),v("code",[_._v("[[1, 2], [3]]")]),_._v(" 的第二个潜入的动态数组 "),v("code",[_._v("[3]")]),_._v("的长度和数据进行编码：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000001")]),_._v("(第二个数组中的元素数量 1；元素数据是 "),v("code",[_._v("3")]),_._v(")")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000003")]),_._v("(第一个元素)")])]),_._v(" "),v("p",[_._v("然后我们需要找到动态数组 "),v("code",[_._v("[1, 2]")]),_._v(" 和 "),v("code",[_._v("[3]")]),_._v("的偏移量。要计算这个偏移量，我们可以来看一下第一个根数组 "),v("code",[_._v("[[1, 2], [3]]")]),_._v("编码后的具体数据：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("0 - a                                                                - [1, 2] 的偏移量\n1 - b                                                                - [3] 的偏移量\n2 - 0000000000000000000000000000000000000000000000000000000000000002 - [1, 2] 的计数\n3 - 0000000000000000000000000000000000000000000000000000000000000001 - 1 的编码\n4 - 0000000000000000000000000000000000000000000000000000000000000002 - 2 的编码\n5 - 0000000000000000000000000000000000000000000000000000000000000001 - [3] 的计数\n6 - 0000000000000000000000000000000000000000000000000000000000000003 - 3 的编码\n")])])]),v("p",[_._v("偏移量 "),v("code",[_._v("a")]),_._v(" 指向数组 "),v("code",[_._v("[1, 2]")]),_._v(" 内容的开始位置，即第 2 行的开始（64字节）；所以 "),v("code",[_._v("a = 0x0000000000000000000000000000000000000000000000000000000000000040")]),_._v("。")]),_._v(" "),v("p",[_._v("偏移量 "),v("code",[_._v("b")]),_._v(" 指向数组 "),v("code",[_._v("[3]")]),_._v(" 内容的开始位置，即第 5 行的开始（160字节）；所以 "),v("code",[_._v("b = 0x00000000000000000000000000000000000000000000000000000000000000a0")]),_._v("。")]),_._v(" "),v("p",[_._v("然后我们对第二个根数组的嵌入字符串进行编码：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000003")]),_._v("(单词 "),v("code",[_._v('"one"')]),_._v(" 中的字符个数)")]),_._v(" "),v("li",[v("code",[_._v("0x6f6e650000000000000000000000000000000000000000000000000000000000")]),_._v("(单词 "),v("code",[_._v('"one"')]),_._v(" 的 utf8 编码)")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000003")]),_._v("(单词 "),v("code",[_._v('"two"')]),_._v(" 中的字符个数)")]),_._v(" "),v("li",[v("code",[_._v("0x74776f0000000000000000000000000000000000000000000000000000000000")]),_._v("(单词 "),v("code",[_._v('"two"')]),_._v(" 的 utf8 编码)")]),_._v(" "),v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000005")]),_._v("(单词 "),v("code",[_._v('"three"')]),_._v(" 中的字符个数)")]),_._v(" "),v("li",[v("code",[_._v("0x7468726565000000000000000000000000000000000000000000000000000000")]),_._v("(单词 "),v("code",[_._v('"three"')]),_._v(" 的 utf8 编码)")])]),_._v(" "),v("p",[_._v("作为与第一个根数组的并列，因为字符串也属于动态元素，我们也需要找到它们的偏移量 "),v("code",[_._v("c")]),_._v(", "),v("code",[_._v("d")]),_._v(" 和 "),v("code",[_._v("e")]),_._v("：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('0 - c                                                                - "one" 的偏移量\n1 - d                                                                - "two" 的偏移量\n2 - e                                                                - "three" 的偏移量\n3 - 0000000000000000000000000000000000000000000000000000000000000003 - "one" 的字符计数\n4 - 6f6e650000000000000000000000000000000000000000000000000000000000 - "one" 的编码\n5 - 0000000000000000000000000000000000000000000000000000000000000003 - "two" 的字符计数\n6 - 74776f0000000000000000000000000000000000000000000000000000000000 - "two" 的编码\n7 - 0000000000000000000000000000000000000000000000000000000000000005 - "three" 的字符计数\n8 - 7468726565000000000000000000000000000000000000000000000000000000 - "three" 的编码\n')])])]),v("p",[_._v("偏移量 "),v("code",[_._v("c")]),_._v(" 指向字符串 "),v("code",[_._v('"one"')]),_._v(" 内容的开始位置，即第 3 行的开始（96字节）；所以"),v("code",[_._v("c = 0x0000000000000000000000000000000000000000000000000000000000000060")]),_._v("。")]),_._v(" "),v("p",[_._v("偏移量 "),v("code",[_._v("d")]),_._v(" 指向字符串 "),v("code",[_._v('"two"')]),_._v(" 内容的开始位置，即第 5 行的开始（160字节）；所以"),v("code",[_._v("d = 0x00000000000000000000000000000000000000000000000000000000000000a0")]),_._v("。")]),_._v(" "),v("p",[_._v("偏移量 "),v("code",[_._v("e")]),_._v(" 指向字符串 "),v("code",[_._v('"three"')]),_._v(" 内容的开始位置，即第 7 行的开始（224字节）；所以"),v("code",[_._v("e = 0x00000000000000000000000000000000000000000000000000000000000000e0")]),_._v("。")]),_._v(" "),v("p",[_._v("注意，根数组的嵌入元素的编码并不互相依赖，且具有对于函数签名"),v("code",[_._v("g(string[],uint[][])")]),_._v(" 所相同的编码。")]),_._v(" "),v("p",[_._v("然后我们对第一个根数组的长度进行编码：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000002")]),_._v("(第一个根数组的元素数量 2；这些元素本身是 "),v("code",[_._v("[1, 2]")]),_._v(" 和 "),v("code",[_._v("[3]")]),_._v(")")])]),_._v(" "),v("p",[_._v("而后我们对第二个根数组的长度进行编码：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("0x0000000000000000000000000000000000000000000000000000000000000003")]),_._v("(第二个根数组的元素数量 3；这些字符串本身是 "),v("code",[_._v('"one"')]),_._v("、"),v("code",[_._v('"two"')]),_._v(" 和"),v("code",[_._v('"three"')]),_._v(")")])]),_._v(" "),v("p",[_._v("最后，我们找到根动态数组元素 "),v("code",[_._v("[[1, 2], [3]]")]),_._v(" 和"),v("code",[_._v('["one", "two", "three"]')]),_._v(" 的偏移量 "),v("code",[_._v("f")]),_._v(" 和 "),v("code",[_._v("g")]),_._v("。汇编数据的正确顺序如下：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('0x2289b18c                                                            - 函数签名\n 0 - f                                                                - [[1, 2], [3]] 的偏移量\n 1 - g                                                                - 第二个参数的偏移量\n 2 - 0000000000000000000000000000000000000000000000000000000000000002 - [[1, 2], [3]] 元素计数\n 3 - 0000000000000000000000000000000000000000000000000000000000000040 - [1, 2] 的偏移量\n 4 - 00000000000000000000000000000000000000000000000000000000000000a0 - [3] 的偏移量\n 5 - 0000000000000000000000000000000000000000000000000000000000000002 - [1, 2] 的元素计数\n 6 - 0000000000000000000000000000000000000000000000000000000000000001 - 1 的编码\n 7 - 0000000000000000000000000000000000000000000000000000000000000002 - 2 的编码\n 8 - 0000000000000000000000000000000000000000000000000000000000000001 - [3] 的元素计数\n 9 - 0000000000000000000000000000000000000000000000000000000000000003 - 3 的编码\n10 - 0000000000000000000000000000000000000000000000000000000000000003 - 第二个参数元素计数\n11 - 0000000000000000000000000000000000000000000000000000000000000060 - "one" 的偏移量\n12 - 00000000000000000000000000000000000000000000000000000000000000a0 - "two" 的偏移量\n13 - 00000000000000000000000000000000000000000000000000000000000000e0 - "three" 的偏移量\n14 - 0000000000000000000000000000000000000000000000000000000000000003 - "one" 的字符计数\n15 - 6f6e650000000000000000000000000000000000000000000000000000000000 - "one" 的编码\n16 - 0000000000000000000000000000000000000000000000000000000000000003 - "two" 的字符计数\n17 - 74776f0000000000000000000000000000000000000000000000000000000000 - "two" 的编码\n18 - 0000000000000000000000000000000000000000000000000000000000000005 - "three" 的字符计数\n19 - 7468726565000000000000000000000000000000000000000000000000000000 - "three" 的编码\n')])])]),v("p",[_._v("偏移量 "),v("code",[_._v("f")]),_._v(" 指向数组 "),v("code",[_._v("[[1, 2], [3]]")]),_._v(" 内容的开始位置，即第 2 行的开始（64字节）；所以"),v("code",[_._v("f = 0x0000000000000000000000000000000000000000000000000000000000000040")]),_._v("。")]),_._v(" "),v("p",[_._v("偏移量 "),v("code",[_._v("g")]),_._v(" 指向数组 "),v("code",[_._v('["one", "two", "three"]')]),_._v(" 内容的开始位置，即第 10行的开始（320 字节）；所以 "),v("code",[_._v("g = 0x0000000000000000000000000000000000000000000000000000000000000140")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"_6️⃣-事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6️⃣-事件"}},[_._v("#")]),_._v(" 6️⃣ 事件")]),_._v(" "),v("p",[_._v("事件是以太坊的日志，事件是监视协议的一个抽象。日志项提供了合约的地址、一系列的"),v("code",[_._v("indexed")]),_._v("（最多 4 项）和一些任意长度的二进制数据。为了使用合适的类型数据结构来演绎这些功能，事件沿用了既存的 ABI 函数。")]),_._v(" "),v("p",[_._v("给定了事件名称和事件参数之后，我们将其分解为两个子集：已索引的和未索引的。已索引的部分，最多有3 个（对于非匿名事件）或 4 个（对于匿名事件），被用来与事件签名的 Keccak哈希一起组成日志项的主题。未索引的部分就组成了事件的字节数组。")]),_._v(" "),v("p",[_._v("这样，一个使用 ABI 的日志项就可以描述为：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("address")]),_._v("：合约地址（由 以太坊 真正提供）；")]),_._v(" "),v("li",[v("code",[_._v("topics[0]")]),_._v("："),v("code",[_._v('keccak(EVENT_NAME+"("+EVENT_ARGS.map(canonical_type_of).join(",")+")")')]),_._v(" "),v("ul",[v("li",[_._v("（ "),v("code",[_._v("canonical_type_of")]),_._v(" 是一个可以返回给定参数的权威类型的函数，例如，对 "),v("code",[_._v("uint indexed foo")]),_._v(" 它会返回 "),v("code",[_._v("uint256")]),_._v("）。")]),_._v(" "),v("li",[_._v("如果事件被声明为 "),v("code",[_._v("anonymous")]),_._v("，那么 "),v("code",[_._v("topics[0]")]),_._v(" 不会被生成；")])])]),_._v(" "),v("li",[v("code",[_._v("topics[n]")]),_._v("：\n"),v("ul",[v("li",[_._v("如果不是匿名事件，为 "),v("code",[_._v("abi_encode(EVENT_INDEXED_ARGS[n - 1])")])]),_._v(" "),v("li",[_._v("否则则为 "),v("code",[_._v("abi_encode(EVENT_INDEXED_ARGS[n])")]),_._v("（ "),v("code",[_._v("EVENT_INDEXED_ARGS")]),_._v(" 是已索引的 "),v("code",[_._v("EVENT_ARGS")]),_._v("）；")])])]),_._v(" "),v("li",[v("code",[_._v("data")]),_._v("： "),v("code",[_._v("abi_serialise(EVENT_NON_INDEXED_ARGS)")]),_._v(" "),v("ul",[v("li",[_._v("（"),v("code",[_._v("EVENT_NON_INDEXED_ARGS")]),_._v(" 是未索引的 "),v("code",[_._v("EVENT_ARGS")]),_._v("， "),v("code",[_._v("abi_serialise")]),_._v(" 是一个用来从某个函数返回一系列类型值的 ABI 序列化函数，就像上文所讲的那样）。")])])])]),_._v(" "),v("p",[_._v("对于所有定长的 Solidity 类型， "),v("code",[_._v("EVENT_INDEXED_ARGS")]),_._v(" 数组会直接包含 32 字节的编码值。")]),_._v(" "),v("p",[_._v("然而，对于 "),v("em",[_._v("动态长度的类型")]),_._v(" ，包含"),v("code",[_._v("string")]),_._v("、 "),v("code",[_._v("bytes")]),_._v(" 和数组， "),v("code",[_._v("EVENT_INDEXED_ARGS")]),_._v(" 会包含编码值的 "),v("em",[_._v("Keccak哈希")]),_._v(",而不是直接包含编码值。这样就允许应用程序更有效地查询动态长度类型的值（通过把编码值的哈希设定为主题），但也使应用程序不能对它们还没查询过的已索引的值进行解码。")]),_._v(" "),v("p",[_._v("对于动态长度的类型，应用程序开发者面临在对预先设定的值（如果参数已被索引）的快速检索和对任意数据的清晰处理（需要参数不被索引）之间的权衡。")]),_._v(" "),v("p",[_._v("开发者们可以通过定义两个参数（一个已索引、一个未索引）保存同一个值的方式来解决这种权衡，从而既获得高效的检索又能清晰地处理任意数据。")]),_._v(" "),v("h3",{attrs:{id:"事件索引参数的编码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件索引参数的编码"}},[_._v("#")]),_._v(" 事件索引参数的编码")]),_._v(" "),v("p",[_._v("对于不是值类型的事件索引参数，如：数组和结构，是不直接存储的，而是存储一个 keccak256-hash 编码。这个编码被定义如下：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("bytes")]),_._v(" 和 "),v("code",[_._v("string")]),_._v(" 的编码只是字符串的内容，没有任何填充或长度前缀。")]),_._v(" "),v("li",[_._v("结构体的编码是其成员编码的拼接，总是填充为 32 字节的倍数（即便是 "),v("code",[_._v("bytes")]),_._v(" 和 "),v("code",[_._v("string")]),_._v(" 类型）。")]),_._v(" "),v("li",[_._v("数组(包含动态和静态大小的数组)的编码是其元素的编码的拼接，总是填充为 32 字节的倍数（即便是 "),v("code",[_._v("bytes")]),_._v(" 和 "),v("code",[_._v("string")]),_._v(" 类型），并且没有长度前缀")])]),_._v(" "),v("p",[_._v("上面的规范，像往常一样，负数会符号扩展填充，而不是零填充。 "),v("code",[_._v("bytesNN")]),_._v("类型在右边填充，而 "),v("code",[_._v("uintNN")]),_._v(" / "),v("code",[_._v("intNN")]),_._v(" 在左边填充。")]),_._v(" "),v("p",[_._v("⚠️警告: 如果一个结构体包含一个以上的动态大小的数组，那么其编码会模糊有歧义。正因为如此，要经常重新检查事件数据，不能仅仅依靠索引参数的结果。")]),_._v(" "),v("h2",{attrs:{id:"_7️⃣-错误编码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7️⃣-错误编码"}},[_._v("#")]),_._v(" 7️⃣ 错误编码")]),_._v(" "),v("p",[_._v("在合约内部发生错误的情况下，合约可以使用一个特殊的操作码来中止执行，并恢复所有的状态变化。除了这些效果之外，可以返回描述性数据给调用者。这种描述性数据是对错误及其参数的编码，其方式与函数调用的数据相同。")]),_._v(" "),v("p",[_._v("例如，让我们考虑以下合约，其 "),v("code",[_._v("transfer")]),_._v(' 功能在出现"余额不足"时，提示自定义错误:')]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract TestToken {\n    error InsufficientBalance(uint256 available, uint256 required);\n    function transfer(address to, uint amount) public pure {\n        revert InsufficientBalance(0, amount);\n    }\n}\n")])])]),v("p",[_._v("返回错误数据是以函数调用相同的方式编码， "),v("code",[_._v("InsufficientBalance(0, amount)")]),_._v(" 与函数 "),v("code",[_._v("InsufficientBalance(uint256,uint256)")]),_._v(" 编码一样。 例如为："),v("code",[_._v("0xcf479181")]),_._v(", "),v("code",[_._v("uint256(0)")]),_._v(", "),v("code",[_._v("uint256(amount)")]),_._v(".")]),_._v(" "),v("p",[_._v("⚠️注意：错误的选择器 "),v("code",[_._v("0x00000000")]),_._v(" 和 "),v("code",[_._v("0xffffffff")]),_._v(" 被保留将来使用。")]),_._v(" "),v("p",[_._v("⚠️注意：永远不要相信错误数据。默认情况下，错误数据会通过外部调用链向上冒泡，这意味着一个合约可能会收到一个它直接调用的任何合约中没有定义的错误。此外，任何合约都可以通过返回与错误签名相匹配的数据来伪造任何错误，即使该错误没有在任何地方定义。")]),_._v(" "),v("h2",{attrs:{id:"_8️⃣-json"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8️⃣-json"}},[_._v("#")]),_._v(" 8️⃣ JSON")]),_._v(" "),v("p",[_._v("合约接口的 JSON 格式是用来描述函数，事件或错误描述的一个数组。")]),_._v(" "),v("h3",{attrs:{id:"函数的json"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数的json"}},[_._v("#")]),_._v(" 函数的JSON")]),_._v(" "),v("p",[_._v("一个函数的描述是一个有如下字段的 JSON 对象：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("type")]),_._v("： "),v("code",[_._v('"function"')]),_._v("、 "),v("code",[_._v('"constructor"')]),_._v(" 或 "),v("code",[_._v('"fallback"')])]),_._v(" "),v("li",[v("code",[_._v("name")]),_._v("：函数名称；")]),_._v(" "),v("li",[v("code",[_._v("inputs")]),_._v("：对象数组，每个数组对象会包含：\n"),v("ul",[v("li",[v("code",[_._v("name")]),_._v("：参数名称；")]),_._v(" "),v("li",[v("code",[_._v("type")]),_._v("：参数的权威类型（详见下文）")]),_._v(" "),v("li",[v("code",[_._v("components")]),_._v("：供 元组(tuple) 类型使用（详见下文）")])])]),_._v(" "),v("li",[v("code",[_._v("outputs")]),_._v("：一个类似于 "),v("code",[_._v("inputs")]),_._v("的对象数组，如果函数无返回值时可以被省略；")]),_._v(" "),v("li",[v("code",[_._v("payable")]),_._v("：如果函数接受 以太币 ，为 "),v("code",[_._v("true")]),_._v("；缺省为 "),v("code",[_._v("false")]),_._v("；")]),_._v(" "),v("li",[v("code",[_._v("stateMutability")]),_._v("：为下列值之一： "),v("code",[_._v("pure")]),_._v(" ， "),v("code",[_._v("view")]),_._v("， "),v("code",[_._v("nonpayable")]),_._v(" 和 "),v("code",[_._v("payable")]),_._v("。")])]),_._v(" "),v("p",[v("code",[_._v("type")]),_._v(" 可以被省略，缺省为 "),v("code",[_._v('"function"')]),_._v("。")]),_._v(" "),v("p",[_._v("⚠️注意：构造函数 constructor 和 fallback 函数没有 "),v("code",[_._v("name")]),_._v(" 或 "),v("code",[_._v("outputs")]),_._v("。fallback 函数也没有 "),v("code",[_._v("inputs")]),_._v("。")]),_._v(" "),v("ul",[v("li",[_._v("向 non-payable（即不接受 以太币 ）的函数发送非零值的以太币 会回退交易。")]),_._v(" "),v("li",[_._v("状态可变性 "),v("code",[_._v("nonpayable")]),_._v(" 是默认的，不用显示指定。")])]),_._v(" "),v("h3",{attrs:{id:"事件的json"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件的json"}},[_._v("#")]),_._v(" 事件的JSON")]),_._v(" "),v("p",[_._v("一个事件描述是一个有极其相似字段的 JSON 对象：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("type")]),_._v("：总是 "),v("code",[_._v('"event"')]),_._v("；")]),_._v(" "),v("li",[v("code",[_._v("name")]),_._v("：事件名称；")]),_._v(" "),v("li",[v("code",[_._v("inputs")]),_._v("：对象数组，每个数组对象会包含：\n"),v("ul",[v("li",[v("code",[_._v("name")]),_._v("：参数名称；")]),_._v(" "),v("li",[v("code",[_._v("type")]),_._v("：参数的权威类型（相见下文）；")]),_._v(" "),v("li",[v("code",[_._v("components")]),_._v("：供 元组(tuple) 类型使用（详见下文）；")]),_._v(" "),v("li",[v("code",[_._v("indexed")]),_._v("：如果此字段是日志的一个主题，则为 "),v("code",[_._v("true")]),_._v("；否则为\n"),v("code",[_._v("false")]),_._v("。")])])]),_._v(" "),v("li",[v("code",[_._v("anonymous")]),_._v("：如果事件被声明为 "),v("code",[_._v("anonymous")]),_._v("，则为 "),v("code",[_._v("true")]),_._v("。")])]),_._v(" "),v("h3",{attrs:{id:"错误的json"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#错误的json"}},[_._v("#")]),_._v(" 错误的JSON")]),_._v(" "),v("p",[_._v("错误这是一下类似的形式：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("type")]),_._v(": 为 "),v("code",[_._v('"error"')])]),_._v(" "),v("li",[v("code",[_._v("name")]),_._v(": 错误的名称。")]),_._v(" "),v("li",[v("code",[_._v("inputs")]),_._v(": 对象数组，每个元素包含：\n"),v("ul",[v("li",[v("code",[_._v("name")]),_._v(": 参数名称。")]),_._v(" "),v("li",[v("code",[_._v("type")]),_._v(": 参数的规范类型（更多详细内容见下文）。")]),_._v(" "),v("li",[v("code",[_._v("components")]),_._v(": 用于元组类型 (更多详细内容见下文).")])])])]),_._v(" "),v("p",[_._v("⚠️注意：在 JSON 数组中可能有多个名称相同、甚至签名相同的错误。例如，如果错误来自智能合约中的不同文件，或引用自另一个智能合约。")]),_._v(" "),v("p",[_._v("对于 ABI 来说，它仅取决于错误的名称，而不是它的定义位置。")]),_._v(" "),v("h3",{attrs:{id:"例子演示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#例子演示"}},[_._v("#")]),_._v(" 例子演示")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract Test {\n    bytes32 b;\n\n    constructor() {\n        b = "0x12";\n    }\n\n    event Event(uint256 indexed a, bytes32 b);\n    error InsufficientBalance(uint256 available, uint256 required);\n\n    function foo(uint256 a) public {\n        emit Event(a, b);\n    }\n}\n')])])]),v("p",[_._v("可由如下 JSON 来表示：")]),_._v(" "),v("div",{staticClass:"language-json extra-class"},[v("pre",{pre:!0,attrs:{class:"language-json"}},[v("code",[v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"inputs"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"stateMutability"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"nonpayable"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"constructor"')]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"inputs"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v("\n      "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"internalType"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"available"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n      "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"internalType"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"required"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"InsufficientBalance"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"error"')]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"anonymous"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[_._v("false")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"inputs"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v("\n      "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"indexed"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[_._v("true")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"internalType"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n      "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"indexed"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[_._v("false")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"internalType"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"bytes32"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"bytes32"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"Event"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"event"')]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"inputs"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v("\n      "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"internalType"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"uint256"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"name"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"foo"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"outputs"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"stateMutability"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"nonpayable"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[_._v('"type"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"function"')]),_._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),_._v("\n")])])]),v("h3",{attrs:{id:"处理-元组-tuple-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#处理-元组-tuple-类型"}},[_._v("#")]),_._v(" 处理 元组(tuple) 类型")]),_._v(" "),v("p",[_._v("尽管名称被有意地不作为 ABI 编码的一部分，但将它们包含进 JSON 来显示给最终用户是非常合理的。其结构会按下列方式进行嵌套：")]),_._v(" "),v("p",[_._v("一个拥有 "),v("code",[_._v("name")]),_._v("、 "),v("code",[_._v("type")]),_._v(" 和潜在的 "),v("code",[_._v("components")]),_._v("成员的对象描述了某种类型的变量。 直至到达一个 元组(tuple)类型且到那点的存储在 "),v("code",[_._v("type")]),_._v(" 属性中的字符串以 "),v("code",[_._v("tuple")]),_._v("为前缀，也就是说，在 "),v("code",[_._v("tuple")]),_._v(" 之后紧跟一个 "),v("code",[_._v("[]")]),_._v(" 或有整数 "),v("code",[_._v("k")]),_._v(" 的"),v("code",[_._v("[k]")]),_._v("，才能确定一个 元组(tuple)。 元组(tuple) 的组件元素会被存储在成员"),v("code",[_._v("components")]),_._v("中，它是一个数组类型，且与顶级对象具有同样的结构，只是在这里不允许已索引的（"),v("code",[_._v("indexed")]),_._v("）数组元素。")]),_._v(" "),v("p",[_._v("作为例子，代码")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("pragma solidity >=0.7.5 <0.9.0;\npragma abicoder v2;\n\ncontract Test {\n  struct S { uint a; uint[] b; T[] c; }\n  struct T { uint x; uint y; }\n  function f(S memory, T memory, uint) public pure { }\n  function g() public pure returns (S memory, T memoryt, uint) {}\n}\n")])])]),v("p",[_._v("可由如下 JSON 来表示：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('[\n  {\n    "name": "f",\n    "type": "function",\n    "inputs": [\n      {\n        "name": "s",\n        "type": "tuple",\n        "components": [\n          {\n            "name": "a",\n            "type": "uint256"\n          },\n          {\n            "name": "b",\n            "type": "uint256[]"\n          },\n          {\n            "name": "c",\n            "type": "tuple[]",\n            "components": [\n              {\n                "name": "x",\n                "type": "uint256"\n              },\n              {\n                "name": "y",\n                "type": "uint256"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "name": "t",\n        "type": "tuple",\n        "components": [\n          {\n            "name": "x",\n            "type": "uint256"\n          },\n          {\n            "name": "y",\n            "type": "uint256"\n          }\n        ]\n      },\n      {\n        "name": "a",\n        "type": "uint256"\n      }\n    ],\n    "outputs": []\n  }\n]\n')])])]),v("h2",{attrs:{id:"_9️⃣-严格编码模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9️⃣-严格编码模式"}},[_._v("#")]),_._v(" 9️⃣ 严格编码模式")]),_._v(" "),v("p",[_._v("严格的编码模式与上述正式规范中定义的编码完全相同，但使偏移量必须尽可能小，同时不能在数据区域产生重叠，也不允许有间隙。")]),_._v(" "),v("p",[_._v("通常，ABI 解码器是以直接的方式编写的，只是遵循偏移量指针，但有些解码器可能强制执行严格模式。Solidity ABI 解码器目前并不强制执行严格模式，但编码器总是以严格模式创建数据。")]),_._v(" "),v("h2",{attrs:{id:"🔟-非标准打包模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🔟-非标准打包模式"}},[_._v("#")]),_._v(" 🔟 非标准打包模式")]),_._v(" "),v("p",[_._v("Non-standard Packed Mode 被称为非标准打包模式，通过 "),v("code",[_._v("abi.encodePacked()")]),_._v(", Solidity 支持一种非标准打包模式处理以下情形：")]),_._v(" "),v("ul",[v("li",[_._v("长度低于 32 字节的类型，会直接拼接，既不会进行补 0 操作，也不会进行符号扩展")]),_._v(" "),v("li",[_._v("动态类型会直接进行编码，并且不包含长度信息。")]),_._v(" "),v("li",[_._v("数组元素会填充，但仍旧会就地编码。")])]),_._v(" "),v("p",[_._v("例如，对 "),v("code",[_._v("int1, bytes1, uint16, string")]),_._v(" 用数值"),v("code",[_._v('-1, 0x42, 0x2424, "Hello, world!"')]),_._v(" 进行编码将生成如下结果 ::")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('0xff42242448656c6c6f2c20776f726c6421\n  ^^                                 int1(-1)\n    ^^                               bytes1(0x42)\n      ^^^^                           uint16(0x2424)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^ string("Hello, world!") without a length field\n')])])]),v("p",[_._v("更具体地说:")]),_._v(" "),v("ul",[v("li",[_._v("在编码过程中，所有内容均是就地编码，因此在编码中，没有头和尾的区别，而且数组的长度也不会被编码。")]),_._v(" "),v("li",[v("code",[_._v("abi.encodePacked")]),_._v(" 的参数以不填充的方式编码，只要它们不是数组（或"),v("code",[_._v("string")]),_._v(" 或 "),v("code",[_._v("bytes")]),_._v("）。")]),_._v(" "),v("li",[_._v("数组的编码是由其元素的编码及其填充（padding）的拼接")]),_._v(" "),v("li",[_._v("动态大小的类型如 "),v("code",[_._v("string")]),_._v(", "),v("code",[_._v("bytes")]),_._v(" 或 "),v("code",[_._v("uint[]")]),_._v(" 在编码时，不包含长度字段")]),_._v(" "),v("li",[v("code",[_._v("string")]),_._v(" 或 "),v("code",[_._v("bytes")]),_._v(" 的编码不会在末尾进行填充（padding），除非它是一个数组或结构的一部分（此时会填充为\n32 个自己的整数倍 ）")])]),_._v(" "),v("p",[_._v("一般来说，只要有两个动态大小的元素，因为缺少长度字段，编码就会模糊有歧义。")]),_._v(" "),v("p",[_._v("如果需要填充，可以使用明确的类型转换："),v("code",[_._v('abi.encodePacked(uint16(0x12)) == hex"0012"')]),_._v(".")]),_._v(" "),v("p",[_._v("由于在调用函数时没有使用打包模式编码，所以没有特别支持预留函数选择器。由于编码是模糊有歧义的，所以也没有解码方法。")]),_._v(" "),v("p",[_._v("警告:如果你使用 "),v("code",[_._v("keccak256(abi.encodePacked(a, b))")]),_._v(" 并且 "),v("code",[_._v("a")]),_._v(" 和 "),v("code",[_._v("b")]),_._v(" 都是动态类型， 很容易通过把 "),v("code",[_._v("a")]),_._v(" 的一部分移到 "),v("code",[_._v("b")]),_._v("中，从而发生哈希碰撞，反之亦然。")]),_._v(" "),v("p",[_._v("更具体地说， "),v("code",[_._v('abi.encodePacked("a", "bc") == abi.encodePacked("ab", "c")')]),_._v(" 。如果你使用 "),v("code",[_._v("abi.encodePacked")]),_._v(" 进行签名，认证或数据完整性检验，请确保总是使用相同的类型并且其中只有最多一个动态类型。除非有令人信服的理由，否则应首选 "),v("code",[_._v("abi.encode")]),_._v(" 。")]),_._v(" "),v("h2",{attrs:{id:"🆗-实战应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🆗-实战应用"}},[_._v("#")]),_._v(" 🆗 实战应用")]),_._v(" "),v("h2",{attrs:{id:"️⃣-问答题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#️⃣-问答题"}},[_._v("#")]),_._v(" #️⃣ 问答题")]),_._v(" "),v("ul",[v("li",[_._v("不支持 ABI 的 Solidity 类型\n"),v("ul",[v("li",[_._v("下表在左栏显示了不支持 ABI 的 Solidity 类型，以及在右栏显示可以代表它们的 ABI 类型。")])])])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("Solidity")]),_._v(" "),v("th",[_._v("ABI")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("address payable")]),_._v(" "),v("td",[v("code",[_._v("address")])])]),_._v(" "),v("tr",[v("td",[_._v("contract")]),_._v(" "),v("td",[v("code",[_._v("address")])])]),_._v(" "),v("tr",[v("td",[_._v("enum")]),_._v(" "),v("td",[v("code",[_._v("uint8")])])]),_._v(" "),v("tr",[v("td",[_._v("user defined value types")]),_._v(" "),v("td",[_._v("its underlying value type")])]),_._v(" "),v("tr",[v("td",[_._v("struct")]),_._v(" "),v("td",[v("code",[_._v("tuple")])])])])]),_._v(" "),v("ul",[v("li",[_._v("ABI编码的设计准则\n"),v("ol",[v("li",[_._v("读取的次数取决于参数数组结构中的最大深度；也就是说，要取得"),v("code",[_._v("a_i[k][l][r]")]),_._v(" 需要读取 4  次。")]),_._v(" "),v("li",[_._v('变量或数组元素的数据不与其他数据交错，并且它是可以再定位的。它们只会使用相对的"地址"。')])])]),_._v(" "),v("li",[_._v("函数选择器 function selector 编码原则\n"),v("ul",[v("li",[_._v("函数签名被定义为基础原型的规范表达，而基础原型是函数名称加上由括号括起来的参数类型列表，参数类型间由一个逗号分隔开，且没有空格。.")]),_._v(" "),v("li",[_._v("函数的返回类型并不是函数签名的一部分。在 "),v("RouterLink",{attrs:{to:"/source/04.function.html#id20"}},[_._v("Solidity 的函数重载")]),_._v(" 中，返回值并没有被考虑。这是为了使对函数调用的解析保持上下文无关。 然而 metadata 的描述中即包含了输入也包含了输出。（参考 "),v("RouterLink",{attrs:{to:"/source/17.metadata.html"}},[_._v("JSON ABI")]),_._v("）。")],1)])]),_._v(" "),v("li",[_._v("参数由静态和动态混合时的编码\n"),v("ul",[v("li",[_._v("用参数 "),v("code",[_._v('(0x123, [0x456, 0x789], "1234567890", "Hello, world!")')]),_._v(" 进行对函数 "),v("code",[_._v("f(uint,uint32[],bytes10,bytes)")]),_._v(" 的调用会通过以下方式进行编码：取得 "),v("code",[_._v('sha3("f(uint256,uint32[],bytes10,bytes)")')]),_._v(" 的前 4 字节，也就是 "),v("code",[_._v("0x8be65246")]),_._v("。 然后我们对所有 4 个参数的头部进行编码。对静态类型 "),v("code",[_._v("uint256")]),_._v(" 和 "),v("code",[_._v("bytes10")]),_._v(" 是可以直接传过去的值；对于动态类型 "),v("code",[_._v("uint32[]")]),_._v(" 和 "),v("code",[_._v("bytes")]),_._v("，"),v("strong",[_._v("我们使用的字节数偏移量是它们的数据区域的起始位置，由需编码的值的开始位置算起")]),_._v("（也就是说，不计算包含了函数签名的前 4 字节）")])])]),_._v(" "),v("li",[_._v("事件的ABI\n"),v("ul",[v("li",[_._v("事件是以太坊的日志，事件是监视协议的一个抽象。日志项提供了合约的地址、一系列的"),v("code",[_._v("indexed")]),_._v("（最多 4 项）和一些任意长度的二进制数据。为了使用合适的类型数据结构来演绎这些功能，事件沿用了既存的 ABI 函数。")]),_._v(" "),v("li",[_._v("给定了事件名称和事件参数之后，我们将其分解为两个子集：已索引的和未索引的。已索引的部分，最多有3 个（对于非匿名事件）或 4 个（对于匿名事件），被用来与事件签名的 Keccak哈希一起组成日志项的主题。未索引的部分就组成了事件的字节数组。")])])]),_._v(" "),v("li",[_._v("错误ABI\n"),v("ul",[v("li",[_._v("错误数据是以函数调用相同的方式编码， "),v("code",[_._v("InsufficientBalance(0, amount)")]),_._v(" 与函数 "),v("code",[_._v("InsufficientBalance(uint256,uint256)")]),_._v(" 编码一样。 例如为："),v("code",[_._v("0xcf479181")]),_._v(", "),v("code",[_._v("uint256(0)")]),_._v(", "),v("code",[_._v("uint256(amount)")]),_._v(".")]),_._v(" "),v("li",[_._v("错误的选择器 "),v("code",[_._v("0x00000000")]),_._v(" 和 "),v("code",[_._v("0xffffffff")]),_._v(" 被保留将来使用。")]),_._v(" "),v("li",[_._v("永远不要相信错误数据。")])])]),_._v(" "),v("li",[_._v("ABI编码有哪些模式？\n"),v("ul",[v("li",[_._v("标准模式")]),_._v(" "),v("li",[_._v("严格编码模式\n"),v("ul",[v("li",[_._v("严格的编码模式与上述正式规范中定义的编码完全相同，但使偏移量必须尽可能小，同时不能在数据区域产生重叠，也不允许有间隙。")])])]),_._v(" "),v("li",[_._v("非严格打包模式\n"),v("ul",[v("li",[_._v("通过 "),v("code",[_._v("abi.encodePacked()")]),_._v(", Solidity 支持一种非标准打包模式处理以下情形：")]),_._v(" "),v("li",[_._v("长度低于 32 字节的类型，会直接拼接，既不会进行补 0 操作，也不会进行符号扩展")]),_._v(" "),v("li",[_._v("动态类型会直接进行编码，并且不包含长度信息。")]),_._v(" "),v("li",[_._v("数组元素会填充，但仍旧会就地编码。")])])])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);